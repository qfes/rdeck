% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/deckgl-layers.R, R/doc-deckgl-layers.R
\name{mvt_layer}
\alias{mvt_layer}
\alias{add_mvt_layer}
\title{MVT Layer}
\usage{
add_mvt_layer(
  rdeck,
  ...,
  id = uuid::UUIDgenerate(),
  name = "MVTLayer",
  group_name = NULL,
  data = NULL,
  visible = TRUE,
  pickable = FALSE,
  opacity = 1,
  wrap_longitude = FALSE,
  position_format = "XYZ",
  color_format = "RGBA",
  auto_highlight = FALSE,
  highlight_color = "#00008080",
  get_tile_data = NULL,
  extent = NULL,
  tile_size = 512,
  max_zoom = NULL,
  min_zoom = 0,
  max_cache_size = NULL,
  max_cache_byte_size = NULL,
  refinement_strategy = "best-available",
  z_range = NULL,
  max_requests = 6,
  zoom_offset = 0,
  unique_id_property = "",
  highlighted_feature_id = NULL,
  binary = TRUE,
  blending_mode = "normal",
  visibility_toggle = TRUE,
  tooltip = NULL,
  filled = TRUE,
  stroked = TRUE,
  line_width_max_pixels = 9007199254740991,
  line_width_min_pixels = 0,
  line_width_scale = 1,
  line_width_units = "meters",
  point_radius_max_pixels = 9007199254740991,
  point_radius_min_pixels = 0,
  point_radius_scale = 1,
  point_radius_units = "meters",
  point_antialiasing = TRUE,
  point_billboard = FALSE,
  get_fill_color = "#000000ff",
  get_line_color = "#000000ff",
  get_line_width = 1,
  get_point_radius = 1,
  icon_atlas = NULL,
  icon_mapping = list(),
  icon_size_max_pixels = 9007199254740991,
  icon_size_min_pixels = 0,
  icon_size_scale = 1,
  icon_size_units = "pixels",
  icon_alpha_cutoff = 0.05,
  icon_billboard = TRUE,
  get_icon = icon,
  get_icon_angle = 0,
  get_icon_color = "#000000ff",
  get_icon_pixel_offset = c(0, 0),
  get_icon_size = 1,
  text_size_max_pixels = 9007199254740991,
  text_size_min_pixels = 0,
  text_size_scale = 1,
  text_size_units = "pixels",
  text_background = FALSE,
  text_background_padding = c(0, 0, 0, 0),
  text_font_family = "Roboto, Helvetica, Arial, san-serif",
  text_font_weight = "normal",
  text_line_height = 1,
  text_max_width = -1,
  text_outline_color = "#000000ff",
  text_outline_width = 0,
  text_word_break = "break-word",
  text_billboard = TRUE,
  text_font_settings = list(),
  get_text = text,
  get_text_angle = 0,
  get_text_color = "#000000ff",
  get_text_pixel_offset = c(0, 0),
  get_text_size = 32,
  get_text_anchor = "middle",
  get_text_alignment_baseline = "center",
  get_text_background_color = "#ffffffff",
  get_text_border_color = "#000000ff",
  get_text_border_width = 0,
  line_joint_rounded = FALSE,
  line_cap_rounded = FALSE,
  line_miter_limit = 4,
  line_billboard = FALSE,
  extruded = FALSE,
  wireframe = FALSE,
  elevation_scale = 1,
  material = TRUE,
  get_elevation = 1000,
  point_type = "circle"
)
}
\arguments{
\item{rdeck}{<\code{\link{rdeck}} | \code{\link{rdeck_proxy}}> An rdeck map instance.}

\item{...}{Additional parameters that will be forwarded to deck.gl javascript without
validation nor processing. All dots must be named and will be \code{camelCased} when serialised.
A warning is raised when dots are used, warning class \code{rdeck_dots_nonempty}.}

\item{id}{<\code{string}> The layer's identifier must be unique for among all layers of the same
type for a map. Defaults to \code{\link[uuid:UUIDgenerate]{uuid::UUIDgenerate()}}, but should be explicitly defined for
updatable layers in a shiny application.}

\item{name}{<\code{string}> Identifies the layer on tooltips and legends. It does
not need to be unique, but should be brief. Defaults to the deck.gl class name for the layer.}

\item{group_name}{<\code{string}> Defines the group that this layer belongs to. Currently only
effective on the layer selector, if \code{visibility_toggle = TRUE}.}

\item{data}{<\code{character}> A character vector of mapbox vector tile url templates.
Substrings \code{"{x}"}, \code{"{y}"}, \code{"{z}"} will be replaced with a tile's actual index on
request.

If multiple url templates are supplied, each endpoint must return the same data for the
same tile index.}

\item{visible}{<\code{boolean}> Determines whether the layer is visible or not; also determines
whether any legend elements for the layer will be displayed.
When \code{visble = NULL}:
\itemize{
\item on update, use current state in the browser
\item on add, layer is visible
}}

\item{pickable}{<\code{boolean}> Determines if the layer responds to pointer / touch events.}

\item{opacity}{<\code{number}> Determines the layer's opacity.}

\item{wrap_longitude}{<\code{boolean}> Normalises geometry longitudes.}

\item{position_format}{<\code{"XY"} | \code{"XYZ"}> Determines whether each coordinate has two (XY)
or three (XYZ) elements.}

\item{color_format}{<\code{"RGB"} | \code{"RGBA"}> Determines whether the alpha channel of the colours
will be ignored by accessors, making all colours opaque.}

\item{auto_highlight}{<\code{boolean}> When \code{TRUE}, the current object \emph{hovered} by the cursor is
highlighted by \code{highlight_color}.}

\item{highlight_color}{<\code{\link{accessor}} | \code{\link{scale}} | \code{\link{color}}> When \code{auto_highlight} and
\code{pickable} are enabled, \code{highlight_color} determines the colour of the currently
highlighted object. If a single colour value is supplied, that colour will be used to
highlight all objects in the layer. Per-object highlighting is achieved with a colour scale,
or a \href{https://dplyr.tidyverse.org/articles/programming.html}{tidy-eval} column of colours.}

\item{get_tile_data}{<\code{\link[htmlwidgets:JS]{JS}}> retrieves the data of each tile.
See deck.gl \href{https://deck.gl/docs/api-reference/geo-layers/tile-layer#gettiledata}{getTileData}.}

\item{extent}{<\code{c(min_x, min_y, max_x, max_y)}> Tiles in this bounding box
will be rendered at \code{min_zoom}, when zoomed out below \code{min_zoom}.}

\item{tile_size}{<\code{number}> A power of 2 that is the pixel dimensions of the tile.}

\item{max_zoom}{<\code{number}> Tiles above this zoom level are not shown. Defaults to \code{NULL}.}

\item{min_zoom}{<\code{number}> Tiles below this zoom level are not shown. Defaults to \code{0}.}

\item{max_cache_size}{<\code{number}> Maximum number of tiles that can be cached. Defaults to
5x the number of tiles in current viewport.}

\item{max_cache_byte_size}{<\code{number}> Maximum memory used for caching tiles.}

\item{refinement_strategy}{<\code{"best-available"} | \code{"no-overlap"} | \code{"never"}> How the tile
layer refines visibility of tiles. Defaults to \code{"best-available"}.}

\item{z_range}{<\code{c(min, max)}> Array representing the range of heights in the tile.}

\item{max_requests}{<\code{number}> Maximum number of concurrent HTTP
requests across all specified tile provider domains. If a negative number is
supplied no throttling occurs (HTTP/2 only).}

\item{zoom_offset}{<\code{int}> The offset changes the zoom level at which the tiles are fetched.}

\item{unique_id_property}{<\code{string}> Used for highlighting features across tiles. Features
on separate tiles are deemed to be \emph{the same feature} by the supplied property name. If
no value is supplied, the feature id will be used.}

\item{highlighted_feature_id}{<\code{number} | \code{string}> When provided, a feature with ID
corresponding to the supplied value with be highlighted with \code{highlight_color}.}

\item{binary}{<\code{boolean}> Improves rendering performance by removing the tile serialisation
and deserialisation between worker and main thread.

Caveat: Polygons and multi-polygons with holes will be rendered as solid polygons.}

\item{blending_mode}{<\code{"normal"} | \code{"additive"} | \code{"subtractive"}> Sets the blending mode.
Blending modes:
\itemize{
\item \code{normal}: Normal blending doesn't alter colours of overlapping objects.
\item \code{additive}: Additive blending adds colours of overlapping objects. Useful for highlighting
dot density on dark maps.
\item \code{subtractive}: Subtractive blending darkens overlapping objects. Useful for highlighting
dot density on light maps.
}}

\item{visibility_toggle}{<\code{boolean}> Whether this layer will appear in the layer selector.}

\item{tooltip}{<\code{\link{tooltip}}> Defines the columns (and their order) that will be displayed in
the layer tooltip, if \code{pickable == TRUE}.
Supports \href{https://dplyr.tidyverse.org/reference/dplyr_tidy_select.html}{tidy-select} if a
\code{data} is a \code{data.frame}. \code{sfc} columns are always removed.}

\item{filled}{<\code{boolean}> If \code{TRUE}, draw the filled area of each point.}

\item{stroked}{<\code{boolean}> If \code{TRUE}, draw an outline around each object.}

\item{line_width_max_pixels}{<\code{number}> The maximum line width in pixels.}

\item{line_width_min_pixels}{<\code{number}> The minimum line width in pixels.}

\item{line_width_scale}{<\code{number}> The line width multiplier.}

\item{line_width_units}{<\code{"pixels"} | \code{"common"} | \code{"meters"}> The units of line width.}

\item{point_radius_max_pixels}{<\code{number}> The maximum radius in pixels.}

\item{point_radius_min_pixels}{<\code{number}> The minimum radius in pixels.}

\item{point_radius_scale}{<\code{number}> The radius multiplier for all points.}

\item{point_radius_units}{<\code{"pixels"} | \code{"common"} | \code{"meters"}> The units of point radius.}

\item{get_fill_color}{<\code{\link{accessor}} | \code{\link{scale}} | \code{\link{color}}> The fill colour of each object.
Accepts a single colour value, a colour scale, or a
\href{https://dplyr.tidyverse.org/articles/programming.html}{tidy-eval} column of colours.}

\item{get_line_color}{<\code{\link{accessor}} | \code{\link{scale}} | \code{\link{color}}> The line colour of each object.
Accepts a single colour value, a colour scale, or a
\href{https://dplyr.tidyverse.org/articles/programming.html}{tidy-eval} column of colours.}

\item{get_line_width}{<\code{\link{accessor}} | \code{\link{scale}} | \code{number}> The outline of the object
in units specified by \code{line_width_units}.
Accepts a single numeric value, a numeric scale, or a
\href{https://dplyr.tidyverse.org/articles/programming.html}{tidy-eval} column of numbers.}

\item{get_point_radius}{<\code{\link{accessor}} | \code{\link{scale}} | \code{number}> The radius of each point, in units
specified by \code{radius_units}.
Accepts a single numeric value, a numeric scale, or a
\href{https://dplyr.tidyverse.org/articles/programming.html}{tidy-eval} column of numbers.}

\item{line_joint_rounded}{<\code{boolean}>}

\item{line_miter_limit}{number}

\item{extruded}{<\code{boolean}> If \code{TRUE}, extrude objects along the z-axis; if \code{FALSE}, all
objects will be flat.}

\item{wireframe}{<\code{boolean}> If \code{TRUE} and \code{extruded == TRUE}, draw a line wireframe of the
object. The outline will have horizontal lines closing the top and bottom polygons and
vertical lines for each vertex of the polygon.}

\item{elevation_scale}{<\code{number}> The elevation multiplier.}

\item{material}{<\code{boolean}>}

\item{get_elevation}{<\code{\link{accessor}} | \code{\link{scale}} | \code{number}> The elevation to extrude each
object in the z-axis. Height units are in metres.
Accepts a single numeric value, a numeric scale, or a
\href{https://dplyr.tidyverse.org/articles/programming.html}{tidy-eval} column of numbers.}

\item{point_type}{<\code{"circle"}|\code{"icon"}|\code{"text"}|combination>
Determines how to render point and multipoint features. May be one of:
\itemize{
\item \code{"circle"}
\item \code{"icon"}
\item \code{"text"}
}

Or a combination, separated by \code{"+"}, e.g. \code{"circle+text"}.}
}
\description{
MVT Layer
}
\seealso{
\url{https://github.com/visgl/deck.gl/blob/8.4-release/docs/api-reference/geo-layers/mvt-layer.md}

Other geo-layers: 
\code{\link{great_circle_layer}},
\code{\link{h3_cluster_layer}},
\code{\link{h3_hexagon_layer}},
\code{\link{s2_layer}},
\code{\link{terrain_layer}},
\code{\link{tile_3d_layer}},
\code{\link{tile_layer}},
\code{\link{trips_layer}}

Other layers: 
\code{\link{arc_layer}},
\code{\link{bitmap_layer}},
\code{\link{column_layer}},
\code{\link{contour_layer}},
\code{\link{cpu_grid_layer}},
\code{\link{geojson_layer}},
\code{\link{gpu_grid_layer}},
\code{\link{great_circle_layer}},
\code{\link{grid_cell_layer}},
\code{\link{grid_layer}},
\code{\link{h3_cluster_layer}},
\code{\link{h3_hexagon_layer}},
\code{\link{heatmap_layer}},
\code{\link{hexagon_layer}},
\code{\link{icon_layer}},
\code{\link{line_layer}},
\code{\link{path_layer}},
\code{\link{point_cloud_layer}},
\code{\link{polygon_layer}},
\code{\link{s2_layer}},
\code{\link{scatterplot_layer}},
\code{\link{scenegraph_layer}},
\code{\link{screen_grid_layer}},
\code{\link{simple_mesh_layer}},
\code{\link{solid_polygon_layer}},
\code{\link{terrain_layer}},
\code{\link{text_layer}},
\code{\link{tile_3d_layer}},
\code{\link{tile_layer}},
\code{\link{trips_layer}}
}
\concept{geo-layers}
\concept{layers}
