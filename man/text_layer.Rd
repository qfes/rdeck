% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/deckgl-layers.R, R/doc-deckgl-layers.R
\name{text_layer}
\alias{text_layer}
\alias{add_text_layer}
\alias{update_text_layer}
\title{Text Layer}
\usage{
add_text_layer(
  rdeck,
  ...,
  id = uuid::UUIDgenerate(),
  name = "TextLayer",
  group_name = NULL,
  data = NULL,
  visible = TRUE,
  pickable = FALSE,
  opacity = 1,
  wrap_longitude = FALSE,
  position_format = "XYZ",
  color_format = "RGBA",
  auto_highlight = FALSE,
  highlight_color = "#00008080",
  billboard = TRUE,
  size_scale = 1,
  size_units = "pixels",
  size_min_pixels = 0,
  size_max_pixels = 9007199254740991,
  background = FALSE,
  get_background_color = "#ffffffff",
  get_border_color = "#000000ff",
  get_border_width = 0,
  background_padding = c(0, 0, 0, 0),
  font_family = "Roboto, Helvetica, Arial, san-serif",
  font_weight = "normal",
  line_height = 1,
  outline_width = 0,
  outline_color = "#000000ff",
  font_settings = list(),
  word_break = "break-word",
  max_width = -1,
  get_text = text,
  get_position = position,
  get_color = "#000000ff",
  get_size = 32,
  get_angle = 0,
  get_text_anchor = "middle",
  get_alignment_baseline = "center",
  get_pixel_offset = c(0, 0),
  blending_mode = "normal",
  visibility_toggle = TRUE,
  tooltip = NULL
)

update_text_layer(
  rdeck,
  ...,
  id,
  name = cur_value(),
  group_name = cur_value(),
  data = cur_value(),
  visible = cur_value(),
  pickable = cur_value(),
  opacity = cur_value(),
  wrap_longitude = cur_value(),
  position_format = cur_value(),
  color_format = cur_value(),
  auto_highlight = cur_value(),
  highlight_color = cur_value(),
  billboard = cur_value(),
  size_scale = cur_value(),
  size_units = cur_value(),
  size_min_pixels = cur_value(),
  size_max_pixels = cur_value(),
  background = cur_value(),
  get_background_color = cur_value(),
  get_border_color = cur_value(),
  get_border_width = cur_value(),
  background_padding = cur_value(),
  font_family = cur_value(),
  font_weight = cur_value(),
  line_height = cur_value(),
  outline_width = cur_value(),
  outline_color = cur_value(),
  font_settings = cur_value(),
  word_break = cur_value(),
  max_width = cur_value(),
  get_text = cur_value(),
  get_position = cur_value(),
  get_color = cur_value(),
  get_size = cur_value(),
  get_angle = cur_value(),
  get_text_anchor = cur_value(),
  get_alignment_baseline = cur_value(),
  get_pixel_offset = cur_value(),
  blending_mode = cur_value(),
  visibility_toggle = cur_value(),
  tooltip = cur_value()
)
}
\arguments{
\item{rdeck}{<\code{\link{rdeck}} | \code{\link{rdeck_proxy}}> An rdeck map instance.}

\item{...}{Additional parameters that will be forwarded to deck.gl javascript without
validation nor processing. All dots must be named and will be \code{camelCased} when serialised.
A warning is raised when dots are used, warning class \code{rdeck_dots_nonempty}.}

\item{id}{<\code{string}> The layer's identifier must be unique for among all layers of the same
type for a map. Defaults to \code{\link[uuid:UUIDgenerate]{uuid::UUIDgenerate()}}, but should be explicitly defined for
updatable layers in a shiny application.}

\item{name}{<\code{string}> Identifies the layer on tooltips and legends. It does
not need to be unique, but should be brief. Defaults to the deck.gl class name for the layer.}

\item{group_name}{<\code{string}> Defines the group that this layer belongs to. Currently only
effective on the layer selector, if \code{visibility_toggle = TRUE}.}

\item{data}{<\code{data.frame} | \code{\link[sf:sf]{sf}} | \code{string}> The layer's data. Data frames and
sf objects will contain all columns that are referenced by the layer's accessors. Strings
will be interpreted as a URL and data will be retrieved dynamically in the browser.}

\item{visible}{<\code{boolean}> Determines whether the layer is visible or not; also determines
whether any legend elements for the layer will be displayed.
When \code{visble = NULL}:
\itemize{
\item on update, use current state in the browser
\item on add, layer is visible
}}

\item{pickable}{<\code{boolean}> Determines if the layer responds to pointer / touch events.}

\item{opacity}{<\code{number}> Determines the layer's opacity.}

\item{wrap_longitude}{<\code{boolean}> Normalises geometry longitudes.}

\item{position_format}{<\code{"XY"} | \code{"XYZ"}> Determines whether each coordinate has two (XY)
or three (XYZ) elements.}

\item{color_format}{<\code{"RGB"} | \code{"RGBA"}> Determines whether the alpha channel of the colours
will be ignored by accessors, making all colours opaque.}

\item{auto_highlight}{<\code{boolean}> When \code{TRUE}, the current object \emph{hovered} by the cursor is
highlighted by \code{highlight_color}.}

\item{highlight_color}{<\code{\link{accessor}} | \code{\link{scale}} | \code{\link{color}}> When \code{auto_highlight} and
\code{pickable} are enabled, \code{highlight_color} determines the colour of the currently
highlighted object. If a single colour value is supplied, that colour will be used to
highlight all objects in the layer. Per-object highlighting is achieved with a colour scale,
or a \href{https://dplyr.tidyverse.org/articles/programming.html}{tidy-eval} column of colours.}

\item{billboard}{<\code{boolean}> If \code{TRUE}, the text label always faces the camera, otherwise it
faces up (z).}

\item{size_scale}{<\code{number}> The size multiplier.}

\item{size_units}{<\code{"pixels"} | \code{"common"} | \code{"meters"}> The units of the size specified by
\code{get_size}.}

\item{size_min_pixels}{<\code{number}> The minimum size in pixels.}

\item{size_max_pixels}{<\code{number}> The maximum size in pixels.}

\item{background}{<\code{boolean}> Whether to render background for text labels.}

\item{get_background_color}{<\code{\link{accessor}} | \code{\link{scale}} | \code{\link{color}}> The text background colour,
if \code{background = TRUE}. Accepts a single colour value, a colour scale, or a
\href{https://dplyr.tidyverse.org/articles/programming.html}{tidy-eval} column of colours.}

\item{get_border_color}{<\code{\link{accessor}} | \code{\link{scale}} | \code{\link{color}}> The text background border colour,
if \code{background = TRUE}. Accepts a single colour value, a colour scale, or a
\href{https://dplyr.tidyverse.org/articles/programming.html}{tidy-eval} column of colours.}

\item{get_border_width}{<\code{\link{accessor}} | \code{\link{scale}} | \code{number}> The text background border width,
if \code{background = TRUE}. Accepts a single numeric value, a numeric scale, or a
\href{https://dplyr.tidyverse.org/articles/programming.html}{tidy-eval} column of numbers.}

\item{background_padding}{<\code{numeric}> The text background padding. Must be an array of 2 or
4 numbers.}

\item{font_family}{<\code{string}> Specifies a prioritised list of one or more font family names.
See \href{https://developer.mozilla.org/en-US/docs/Web/CSS/font-family}{font-family}.}

\item{font_weight}{<\code{"normal"} | \code{"bold"} | \code{100:900}> The font weight. See
\href{https://developer.mozilla.org/en-US/docs/Web/CSS/font-weight}{font-weight}}

\item{line_height}{<\code{number}> A unitless number that will be multiplied with \code{get_size}
to set the line height.}

\item{outline_width}{<\code{number}> The text outline width, relative to font size. Requires
\code{font_settings$sdf = TRUE}.}

\item{outline_color}{<\code{\link{color}}> The text outline colour. Requires \code{font_settings$sdf = TRUE}.}

\item{font_settings}{<\code{font_settings}> Advanced options for fine tuning the appearance
and performance of the generated \code{font_atlas}.}

\item{word_break}{<\code{"break-word"} | \code{"break-all"}> Requires a valid \code{max_width}.}

\item{max_width}{<\code{number}> Used together with \code{word_break} for wrapping text. Specifies
the width limit to break the text into multiple lines.}

\item{get_text}{<\code{\link{accessor}}> The text value of each text label. Accepts a
\href{https://dplyr.tidyverse.org/articles/programming.html}{tidy-eval} character column of
labels.}

\item{get_position}{<\code{\link{accessor}}> The position geometry column, either a \code{sfc_POINT} or
a \code{sfc_MULTIPOINT} column with CRS \href{http://epsg.io/4326}{EPSG:4326}.
Supports \href{https://dplyr.tidyverse.org/articles/programming.html}{tidy-eval}.}

\item{get_color}{<\code{\link{accessor}} | \code{\link{scale}} | \code{\link{color}}> The colour of each object.
Accepts a single colour value, a colour scale, or a
\href{https://dplyr.tidyverse.org/articles/programming.html}{tidy-eval} column of colours.}

\item{get_size}{<\code{\link{accessor}} | \code{\link{scale}} | \code{number}> The font size of each text label,
in units specified by \code{size_units}.
Accepts a single numeric value, a numeric scale, or a
\href{https://dplyr.tidyverse.org/articles/programming.html}{tidy-eval} column of numbers.}

\item{get_angle}{<\code{\link{accessor}} | \code{number}> The rotating angle of each text label in degrees.
Accepts a single numeric value, or a
\href{https://dplyr.tidyverse.org/articles/programming.html}{tidy-eval} column of numbers.}

\item{get_text_anchor}{<\code{\link{accessor}} | \code{"start"} | \code{"middle"} | \code{"end"}> The text label
anchor. May be a single value, or a
\href{https://dplyr.tidyverse.org/articles/programming.html}{tidy-eval} character column.}

\item{get_alignment_baseline}{<\code{\link{accessor}} | \code{"top"} | \code{"center"} | \code{"bottom"}> The text
label alignment baseline. May be a single value, or a
\href{https://dplyr.tidyverse.org/articles/programming.html}{tidy-eval} character column.}

\item{get_pixel_offset}{<\code{\link{accessor}} | \code{number}> The pixel offset for each object.
Accepts a single length-2 \code{numeric} vector, or a
\href{https://dplyr.tidyverse.org/articles/programming.html}{tidy-eval} list column.}

\item{blending_mode}{<\code{"normal"} | \code{"additive"} | \code{"subtractive"}> Sets the blending mode.
Blending modes:
\itemize{
\item \code{normal}: Normal blending doesn't alter colours of overlapping objects.
\item \code{additive}: Additive blending adds colours of overlapping objects. Useful for highlighting
dot density on dark maps.
\item \code{subtractive}: Subtractive blending darkens overlapping objects. Useful for highlighting
dot density on light maps.
}}

\item{visibility_toggle}{<\code{boolean}> Whether this layer will appear in the layer selector.}

\item{tooltip}{<\code{\link{tooltip}}> Defines the columns (and their order) that will be displayed in
the layer tooltip, if \code{pickable == TRUE}.
Supports \href{https://dplyr.tidyverse.org/reference/dplyr_tidy_select.html}{tidy-select} if a
\code{data} is a \code{data.frame}. \code{sfc} columns are always removed.}
}
\description{
Text Layer
}
\seealso{
\url{https://github.com/visgl/deck.gl/blob/8.7-release/docs/api-reference/layers/text-layer.md}

Other core-layers: 
\code{\link{arc_layer}},
\code{\link{bitmap_layer}},
\code{\link{column_layer}},
\code{\link{geojson_layer}},
\code{\link{grid_cell_layer}},
\code{\link{icon_layer}},
\code{\link{line_layer}},
\code{\link{path_layer}},
\code{\link{point_cloud_layer}},
\code{\link{polygon_layer}},
\code{\link{scatterplot_layer}},
\code{\link{solid_polygon_layer}}

Other layers: 
\code{\link{arc_layer}},
\code{\link{bitmap_layer}},
\code{\link{column_layer}},
\code{\link{contour_layer}},
\code{\link{cpu_grid_layer}},
\code{\link{geojson_layer}},
\code{\link{gpu_grid_layer}},
\code{\link{great_circle_layer}},
\code{\link{grid_cell_layer}},
\code{\link{grid_layer}},
\code{\link{h3_cluster_layer}},
\code{\link{h3_hexagon_layer}},
\code{\link{heatmap_layer}},
\code{\link{hexagon_layer}},
\code{\link{icon_layer}},
\code{\link{line_layer}},
\code{\link{mvt_layer}},
\code{\link{path_layer}},
\code{\link{point_cloud_layer}},
\code{\link{polygon_layer}},
\code{\link{quadkey_layer}},
\code{\link{s2_layer}},
\code{\link{scatterplot_layer}},
\code{\link{scenegraph_layer}},
\code{\link{screen_grid_layer}},
\code{\link{simple_mesh_layer}},
\code{\link{solid_polygon_layer}},
\code{\link{terrain_layer}},
\code{\link{tile_3d_layer}},
\code{\link{tile_layer}},
\code{\link{trips_layer}}
}
\concept{core-layers}
\concept{layers}
