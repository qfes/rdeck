<%#
  template for generating a function to validate a deck.gl layer prop.
  data is expected with the following form:
  data = {
    propType: {
      name: "foo",
      type: "number",
      valueType: "number",
      min: 0,
      max: 100
      isScalable: false,
      isOptional: true,
      isScalar: true,
      length: null
    },
    utils: {
      typeCheck,
      colCheck,
      ...
    ]
  }
-%>
<% const func = `validate_${propType.name}`; -%>
# validate <%- propType.name %>
<%- func -%> <- function(layer) {
  UseMethod("<%- func -%>")
}

<%- func -%>.default <- function(layer) {
  <%- propType.name %> <- layer$<%- propType.name -%>
  <%# validate optional / required %>
  <%-
    propType.isOptional
      ? `if (is.null(${propType.name})) return()`
      : `tidyassert::assert(!is.null(${propType.name}))`
  -%>
  <%# type validation %>
  <% let { conditions, messages } = utils.typeCheck(propType); -%>
  <%-
    utils.formatAssertion(
      conditions,
      messages.length === 1
        ? [`{.arg {name}} must be ` + messages[0]]
        : [`{.arg {name}} must be one of the following`, ...messages],
      `name = "${propType.name}"`
    );
  -%>
  <%# accessor column validation %>
  <% if (propType.type === "accessor" && propType.valueType != null) { -%>
    if (inherits(layer$data, "data.frame") && is_accessor(<%- propType.name %>)) {
      <%
        let columnName = `${propType.name}$col`;
        let { conditions, messages } = utils.columnCheck(propType, "accessor_data");
      -%>
      data <- layer$data
      accessor_data <- data[[tidyselect::eval_select(<%- columnName -%>, data)]]
      <%-
        utils.formatAssertion(
          conditions,
          [`Column {.col {col}} is invalid for accessor {.arg {name}}; it must be ` + messages[0]],
          `name = "${propType.name}"`,
          `col = substitute(${columnName})`
        );
      -%>
    }
  <% } -%>
}
