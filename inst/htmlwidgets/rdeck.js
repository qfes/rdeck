!function(e,t){"object"==typeof exports&&"object"==typeof module?module.exports=t():"function"==typeof define&&define.amd?define([],t):"object"==typeof exports?exports.rdeck=t():e.rdeck=t()}(self,(()=>(()=>{var e,t,n,r={8981:(e,t,n)=>{"use strict";n.r(t),n.d(t,{VERSION:()=>xt,Widget:()=>bt,binding:()=>vt,getWidgetById:()=>jt,getWidgets:()=>wt});var r={};n.r(r),n.d(r,{AGGREGATION_OPERATION:()=>c.KM,ArcLayer:()=>l.zv,BitmapLayer:()=>l.hz,CPUGridLayer:()=>c.ab,ColumnLayer:()=>l.eJ,ContourLayer:()=>c.YY,GPUGridLayer:()=>c.ML,GeoJsonLayer:()=>l.UW,GreatCircleLayer:()=>u.GJ,GridCellLayer:()=>l.cJ,GridLayer:()=>c.mU,H3ClusterLayer:()=>u.cH,H3HexagonLayer:()=>u.bW,HeatmapLayer:()=>c.zP,HexagonLayer:()=>c.dX,IconLayer:()=>l.eE,LineLayer:()=>l.Ie,MVTLayer:()=>u.i3,PathLayer:()=>l.nr,PointCloudLayer:()=>l.U5,PolygonLayer:()=>l.dW,QuadkeyLayer:()=>u._k,S2Layer:()=>u.jJ,ScatterplotLayer:()=>l.pU,ScenegraphLayer:()=>d.S,ScreenGridLayer:()=>c.p3,SimpleMeshLayer:()=>d.L,SolidPolygonLayer:()=>l.PJ,TerrainLayer:()=>u.tr,TextLayer:()=>l.AB,Tile3DLayer:()=>u.cY,TileLayer:()=>u.Im,TripsLayer:()=>u.Fw,_AggregationLayer:()=>c.Di,_BinSorter:()=>c.l0,_CPUAggregator:()=>c.oA,_GPUGridAggregator:()=>c.Wc,_MultiIconLayer:()=>l.vb,_TextBackgroundLayer:()=>l._k,_getURLFromTemplate:()=>u.po});n(8559);var i=n(5893),o=n(3935),s=n(7294),a=n(6935),l=n(7786),c=n(9080),u=n(803),d=n(1956),p=n(5395);const h=[0,0,0,255];function f([e,t,n,r=255]){return`rgba(${e}, ${t}, ${n}, ${r/255})`}function y(e,t){return Array.isArray(e)?t||4!==e.length?((t=null!=t?t:[])[0]=e[0],t[1]=e[1],t[2]=e[2],t[3]=3===e.length?e[3]:255,t):e:"string"==typeof e?(function(e,t){if(7===e.length){const n=parseInt(e.substring(1),16);t[0]=Math.floor(n/65536),t[1]=Math.floor(n/256%256),t[2]=n%256,t[3]=255}else if(9===e.length){const n=parseInt(e.substring(1),16);t[0]=Math.floor(n/16777216),t[1]=Math.floor(n/65536%256),t[2]=Math.floor(n/256%256),t[3]=n%256}}(e,t=null!=t?t:[]),t):h}var m=n(4634),g=n(4177),v=n(458),b=n(5801),j=n(3613),w=n(602),x=n(8973),L=n(2625);function k(e){return null!==e&&"object"==typeof e&&"accessor"===e.type}function S(e){return k(e)&&"scale"in e}var C=n(9757);const N=Object.freeze({additive:{[C.Z.BLEND]:!0,blendFunc:[C.Z.SRC_ALPHA,C.Z.DST_ALPHA],blendEquation:C.Z.FUNC_ADD},subtractive:{[C.Z.BLEND]:!0,blendFunc:[C.Z.ONE,C.Z.ONE_MINUS_DST_COLOR,C.Z.SRC_ALPHA,C.Z.DST_ALPHA],blendEquation:[C.Z.FUNC_SUBTRACT,C.Z.FUNC_ADD]},normal:{[C.Z.BLEND]:!0,blendFunc:[C.Z.SRC_ALPHA,C.Z.ONE_MINUS_SRC_ALPHA,C.Z.ONE,C.Z.ONE_MINUS_SRC_ALPHA],blendEquation:[C.Z.FUNC_ADD,C.Z.FUNC_ADD]}});function _(e="normal"){var t;return null!==(t=N[e])&&void 0!==t?t:N.normal}function T(e){return null!==e&&"object"==typeof e&&"frame"in e}function A(e,{name:t,type:n}){var r,i,o,s;const a=e.frame,l=Object.fromEntries(Object.entries(a).map((([e])=>[e,[]]))),c=Object.keys(e.frame).filter((e=>e!==t)),u=a[t],d=function(e){switch(e){case"MULTIPOINT":return O;case"MULTILINESTRING":return Z;case"MULTIPOLYGON":return E;default:throw TypeError(`${e} not supported`)}}(n),p=e=>{for(const t of c)l[t].push(a[t][e])},h=[];for(let n=0;n<e.length;n++){const a=u[n];if(d(a)){l[t].push(...a);for(let t=0;t<a.length;t++)p(n),h.push(null!==(i=null===(r=e.indices)||void 0===r?void 0:r[n])&&void 0!==i?i:n)}else l[t].push(a),p(n),h.push(null!==(s=null===(o=e.indices)||void 0===o?void 0:o[n])&&void 0!==s?s:n)}return{length:l[t].length,geometry:{...e.geometry,[t]:n.replace("MULTI","")},indices:h,frame:l}}function O(e){return Array.isArray(null==e?void 0:e[0])}function Z(e){var t;return Array.isArray(null===(t=null==e?void 0:e[0])||void 0===t?void 0:t[0])}function E(e){var t,n;return Array.isArray(null===(n=null===(t=null==e?void 0:e[0])||void 0===t?void 0:t[0])||void 0===n?void 0:n[0])}var M=n(3693),P=n(4717),H=n(6867),I=n(3326),D=n(2112),R=n(7693),G=n(8569),U=n(1435);class z extends M.Z{initializeState(){if(!function(e){return F.some((t=>e instanceof t))}(this))return;const e=this,t=e.getAttributeManager();t&&t.addInstanced({pickingColors:{type:C.Z.UNSIGNED_BYTE,size:3,accessor:(t,{index:n,data:r,target:i})=>{var o,s,a;if(T(r)&&Array.isArray(r.indices))return e.encodePickingColor(r.indices.indexOf(r.indices[n]),i);const l=null===(s=null===(o=null==t?void 0:t.__source)||void 0===o?void 0:o.parent)||void 0===s?void 0:s.props.data;return T(l)&&Array.isArray(l.indices)?e.encodePickingColor(l.indices.indexOf(l.indices[t.__source.index]),i):e.encodePickingColor(null!==(a=null==t?void 0:t.__source.index)&&void 0!==a?a:n,i)},shaderAttributes:{pickingColors:{divisor:0},instancePickingColors:{divisor:1}}}})}}const F=[P.Z,H.Z,I.Z,D.Z,R.Z,G.Z,U.Z];function V(e,...t){if(null==e)return null;const n=t.map((t=>[t,e[t]]));return Object.fromEntries(n)}function W(e){return e.clientHeight>0&&e.clientHeight>0?e:e.parentElement?W(e.parentElement):null}function q(e){const t=W(e);if(e===t||null==t)return[e.clientWidth,e.clientHeight];const{width:n,height:r}=getComputedStyle(e),i=document.createElement("div");Object.assign(i.style,{width:n,height:r,display:"hidden"}),t.appendChild(i);const o=[i.clientWidth,i.clientHeight];return t.removeChild(i),o}function Y(e,t){const n=new Map;for(const r of e){const e=t(r);n.has(e)?n.get(e).push(r):n.set(e,[r])}return n}function B(...e){return e.filter((e=>null!=e)).join(" ")}function $(e,t=0){let n;return(...r)=>{window.clearTimeout(n),n=window.setTimeout((()=>e(...r)),t)}}class J{constructor(){this._val=new Map,this._ref=new WeakMap}getStore(e){return"object"==typeof(t=e)&&null!==t||"function"==typeof t?this._ref:this._val;var t}has(e){return this.getStore(e).has(e)}get(e){return this.getStore(e).get(e)}set(e,t){return this.getStore(e).set(e,t),this}}function K(e){const t=new J;return(...n)=>{const r=n[0],i=n.slice(0,-1).reduceRight(((e,t)=>{if(e.has(t))return e.get(t);const n=new J;return e.set(t,n),n}),t);if(i.has(r))return i.get(r);const o=e(...n);return i.set(r,o),o}}const X=K((function(e){const t=function(e){return Object.entries(e.geometry).filter((([,e])=>/MULTI/.test(e))).map((([e,t])=>({name:e,type:t})))}(e);return 0===t.length?e:t.reduce(A,e)})),Q=K(y),ee=K((function(e,t){const n=function({col:e,dataType:t},n){if("highlightColor"===n)switch(t){case"table":return function(e){return({index:t,layer:n})=>y(n.props.data.frame[e][t])}(e);case"object":return function(e){return({object:t})=>y(t[e])}(e);case"geojson":return function(e){return({object:t})=>y(t.properties[e])}(e);default:throw TypeError(`${t} not supported`)}if(n.endsWith("Color"))switch(t){case"table":return function(e){return(t,{index:n,data:r,target:i})=>y(r.frame[e][n],i)}(e);case"object":return function(e){return(t,{target:n})=>y(t[e],n)}(e);case"geojson":return function(e){return(t,{target:n})=>y(t.properties[e],n)}(e);default:throw TypeError(`${t} not supported`)}switch(t){case"table":return function(e){return(t,{index:n,data:r})=>r.frame[e][n]}(e);case"object":return function(e){return t=>t[e]}(e);case"geojson":return function(e){return t=>t.properties[e]}(e);default:throw TypeError(`${t} not supported`)}}(e,t);return{...e,getData:n}})),te=K((function(e,t){"palette"in e&&(e.range=e.palette.map((e=>y(e))),e.unknown=y(e.unknown));const n=function(e){switch(e.scale){case"linear":return(0,m.Z)().domain(e.domain).range(e.range).unknown(e.unknown).clamp(!0);case"power":return(0,g.ZP)().exponent(e.exponent).domain(e.domain).range(e.range).unknown(e.unknown).clamp(!0);case"log":return(0,v.Z)().base(e.base).domain(e.domain).range(e.range).unknown(e.unknown).clamp(!0);case"symlog":return(0,b.Z)().domain(e.domain).range(e.range).unknown(e.unknown).clamp(!0);case"identity":return(0,j.Z)().unknown(e.unknown);case"threshold":case"quantile":return(0,w.Z)().domain(e.domain).range(e.range).unknown(e.unknown);case"category":return(0,x.Z)().domain(e.domain).range(e.range).unknown(e.unknown);case"quantize":return(0,L.Z)().domain(e.domain).range(e.range).unknown(e.unknown);default:throw TypeError(`scale ${e.scale} not supported`)}}(e),r="highlightColor"===t?function({col:e,dataType:t},n){switch(t){case"table":return function(e,t){return({index:n,layer:r})=>t(r.props.data.frame[e][n])}(e,n);case"object":return function(e,t){return({object:n})=>t(n[e])}(e,n);case"geojson":return function(e,t){return({object:n})=>t(n.properties[e])}(e,n);default:throw TypeError(`${t} not supported`)}}(e,n):function({col:e,dataType:t},n){switch(t){case"table":return function(e,t){return(n,{index:r,data:i})=>t(i.frame[e][r])}(e,n);case"object":return function(e,t){return n=>t(n[e])}(e,n);case"geojson":return function(e,t){return n=>t(n.properties[e])}(e,n);default:throw TypeError(`${t} not supported`)}}(e,n);return{...e,name:t,getData:r,scaleData:n}}));class ne{constructor({type:e,...t}){var n,r;const i=Object.entries(t),o=function(e){const t=e.filter(re).map((([e,t])=>[e,Q(t)])),n=e.find((([e])=>"colorRange"===e));n&&t.push([n[0],n[1].map((e=>Q(e)))]);return t}(i),s=function(e){return e.filter((([,e])=>k(e))).map((([e,t])=>[e,S(t)?te(t,e):ee(t,e)]))}(i);this.type=e;const a=Object.fromEntries([...i,...o,...s.map((([e,t])=>[e,t.getData])),...oe(i),["visible",null===(n=t.visible)||void 0===n||n],["updateTriggers",ie(s)],["parameters",(l=t.parameters,c=t.blendingMode,{...l,..._(c)})]]);var l,c;T(a.data)&&(a.data=X(a.data),a.extensions=[new z,...null!==(r=a.extensions)&&void 0!==r?r:[]]),"TileLayer"===e&&(a.renderSubLayers=e=>{const{bbox:{west:t,south:n,east:r,north:i},x:o,y:s,z:a}=e.tile;return new p.Z({...e,data:[{z:a,x:o,y:s}],image:e.data,bounds:[t,n,r,i]})}),this.props=a,this.scales=s.filter((([,e])=>S(e))).map((([,e])=>e)),"TextLayer"===e&&"fonts"in document&&document.fonts.load(`16px ${t.fontFamily}`)}static create(e){return new ne(e)}renderLayer(e){if("TripsLayer"===this.type&&void 0!==e){const t=this.props,{loopLength:n,animationSpeed:r}=t,i=n/r,o=e/1e3%i/i;t.currentTime=o*n}return new r[this.type]({...this.props})}renderLegend(){const e=this.scales.filter((e=>e.legend));return{id:this.props.id,name:this.props.name,scales:e}}renderSelector(){var e;return{id:this.props.id,groupName:this.props.groupName,name:this.props.name,visible:null===(e=this.props.visible)||void 0===e||e}}}function re([e,t]){return e.endsWith("Color")&&(Array.isArray(t)||"string"==typeof t)}function ie(e){const t=e=>{const{getData:t,scaleData:n,palette:r,...i}=e;return i},n=e.map((([e,n])=>[e,t(n)]));return Object.fromEntries(n)}function oe(e){return e.filter((([e])=>"getColorWeight"===e||"getElevationWeight"===e)).filter((([,e])=>null!==e&&"function"!=typeof e&&!k(e))).map((([e,t])=>[e,()=>t]))}n(6158),n(2687);var se=n(8202),ae=n(2802),le=n(17),ce=n(3295);const ue=".feature_id";function de(e,t=null){if(!e.picked)return null;null==t&&(t=function({object:e,layer:t}){return!T(t.props.data)||t instanceof ce.Z?function(e){return"Feature"===(null==e?void 0:e.type)&&"geometry"in e&&"type"in e.geometry}(e)?"geojson":"object":"table"}(e));const n=function(e){switch(e){case"table":return(e,{index:t,data:n})=>{const r=Object.keys(n.geometry),i={};for(const[e,o]of Object.entries(n.frame))r.includes(e)||(i[e]=o[t]);return i};case"object":return e=>({...e});case"geojson":return e=>({[ue]:null==e?void 0:e.id,...null==e?void 0:e.properties});default:throw TypeError(`${e} not supported`)}}(t),{object:r,index:i}=e;return n(r,{index:i,data:e.layer.props.data})}const pe="cyWLt4_G7nk5vT9hPr0o",he="Z9hHHet2RXmL0iMel3Zt",fe="jp658yEHLlesSRvwBwDl",ye="t9I8kJyjeEJEOArvMD7j",me="vovHpTur01BROrMLmEFz";function ge({info:e}){if(!e.picked||null==e.layer.props.tooltip)return null;const{x:t,y:n}=e,{name:r,tooltip:o}=e.layer.props,s=de(e,o.dataType);delete s[ue];const a=!0===o.cols?Object.keys(s):o.cols;return(0,i.jsxs)("div",{className:pe,style:{transform:`translate(${t}px, ${n}px)`},children:[(0,i.jsx)("div",{className:he,children:r}),(0,i.jsx)("table",{className:fe,children:(0,i.jsx)("tbody",{children:a.map((e=>{var t;return(0,i.jsxs)("tr",{children:[(0,i.jsx)("td",{className:ye,children:e}),(0,i.jsx)("td",{className:me,children:String(null!==(t=s[e])&&void 0!==t?t:null)})]},e)}))})})]})}function ve({props:e,layers:t}){const n=(0,s.useRef)(null),[r,o]=be(),{mapboxAccessToken:a,mapStyle:l,controller:c,parameters:u,blendingMode:d,...p}=e,h={...u,..._(d)},[f,y]=(0,s.useState)(0),m=t.some((e=>"TripsLayer"===e.type));je(m,(e=>y(e)));const g=t.map((e=>null!=e.type?e.renderLayer(f):null));return(0,i.jsxs)(s.Fragment,{children:[(0,i.jsx)(ae.Z,{ref:n,...p,parameters:h,layers:g,onHover:o,children:(0,i.jsx)(se.Z,{id:"map",controller:c,repeat:!0,children:l&&(0,i.jsx)(le.D5,{reuseMaps:!0,mapboxAccessToken:a,mapStyle:l})})}),r&&(0,i.jsx)(ge,{info:r})]})}const be=()=>{const[e,t]=(0,s.useState)(null);return[e,(0,s.useCallback)((e=>{if(!e.picked||!e.layer.props.tooltip||e.layer instanceof ce.Z)return t(null);t(e)}),[])]},je=(e,t)=>{const n=(0,s.useRef)(0),r=(0,s.useRef)(Date.now()),i=()=>{t(Date.now()-r.current),n.current=window.requestAnimationFrame(i)};(0,s.useEffect)((()=>{if(e)return n.current=window.requestAnimationFrame(i),()=>window.cancelAnimationFrame(n.current)}),[e])},we="dePkhbnJCOHYUAj_NSXj",xe="UswwkaMDoib4ytc60Zn9",Le="ci5EIFzH7r10AG6BsqiG",ke="tc2iXBk_fR6q5GWWpo9m",Se="RYWzL7KGDYHIY2NHbF5X",Ce="rn68pqskorQGGcY_sqUg",Ne="nYpzg_48IyHFet4DMSbT",_e="hrbqGf9YJYCqN3_tMI1L",Te="Nq2XC5CmWGG2PSgH92Tr",Ae="njcitPfCPlr7ohpeig92",Oe=16;function Ze({layers:e}){return 0===e.length?null:(0,i.jsx)("div",{className:we,children:e.map((e=>(0,i.jsx)(Ee,{...e},e.id)))})}function Ee({name:e,scales:t}){return 0===t.length?null:(0,i.jsxs)("div",{className:xe,children:[(0,i.jsx)("div",{className:Le,title:e,children:e}),t.map((e=>(0,i.jsx)(Me,{...e},e.name)))]})}function Me(e){var t;const n=e.name.replace(/^get/,"").replace(/([A-Z])/g," $1").toLowerCase();const r="palette"in e;const o=function(e){return"linear"===e.scale||"power"===e.scale||"log"===e.scale||"symlog"===e.scale}(e),s=function(e){return"threshold"===e.scale||"quantile"===e.scale||"quantize"===e.scale}(e);return(0,i.jsxs)("div",{className:ke,children:[(0,i.jsx)("div",{className:Se,children:n}),(0,i.jsx)("span",{className:Ce,children:"by "}),(0,i.jsx)("span",{className:Ne,title:e.col,children:null!==(t=e.scaleBy)&&void 0!==t?t:e.col}),r&&o&&(0,i.jsx)(Pe,{...e}),r&&s&&(0,i.jsx)(He,{...e}),r&&"category"===e.scale&&(0,i.jsx)(Ie,{...e})]})}const Pe=({ticks:e,scaleData:t})=>{const n=e.map(((e,t)=>t)).slice(1,-1),r=Oe*(e.length-1),o=r+11+1;return(0,i.jsxs)("svg",{className:_e,height:o,shapeRendering:"crispEdges",children:[(0,i.jsxs)("svg",{y:5,children:[(0,i.jsx)("image",{width:20,height:r,href:Re(t),preserveAspectRatio:"none"}),n.map((e=>(0,i.jsx)("line",{className:Ae,x2:20,y1:Oe*e,y2:Oe*e},e)))]}),(0,i.jsx)(De,{ticks:e,y:-2})]})},He=({ticks:e,range:t})=>{const n=t.map(f),r=Oe*(e.length-1)+11+1;return(0,i.jsxs)("svg",{className:_e,height:r,shapeRendering:"crispEdges",children:[(0,i.jsx)("svg",{y:5,children:n.map(((e,t)=>(0,i.jsx)("rect",{width:20,height:Oe,y:t*Oe,fill:e},t)))}),(0,i.jsx)(De,{ticks:e,y:-2})]})};function Ie({ticks:e,range:t,unknownTick:n,unknown:r}){const o=n?[...t,r]:t,s=n?[...e,n]:e,a=o.map(f),l=Oe*s.length;return(0,i.jsxs)("svg",{className:_e,height:l,children:[(0,i.jsx)("svg",{children:a.map(((e,t)=>(0,i.jsx)("rect",{width:20,height:14,y:1+t*Oe,fill:e},t)))}),(0,i.jsx)(De,{ticks:s})]})}function De({ticks:e,x:t=28,y:n=0}){return(0,i.jsx)("svg",{x:t,y:n,children:e.map(((e,t)=>(0,i.jsx)("text",{className:Te,y:Oe*t,dy:11,children:String(e)},t)))})}function Re(e,t=200){const n=e.range().length,r=[...Array(n).keys()].map((e=>e/(n-1))),i=e.copy().range(r).invert,o=document.createElement("canvas"),s=o.getContext("2d");o.width=1,o.height=t;for(let n=0;n<t;n++)s.fillStyle=f(e(i(n/t))),s.fillRect(0,n,1,1);return o.toDataURL()}const Ge="rdeck",Ue="S9CJIVXVAK0I3CutdI6g",ze="YdjmCX6zK6bSK2hf1f10",Fe="UVOq5gxQhkpq8sCqRgI2";var Ve=n(6082),We=n(912),qe=n(2372),Ye=n(8426);const Be="vuAOyD_5tWmY2RPHTuYY",$e="n6jppVxEBKOj1hSBYZ6_",Je="KQfHmYbZf5cmK9e6t3iK",Ke="LZXYw_iUEePVNUQgV40h",Xe="DbzmP4_hJ6wY628cSZhG",Qe="xKDjjRbJSZxg0xyD0nAI",et="vLGippSuMIytgXuofCKd",tt="fG18f7ZGepQ_2FcTrPlj",nt="mHkJXAoHRaJi5uTJ1HgN",rt="yEmldpPm5pY_q_QOaYBM",it="s4NzyM8HmUyOUjhwFGTG",ot=Date.now();function st({className:e,tooltip:t,onClick:n,children:r}){return(0,i.jsx)("button",{className:e,type:"button",onClick:n,title:t,children:r})}function at({layers:e,onVisibilityChange:t}){const n=Y(e,(e=>{var t;return null!==(t=e.groupName)&&void 0!==t?t:`${e.name}-${ot}`})),r=(n,r,i)=>{if(i){const i=!e.filter((e=>!n.includes(e))).some((e=>e.visible));return t(e.map((e=>({...e,visible:n.includes(e)?r:i}))))}t(n.map((e=>({...e,visible:r}))))},[o,a]=(0,s.useState)(!1),l=()=>a((e=>!e));return o?(0,i.jsxs)("div",{className:$e,children:[(0,i.jsx)("div",{className:Je,children:(0,i.jsxs)(st,{className:Ke,onClick:l,tooltip:"Close",children:[(0,i.jsx)(Ve.Z,{className:it,fontSize:"small"}),(0,i.jsx)("span",{className:Xe,children:"Layers"})]})}),(0,i.jsx)("div",{className:Qe,children:Array.from(n.entries(),(([e,t,[{groupName:n}]=t])=>(0,i.jsx)(lt,{group:n,layers:t,onChange:r},e)))})]}):(0,i.jsx)(st,{className:Be,tooltip:"Layer selector",onClick:l,children:(0,i.jsx)(Ve.Z,{className:it,fontSize:"small"})})}function lt({group:e,layers:t,onChange:n}){const r=Array.from(Y(t,(e=>e.name)),(([e,t])=>(0,i.jsx)(ct,{name:e,layers:t,onChange:n},e)));return e?(0,i.jsxs)(s.Fragment,{children:[(0,i.jsx)(ct,{name:e,layers:t,onChange:n}),(0,i.jsx)("div",{className:et,children:r})]}):(0,i.jsx)(s.Fragment,{children:r})}function ct({name:e,layers:t,onChange:n}){const r=function(e){let t=e[0].visible;for(const n of e)if(n.visible!==t)return null;return t}(t),o=null===r,a=(0,s.useRef)(null);(0,s.useEffect)((()=>{a.current&&(a.current.indeterminate=o)}),[o]);const l=(0,s.useRef)((()=>!1)),c=r?We.Z:o?qe.Z:Ye.Z,u=B(tt,r||o?nt:null);return(0,i.jsxs)("label",{className:u,children:[(0,i.jsx)("input",{ref:a,className:rt,type:"checkbox",onChange:()=>{l.current()?n(t,!0,!0):l.current=ut((()=>n(t,!r,!1)),200)},checked:null==r||r}),(0,i.jsx)(c,{fontSize:"small",className:it}),(0,i.jsx)("span",{className:Xe,children:e})]})}const ut=(e,t=200)=>{const n={current:0};let r=0;const i=o=>{if(r||(r=o),o-r>t)return n.current=0,void e();n.current=globalThis.requestAnimationFrame(i)};return n.current=globalThis.requestAnimationFrame(i),()=>0!==n.current&&(globalThis.cancelAnimationFrame(n.current),n.current=0,!0)};function dt({props:e,layers:t,theme:n,lazyLoad:r,layerSelector:o,onLayerVisibilityChange:l,width:c,height:u}){const{initialBounds:d,initialViewState:p,...h}=e,f=function(e,t,n,r){return(0,s.useMemo)((()=>{if(!Array.isArray(n))return r;const[i,o,s,l]=n,c=[[Math.max(-180,i),Math.max(o,-85.051129)],[Math.min(180,s),Math.min(l,85.051129)]],u=new a.Z({width:e,height:t}),{longitude:d,latitude:p,zoom:h}=u.fitBounds(c);return{...r,longitude:d,latitude:p,zoom:h}}),[n,r,e,t])}(c,u,d,p),y=t.map(ne.create),m=(0,s.useRef)(null),g=function(e,t){const[n,r]=(0,s.useState)(!1);return(0,s.useEffect)((()=>{if(t&&e.current){const t=new IntersectionObserver((e=>{r(e[0].isIntersecting)}),{threshold:0});return t.observe(e.current),()=>t.disconnect()}}),[t,e]),n}(m,r),v=!r||g;return(0,i.jsxs)("div",{ref:m,className:B(Ge,n),children:[(0,i.jsx)("div",{className:B(Ue,ze),children:o&&(0,i.jsx)(at,{layers:y.filter((e=>e.props.visibilityToggle)).map((e=>e.renderSelector())).reverse(),onVisibilityChange:l})}),v&&(0,i.jsx)(ve,{props:{...h,initialViewState:f},layers:y}),(0,i.jsx)("div",{className:B(Ue,Fe),children:(0,i.jsx)(Ze,{layers:y.filter((e=>e.props.visible)).map((e=>e.renderLegend())).reverse()})})]})}function pt(e){const t=e instanceof a.Z?e:new a.Z(e),n=V(t,"longitude","latitude","zoom","bearing","pitch","altitude");return{bounds:t.getBounds(),viewState:{...n,center:t.unprojectFlat(t.center)}}}var ht,ft,yt,mt=function(e,t,n,r,i){if("m"===r)throw new TypeError("Private method is not writable");if("a"===r&&!i)throw new TypeError("Private accessor was defined without a setter");if("function"==typeof t?e!==t||!i:!t.has(e))throw new TypeError("Cannot write private member to an object whose class did not declare it");return"a"===r?i.call(e,n):i?i.value=n:t.set(e,n),n},gt=function(e,t,n,r){if("a"===n&&!r)throw new TypeError("Private accessor was defined without a getter");if("function"==typeof t?e!==t||!r:!t.has(e))throw new TypeError("Cannot read private member from an object whose class did not declare it");return"m"===n?r:"a"===n?r.call(e):r?r.value:t.get(e)};const vt={name:"rdeck",type:"output",factory:(e,t,n)=>(0!==t&&0!==n||([t,n]=q(e)),new bt(e,t,n))};class bt{constructor(e,t,n){if(ht.set(this,void 0),ft.set(this,void 0),yt.set(this,void 0),this.props={blendingMode:"normal"},this.layers=[],this.theme="kepler",this.layerSelector=!0,this.lazyLoad=!1,mt(this,ht,e,"f"),mt(this,ft,t,"f"),mt(this,yt,n,"f"),this.onClick=this.onClick.bind(this),this.onViewStateChange=this.onViewStateChange.bind(this),HTMLWidgets.shinyMode){const t=$(((e={})=>this.renderValue(e)),50);Shiny.addCustomMessageHandler(`${e.id}:layer`,(e=>{var n,r,i;const o=this.layers.find((t=>t.id===e.id)),s={...o,...e,visible:null!==(n=e.visible)&&void 0!==n?n:null==o?void 0:o.visible,data:null!==(i=null!==(r=e.data)&&void 0!==r?r:null==o?void 0:o.data)&&void 0!==i?i:null};this.layers=null==o?[...this.layers,s]:this.layers.map((e=>e===o?s:e)),t({layers:this.layers})})),Shiny.addCustomMessageHandler(`${e.id}:deck`,(({props:e,theme:t,lazyLoad:n})=>{this.renderValue({props:{...this.props,...e},theme:t,lazyLoad:n})}))}this.setLayerVisibility=this.setLayerVisibility.bind(this)}renderValue({props:e,layers:t,theme:n,layerSelector:r,lazyLoad:s}={}){const a={props:{...this.props,...e,onClick:this.onClick,onViewStateChange:$(this.onViewStateChange,50)},layers:null!=t?t:this.layers,theme:null!=n?n:this.theme,layerSelector:null!=r?r:this.layerSelector,lazyLoad:null!=s?s:this.lazyLoad};Object.assign(this,a),o.render((0,i.jsx)(dt,{...a,onLayerVisibilityChange:this.setLayerVisibility,width:gt(this,ft,"f"),height:gt(this,yt,"f")}),gt(this,ht,"f"))}resize(e,t){}get id(){return gt(this,ht,"f").id}setLayerVisibility(e){if(0===e.length)return;const t=this.layers.map((t=>{const n=e.find((e=>((e,t)=>{const n=e.name===t.name,r=e.groupName===t.groupName;return n&&r||null==e.name&&null!=e.groupName&&r})(e,t)&&e.visible!==t.visible));return n?{...t,visible:n.visible}:t}));this.renderValue({layers:t})}onClick(e){var t;if(HTMLWidgets.shinyMode){const n={coordinate:e.coordinate,...pt(e.viewport),layer:V(null===(t=e.layer)||void 0===t?void 0:t.props,"id","name","groupName"),object:de(e)};Shiny.setInputValue(`${this.id}_click`,n,{priority:"event"})}}onViewStateChange({viewState:e}){if(HTMLWidgets.shinyMode){const t=pt(e);Shiny.setInputValue(`${this.id}_viewstate`,t,{priority:"event"})}}}function jt(e){var t;const n=document.getElementById(e);return null!==(t=null==n?void 0:n.htmlwidget_data_init_result)&&void 0!==t?t:null}function wt(){return[...document.querySelectorAll(".rdeck.html-widget")].map((e=>e.htmlwidget_data_init_result)).filter((e=>e instanceof bt))}ht=new WeakMap,ft=new WeakMap,yt=new WeakMap,HTMLWidgets.widget(vt);const xt="0.4.0"},9521:()=>{},9125:()=>{},9214:()=>{}},i={};function o(e){var t=i[e];if(void 0!==t)return t.exports;var n=i[e]={exports:{}};return r[e].call(n.exports,n,n.exports,o),n.exports}o.m=r,e=[],o.O=(t,n,r,i)=>{if(!n){var s=1/0;for(u=0;u<e.length;u++){for(var[n,r,i]=e[u],a=!0,l=0;l<n.length;l++)(!1&i||s>=i)&&Object.keys(o.O).every((e=>o.O[e](n[l])))?n.splice(l--,1):(a=!1,i<s&&(s=i));if(a){e.splice(u--,1);var c=r();void 0!==c&&(t=c)}}return t}i=i||0;for(var u=e.length;u>0&&e[u-1][2]>i;u--)e[u]=e[u-1];e[u]=[n,r,i]},o.n=e=>{var t=e&&e.__esModule?()=>e.default:()=>e;return o.d(t,{a:t}),t},n=Object.getPrototypeOf?e=>Object.getPrototypeOf(e):e=>e.__proto__,o.t=function(e,r){if(1&r&&(e=this(e)),8&r)return e;if("object"==typeof e&&e){if(4&r&&e.__esModule)return e;if(16&r&&"function"==typeof e.then)return e}var i=Object.create(null);o.r(i);var s={};t=t||[null,n({}),n([]),n(n)];for(var a=2&r&&e;"object"==typeof a&&!~t.indexOf(a);a=n(a))Object.getOwnPropertyNames(a).forEach((t=>s[t]=()=>e[t]));return s.default=()=>e,o.d(i,s),i},o.d=(e,t)=>{for(var n in t)o.o(t,n)&&!o.o(e,n)&&Object.defineProperty(e,n,{enumerable:!0,get:t[n]})},o.g=function(){if("object"==typeof globalThis)return globalThis;try{return this||new Function("return this")()}catch(e){if("object"==typeof window)return window}}(),o.o=(e,t)=>Object.prototype.hasOwnProperty.call(e,t),o.r=e=>{"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(e,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(e,"__esModule",{value:!0})},(()=>{var e={472:0};o.O.j=t=>0===e[t];var t=(t,n)=>{var r,i,[s,a,l]=n,c=0;if(s.some((t=>0!==e[t]))){for(r in a)o.o(a,r)&&(o.m[r]=a[r]);if(l)var u=l(o)}for(t&&t(n);c<s.length;c++)i=s[c],o.o(e,i)&&e[i]&&e[i][0](),e[i]=0;return o.O(u)},n=self.webpackChunkrdeck=self.webpackChunkrdeck||[];n.forEach(t.bind(null,0)),n.push=t.bind(null,n.push.bind(n))})();var s=o.O(void 0,[486,474,619,568,175,627,811,42,899,667,324,134,133,468,745,535,528,784,378,645,394,816,485,650,869,67,14,806,282,953,538,49,639,825,596],(()=>o(8981)));return s=o.O(s)})()));
//# sourceMappingURL=data:application/json;charset=utf-8;base64,