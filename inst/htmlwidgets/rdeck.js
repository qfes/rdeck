!function(e,t){"object"==typeof exports&&"object"==typeof module?module.exports=t():"function"==typeof define&&define.amd?define([],t):"object"==typeof exports?exports.rdeck=t():e.rdeck=t()}(self,(()=>(()=>{var e,t,n,r={1087:(e,t,n)=>{"use strict";n.r(t),n.d(t,{VERSION:()=>rr,Widget:()=>Qn,binding:()=>Yn,getWidgetById:()=>er,getWidgets:()=>tr});var r={};n.r(r),n.d(r,{AGGREGATION_OPERATION:()=>Se.KM,ArcLayer:()=>Le.ArcLayer,BitmapLayer:()=>Le.BitmapLayer,CPUGridLayer:()=>Se.ab,ColumnLayer:()=>Le.ColumnLayer,ContourLayer:()=>Se.YY,GPUGridLayer:()=>Se.ML,GeoJsonLayer:()=>Le.GeoJsonLayer,GreatCircleLayer:()=>Oe.GreatCircleLayer,GridCellLayer:()=>Le.GridCellLayer,GridLayer:()=>Se.mU,H3ClusterLayer:()=>Oe.H3ClusterLayer,H3HexagonLayer:()=>Oe.H3HexagonLayer,HeatmapLayer:()=>Se.zP,HexagonLayer:()=>Se.dX,IconLayer:()=>Le.IconLayer,LineLayer:()=>Le.LineLayer,MVTLayer:()=>Oe.MVTLayer,PathLayer:()=>Le.PathLayer,PointCloudLayer:()=>Le.PointCloudLayer,PolygonLayer:()=>Le.PolygonLayer,QuadkeyLayer:()=>Oe.QuadkeyLayer,S2Layer:()=>Oe.S2Layer,ScatterplotLayer:()=>Le.ScatterplotLayer,ScenegraphLayer:()=>Pe.ScenegraphLayer,ScreenGridLayer:()=>Se.p3,SimpleMeshLayer:()=>Pe.SimpleMeshLayer,SolidPolygonLayer:()=>Le.SolidPolygonLayer,TerrainLayer:()=>Oe.TerrainLayer,TextLayer:()=>Le.TextLayer,Tile3DLayer:()=>Oe.Tile3DLayer,TileLayer:()=>Oe.TileLayer,TripsLayer:()=>Oe.TripsLayer,_AggregationLayer:()=>Se.Di,_BinSorter:()=>Se.l0,_CPUAggregator:()=>Se.oA,_GPUGridAggregator:()=>Se.Wc,_MultiIconLayer:()=>Le._MultiIconLayer,_TextBackgroundLayer:()=>Le._TextBackgroundLayer,_getURLFromTemplate:()=>Oe._getURLFromTemplate});n(1940),n(9709);var i,a,o=n(4246),s=n(7634),l=n(7378),c=(n(8539),n(8586),n(2157)),u=n(6082),d=n(5425),h=n(9404),f=n(7284),g=n(8100);function p(e,...t){if(null==e)return null;const n=t.map((t=>[t,e[t]]));return Object.fromEntries(n)}function m(e){return e.clientHeight>0&&e.clientHeight>0?e:e.parentElement?m(e.parentElement):null}function y(e){const t=m(e);if(e===t||null==t)return{width:e.clientWidth,height:e.clientHeight};const{width:n,height:r}=getComputedStyle(e),i=document.createElement("div");Object.assign(i.style,{width:n,height:r,display:"hidden"}),t.appendChild(i);const a={width:i.clientWidth,height:i.clientHeight};return t.removeChild(i),a}function v(e,t){const n=new Map;for(const r of e){const e=t(r);n.has(e)?n.get(e).push(r):n.set(e,[r])}return n}function b(...e){return e.filter((e=>null!=e)).join(" ")}class w{constructor(){Object.defineProperty(this,"_val",{enumerable:!0,configurable:!0,writable:!0,value:new Map}),Object.defineProperty(this,"_ref",{enumerable:!0,configurable:!0,writable:!0,value:new WeakMap})}getStore(e){return"object"==typeof(t=e)&&null!==t||"function"==typeof t?this._ref:this._val;var t}has(e){return this.getStore(e).has(e)}get(e){return this.getStore(e).get(e)}set(e,t){return this.getStore(e).set(e,t),this}}class j extends f.Z{setProps(e){const t=e.initialBounds;if(null!=t&&(n=t,r=this.props.initialBounds,!(n===r||null==n&&null==r||null!=n&&null!=r&&(null==n?void 0:n.every(((e,t)=>e===(null==r?void 0:r[t]))))))){const[n,r,i,a]=t,o=[[Math.max(n,-180),Math.max(r,-85.051129)],[Math.min(i,180),Math.min(a,85.051129)]];this._setCanvasSize(e);const{width:s,height:l}=this._getMapSize();e={...e,initialViewState:{...(0,g.Xg)({height:l,width:s,bounds:o}),bearing:0,pitch:0}}}var n,r;super.setProps(e)}_getMapSize(){const e=this.canvas;if(null==e)return{width:this.width,height:this.height};if(0===e.clientWidth&&0===e.clientHeight){const t=e.closest(".rdeck.html-widget");if(null!=t)return y(t)}return{width:e.clientWidth,height:e.clientHeight}}}Object.defineProperty(j,"defaultProps",{enumerable:!0,configurable:!0,writable:!0,value:{...f.Z.defaultProps,initialBounds:null}});class x extends Error{constructor(e){super(e),this.name=this.constructor.name}}function k(e,t="Assertion failed"){if(!e)throw new x(t)}function L(e){return e.reduce(((e,t)=>e+t),0)}function S(e,t){const n=new Array(L(t));for(let r=0,i=0;r<t.length;i+=t[r],++r)n.fill(e(r),i,i+t[r]);return n}function O(e,t){return k(e.length===t.length),S((t=>e[t]),t)}function P(e,t){const n=document.createElement("a"),r=URL.createObjectURL(e);n.href=r,n.download=t,n.click(),URL.revokeObjectURL(r)}function C(e){switch(e.type){case"Point":return 1;case"MultiPoint":case"LineString":return e.coordinates.length;case"MultiLineString":case"Polygon":return M(e.coordinates);case"MultiPolygon":return e.coordinates.reduce(((e,t)=>e+M(t)),0);case"GeometryCollection":return e.geometries.reduce(((e,t)=>e+C(t)),0);default:throw new TypeError(`Geomtry type ${e.type} not supported.`)}}function M(e){return e.reduce(((e,t)=>e+t.length),0)}function N(e,t){const n=_(e);for(const[r,i]of n)i.configurable&&(i.writable?E(e,r,i,t):"function"==typeof i.set&&T(e,r,i,t));if(Object.getPrototypeOf({})===Object.getPrototypeOf(e))return e;const r=_(Object.getPrototypeOf(e));for(const[n,i]of r)i.configurable&&"function"==typeof i.set&&T(e,n,i,t);return e}function _(e){return Object.entries(Object.getOwnPropertyDescriptors(e))}function E(e,t,{value:n},r){return Reflect.defineProperty(e,t,{get:()=>n,set(e){Object.is(e,n)||(n=e,null==r||r({[t]:e}))}})}function T(e,t,n,r){return Reflect.defineProperty(e,t,{...n,set(i){var a,o;const s=null===(a=n.get)||void 0===a?void 0:a.call(e);Object.is(i,s)||(null===(o=n.set)||void 0===o||o.call(e,i),null==r||r({[t]:i}))}})}const A=/(mac ?os)|(macintosh)/i.test(null!==(a=null===(i=navigator.userAgentData)||void 0===i?void 0:i.platform)&&void 0!==a?a:navigator.userAgent);function R(e){const t=e.cloneNode(!0);F(e,t);const{width:n,height:r}=t.style;return Object.assign(t.style,{position:"relative",inset:"0",minWidth:n,minHeight:r}),t}function F(e,t){const n=globalThis.getComputedStyle(e);for(const e of n)t.style.setProperty(e,n.getPropertyValue(e),n.getPropertyPriority(e));const r=[...e.children],i=[...t.children];return r.forEach(((e,t)=>F(r[t],i[t]))),t}async function Z(e,t){const n=document.createElement("canvas"),r=n.getContext("2d");return n.width=e.width,n.height=e.height,null!=t&&await async function(e,t){return new Promise(((n,r)=>{t.once("render",(({target:t})=>{const r=t.getCanvas();n(e.drawImage(r,0,0))})),t.triggerRepaint()}))}(r,t),await async function(e,t){return new Promise(((n,r)=>{const{onAfterRender:i}=t.props;t.setProps({onAfterRender:({gl:r})=>{t.setProps({onAfterRender:i}),n(e.drawImage(r.canvas,0,0))}}),t.redraw(!0)}))}(r,e),n}async function D(e){const t=R(e),{clientWidth:n,clientHeight:r}=e,i=function({width:e,height:t},...n){const r="http://www.w3.org/2000/svg",i=document.createElementNS(r,"svg");i.setAttribute("width",`${e}`),i.setAttribute("height",`${t}`),i.setAttribute("viewBox",`0 0 ${e} ${t}`);const a=document.createElementNS(r,"foreignObject");return a.setAttribute("width","100%"),a.setAttribute("height","100%"),i.appendChild(a),n.forEach((e=>a.appendChild(e))),i}({width:n,height:r},t),a=(new XMLSerializer).serializeToString(i);return function(e){return new Promise(((t,n)=>{const r=document.createElement("img");r.addEventListener("load",(()=>t(r)),{once:!0}),r.crossOrigin="anonymous",r.src=e}))}("data:image/svg+xml;charset=utf-8,"+encodeURIComponent(a))}class I{constructor({columns:e,length:t,lengths:n}){if(Object.defineProperty(this,"columns",{enumerable:!0,configurable:!0,writable:!0,value:void 0}),Object.defineProperty(this,"length",{enumerable:!0,configurable:!0,writable:!0,value:void 0}),Object.defineProperty(this,"featureIds",{enumerable:!0,configurable:!0,writable:!0,value:void 0}),this.columns={...e},this.length=t,Array.isArray(n)){k(t===L(n)),this.featureIds=S((e=>e),n);for(const[e,r]of Object.entries(this.columns))r.length!==t&&(this.columns[e]=O(r,n))}}at(e,t){var n;return null===(n=this.columns[t])||void 0===n?void 0:n.at(e)}}function H(e){return null!=e&&"object"==typeof e&&"columns"in e}const W=".feature_id";function U(e){if(!e.picked)return null;const{object:t,index:n}=e;return function(e,{data:t,index:n}){if(H(t)){const e={};for(const r in t.columns)e[r]=t.at(n,r);return e}return function(e){return"Feature"===(null==e?void 0:e.type)&&"geometry"in e&&"type"in e.geometry}(e)?{[W]:e.id,...e.properties}:{...e}}(t,{index:n,data:e.layer.props.data})}const z="cyWLt4_G7nk5vT9hPr0o",G="Z9hHHet2RXmL0iMel3Zt",V="jp658yEHLlesSRvwBwDl",B="t9I8kJyjeEJEOArvMD7j",J="vovHpTur01BROrMLmEFz";function $({info:e}){if(!e.picked||null==e.layer.props.tooltip)return null;const{x:t,y:n}=e,{name:r,tooltip:i}=e.layer.props,a=U(e);delete a[W];const s=!0===i.cols?Object.keys(a):i.cols;return(0,o.jsxs)("div",{className:z,style:{transform:`translate(${t}px, ${n}px)`},children:[(0,o.jsx)("div",{className:G,children:r}),(0,o.jsx)("table",{className:V,children:(0,o.jsx)("tbody",{children:s.map((e=>{var t;return(0,o.jsxs)("tr",{children:[(0,o.jsx)("td",{className:B,children:e}),(0,o.jsx)("td",{className:J,children:String(null!==(t=a[e])&&void 0!==t?t:null)})]},e)}))})})]})}var q=n(9992);const K=Object.freeze({additive:{[q.default.BLEND]:!0,blendFunc:[q.default.SRC_ALPHA,q.default.DST_ALPHA],blendEquation:q.default.FUNC_ADD},subtractive:{[q.default.BLEND]:!0,blendFunc:[q.default.ONE,q.default.ONE_MINUS_DST_COLOR,q.default.SRC_ALPHA,q.default.DST_ALPHA],blendEquation:[q.default.FUNC_SUBTRACT,q.default.FUNC_ADD]},normal:{[q.default.BLEND]:!0,blendFunc:[q.default.SRC_ALPHA,q.default.ONE_MINUS_SRC_ALPHA,q.default.ONE,q.default.ONE_MINUS_SRC_ALPHA],blendEquation:[q.default.FUNC_ADD,q.default.FUNC_ADD]}});function X(e="normal"){var t;return null!==(t=K[e])&&void 0!==t?t:K.normal}var Q=n(4630),Y=n(997),ee=n(8291);const te=[3,169,244],ne=[116,117,129],re=[...te,216.75],ie=[...ne,216.75],ae=[...te,38.25],oe=[...ne,38.25],se=[0,0,0,0];function le(e){if(null==e)return null;const{geojson:t,selectedFeatureIndices:n,onSetGeoJson:r,onSelectFeatures:i}=e,a=function(e){var t;return null!==(t=be[null!=e?e:"view"])&&void 0!==t?t:be.view}(e.mode),o=!we.includes(a);const s=new ye({data:t,selectedFeatureIndexes:n,mode:a,modeConfig:{screenSpace:!0,viewport:{}},onEdit:function({updatedData:e,editType:t,editContext:a}){var o,l;if(pe.includes(t))return;if("selectFeature"===t)return void(null==i||i(null!==(o=a.selectedIndices)&&void 0!==o?o:[]));const c=!!me.includes(t)||(null===(l=null==a?void 0:a.selectedIndices)||void 0===l?void 0:l.map(he));s.props.data={...e,__diff:c},s.setChangeFlags({dataChanged:c}),s.setNeedsUpdate(),ge.has(t)&&(null==r||r(e),"addFeature"===t&&(null==i||i([...n,...a.featureIndexes])))},pickable:a!==be.view,pickingLineWidthExtraPixels:5,pickingDepth:0,getRadius:6,getLineWidth:1.5,getTentativeLineWidth:1.5,lineWidthScale:1,getFillColor:a===be.view?se:ce,getLineColor:ue,getTentativeLineColor:re,getEditHandlePointOutlineColor:re,getTentativeFillColor:ae,getEditHandlePointColor:se,getDashArray:o?[4,2]:[0,0],extensions:[new Q.Z({dash:!0})],_subLayerProps:{geojson:{dataComparator:de},guides:{dataComparator:de,_dataDiff:fe}}});return s}function ce(e,t,n){return t?ae:oe}function ue(e,t,n){return t?re:ie}function de(e,t){return Object.is(e.features,t.features)}function he(e){return{startRow:e,endRow:e+1}}function fe(e,t){if(e.__diff)return e.__diff;const n=e.features,r=t.features;if(n.length!==r.length)return"A new data container was supplied";const i=[],a=n.length;for(let e=0;e<a;++e){const t=n[e],o=r[e];if(t!==o){if(C(t.geometry)!==C(o.geometry)){i.push({startRow:e,endRow:a});break}i.push({startRow:e,endRow:e+1})}}return i}const ge=Object.freeze(new Set(["addPosition","removePosition","addFeature","finishMovePosition","scaled","rotated","translated","extruded","split"])),pe=Object.freeze(["updateTentativeFeature","addTentativePosition"]),me=Object.freeze(["addPosition","removePosition","addFeature"]);class ye extends ee.nk{onPointerMove(e){this.state.lastPointerMoveEvent=e;this.getActiveMode().handlePointerMove(e,this.getModeProps(this.props))}updateState(e){e.changeFlags.propsOrDataChanged&&super.updateState(e)}setState(e){if(this.props.mode===be.modify)return super.setState(e);for(const t in e)if("cursor"!==t||e.cursor!==this.state.cursor)return super.setState(e)}}class ve extends Y.ViewMode{handlePointerMove(e,t){var n;const r=0!==(null===(n=null==e?void 0:e.picks)||void 0===n?void 0:n.length);t.onUpdateCursor(r?"pointer":null)}handleClick(e,t){var n;if(!(0!==(null==e?void 0:e.picks.length)))return;const r=new Set(t.selectedIndexes),i=new Set(e.picks.map((e=>e.index))),a=function(e,t){for(const n of t)if(!e.has(n))return!1;return!0}(r,i)?function(...e){const t=new Set(e[0]);for(const n of e.slice(1))for(const e of n)t.delete(e);return t}(r,i):function(...e){return new Set(e.flatMap((e=>[...e])))}(r,i);null===(n=t.onEdit)||void 0===n||n.call(t,{updatedData:t.data,editType:"selectFeature",editContext:{selectedIndices:[...a]}})}}Y.utils.getEditHandlesForGeometry=function(e){const t=new w;return(...n)=>{const r=n[0],i=n.slice(0,-1).reduceRight(((e,t)=>{if(e.has(t))return e.get(t);const n=new w;return e.set(t,n),n}),t);if(i.has(r))return i.get(r);const a=e(...n);return i.set(r,a),a}}(Y.utils.getEditHandlesForGeometry);const be=Object.seal({view:Y.ViewMode,select:ve,modify:Y.ModifyMode,transform:Y.TransformMode,linestring:Y.DrawLineStringMode,point:Y.DrawPointMode,polygon:Y.DrawPolygonMode,lasso:Y.DrawPolygonByDraggingMode}),we=[be.view,be.select];const je=(0,l.forwardRef)((({deckgl:e,mapgl:t,layers:n,editor:r},i)=>{const a=(0,l.useRef)(null),s=(0,l.useRef)(null);(0,l.useImperativeHandle)(i,(()=>({async getImage(){var e,t;const n=null===(e=a.current)||void 0===e?void 0:e.deck;if(null==n)return null;const r=null===(t=s.current)||void 0===t?void 0:t.getMap();return Z(n,null!=r?r:null)}})),[]);const[d,f]=xe();let{blendingMode:g,controller:p,onClick:m,...y}=e;const v={...e.parameters,...g&&X(g)},[b,w]=(0,l.useState)(0),x=n.some((e=>"TripsLayer"===e.type));ke(x,(e=>w(e)));const k=n.map((e=>null!=e.type?e.renderLayer(b):null)),L=le(r),S=null!=r&&!["view","select"].includes(r.mode);return S&&p&&(p={...p,doubleClickZoom:!1}),(0,o.jsxs)(l.Fragment,{children:[(0,o.jsx)(u.Z,{Deck:j,ref:a,...{...y,parameters:v},layers:[...k,L],onHover:S?void 0:f,onClick:S?void 0:m,getCursor:null==L?void 0:L.getCursor.bind(L),children:(0,o.jsx)(c.Z,{id:"map",controller:p,repeat:!0,children:t.mapStyle&&(0,o.jsx)(h.D5,{ref:s,...t})})}),d&&(0,o.jsx)($,{info:d})]})}));je.displayName="Map";const xe=()=>{const[e,t]=(0,l.useState)(null);return[e,(0,l.useCallback)((e=>{if(!e.picked||!e.layer.props.tooltip||e.layer instanceof d.Z)return t(null);t(e)}),[])]},ke=(e,t)=>{const n=(0,l.useRef)(0),r=(0,l.useRef)(Date.now()),i=()=>{t(Date.now()-r.current),n.current=window.requestAnimationFrame(i)};(0,l.useEffect)((()=>{if(e)return n.current=window.requestAnimationFrame(i),()=>window.cancelAnimationFrame(n.current)}),[e])};var Le=n(1059),Se=n(9742),Oe=n(4453),Pe=n(3515),Ce=n(5252),Me=n(6165),Ne=n(6666),_e=n(2537),Ee=n(5178),Te=n(9844),Ae=n(5841),Re=n(6890),Fe=n(8854);const Ze=[0,0,0,255];function De([e,t,n,r=255]){return`rgba(${e}, ${t}, ${n}, ${r/255})`}function Ie(e,t){return Array.isArray(e)?t||4!==e.length?((t=null!=t?t:[])[0]=e[0],t[1]=e[1],t[2]=e[2],t[3]=3===e.length?e[3]:255,t):e:"string"==typeof e?(function(e,t){if(7===e.length){const n=parseInt(e.substring(1),16);t[0]=Math.floor(n/65536),t[1]=Math.floor(n/256%256),t[2]=n%256,t[3]=255}else if(9===e.length){const n=parseInt(e.substring(1),16);t[0]=Math.floor(n/16777216),t[1]=Math.floor(n/65536%256),t[2]=Math.floor(n/256%256),t[3]=n%256}}(e,t=null!=t?t:[]),t):Ze}function He(e){return null!==e&&"object"==typeof e&&"accessor"===e.type}function We(e,t){return{...e,getData:Ue(e,t)}}function Ue({col:e},t){return t.endsWith("Color")?"highlightColor"!==t?function(e){const t=ze(e);return(e,{data:n,index:r,target:i})=>Ie(t(e,{data:n,index:r,target:i}),i)}(e):function(e){const t=Ge(e);return e=>Ie(t(e))}(e):ze(e)}function ze(e){return(t,{data:n,index:r})=>{var i,a;return null==t?n.at(r,e):null!==(a=null===(i=t.properties)||void 0===i?void 0:i[e])&&void 0!==a?a:t[e]}}function Ge(e){return({object:t,index:n,layer:r})=>{var i,a,o;return null==t?null===(i=r.props.data)||void 0===i?void 0:i.at(n,e):null!==(o=null===(a=t.properties)||void 0===a?void 0:a[e])&&void 0!==o?o:t[e]}}function Ve(e){return He(e)&&"scale"in e}function Be(e,t){"palette"in e&&(e.range=e.palette.map((e=>Ie(e))),e.unknown=Ie(e.unknown));const n=function(e){switch(e.scale){case"linear":return(0,Me.Z)().domain(e.domain).range(e.range).unknown(e.unknown).clamp(!0);case"power":return(0,Ne.ZP)().exponent(e.exponent).domain(e.domain).range(e.range).unknown(e.unknown).clamp(!0);case"log":return(0,_e.Z)().base(e.base).domain(e.domain).range(e.range).unknown(e.unknown).clamp(!0);case"symlog":return(0,Ee.Z)().domain(e.domain).range(e.range).unknown(e.unknown).clamp(!0);case"identity":return(0,Te.Z)().unknown(e.unknown);case"threshold":case"quantile":return(0,Ae.Z)().domain(e.domain).range(e.range).unknown(e.unknown);case"category":return(0,Re.Z)().domain(e.domain).range(e.range).unknown(e.unknown);case"quantize":return(0,Fe.Z)().domain(e.domain).range(e.range).unknown(e.unknown);default:throw TypeError(`scale ${e.scale} not supported`)}}(e),r="highlightColor"===t?function({col:e},t){const n=Ge(e);return e=>t(n(e))}(e,n):function({col:e},t){const n=ze(e);return(e,{data:r,index:i,target:a})=>t(n(e,{data:r,index:i,target:a}))}(e,n);return{...e,name:t,getData:r,scaleData:n}}var Je=n(8035),$e=n(9405),qe=n(8220),Ke=n(714),Xe=n(4881),Qe=n(2377),Ye=n(6912),et=n(7181);class tt extends Je.Z{initializeState(){if(!function(e){return nt.some((t=>e instanceof t))}(this))return;const e=this,t=e.getAttributeManager();t&&t.addInstanced({pickingColors:{type:q.default.UNSIGNED_BYTE,size:3,accessor:(t,{index:n,data:r,target:i})=>{var a,o,s;if(H(r)&&Array.isArray(r.featureIds))return e.encodePickingColor(r.featureIds[n],i);const l=null===(o=null===(a=null==t?void 0:t.__source)||void 0===a?void 0:a.parent)||void 0===o?void 0:o.props.data;return H(l)&&Array.isArray(l.featureIds)?e.encodePickingColor(l.featureIds[t.__source.index],i):e.encodePickingColor(null!==(s=null==t?void 0:t.__source.index)&&void 0!==s?s:n,i)},shaderAttributes:{pickingColors:{divisor:0},instancePickingColors:{divisor:1}}}})}}const nt=[$e.Z,qe.Z,Ke.Z,Xe.Z,Qe.Z,Ye.Z,et.Z];class rt{constructor({type:e,...t}){var n;Object.defineProperty(this,"type",{enumerable:!0,configurable:!0,writable:!0,value:void 0}),Object.defineProperty(this,"props",{enumerable:!0,configurable:!0,writable:!0,value:void 0}),Object.defineProperty(this,"scales",{enumerable:!0,configurable:!0,writable:!0,value:void 0});const r=Object.entries(t),i=function(e){const t=e.filter(it).map((([e,t])=>[e,Ie(t)])),n=e.find((([e])=>"colorRange"===e));n&&t.push([n[0],n[1].map((e=>Ie(e)))]);return t}(r),a=function(e){return e.filter((([,e])=>He(e))).map((([e,t])=>[e,Ve(t)?Be(t,e):We(t,e)]))}(r);this.type=e;const o=Object.fromEntries([...r,...i,...a.map((([e,t])=>[e,t.getData])),...at(r)]);var s,l;o.dataTransform=e=>H(e)?new I(e):e,o.updateTriggers=function(e){const t=e=>{const{getData:t,scaleData:n,palette:r,...i}=e;return i},n=e.map((([e,n])=>[e,t(n)]));return Object.fromEntries(n)}(a),o.parameters=(s=t.parameters,l=t.blendingMode,{...s,...X(l)}),o.extensions=[new tt,...null!==(n=o.extensions)&&void 0!==n?n:[]],"TileLayer"===e&&(o.renderSubLayers=e=>{const{bbox:{west:t,south:n,east:r,north:i},x:a,y:o,z:s}=e.tile;return new Ce.Z({...e,data:[{z:s,x:a,y:o}],image:e.data,bounds:[t,n,r,i]})}),this.props=o,this.scales=a.filter((([,e])=>Ve(e))).map((([,e])=>e)),"TextLayer"===e&&"fonts"in document&&document.fonts.load(`16px ${t.fontFamily}`)}get isVisible(){var e;return null!==(e=this.props.visible)&&void 0!==e&&e||!("visible"in this.props)}static create(e){return new rt(e)}renderLayer(e){if("TripsLayer"===this.type&&void 0!==e){const t=this.props,{loopLength:n,animationSpeed:r}=t,i=n/r,a=e/1e3%i/i;t.currentTime=a*n}return new r[this.type]({...this.props})}renderLegend(){const e=this.scales.filter((e=>e.legend));return{id:this.props.id,name:this.props.name,scales:e}}renderSelector(){return{id:this.props.id,groupName:this.props.groupName,name:this.props.name,visible:this.isVisible}}}function it([e,t]){return e.endsWith("Color")&&(Array.isArray(t)||"string"==typeof t)}function at(e){return e.filter((([e])=>"getColorWeight"===e||"getElevationWeight"===e)).filter((([,e])=>null!==e&&"function"!=typeof e&&!He(e))).map((([e,t])=>[e,()=>t]))}var ot=n(6509),st=n(4083),lt=n(5092),ct=n(1081);const ut="U44LhpKlV8r1Vu1ZoZA3",dt="XF770nELUcE_0zxo_aOg",ht="HYRhC2aw1PSMYGCz2bDb",ft="YNou4FYlc3N3GhFp2BkO",gt="f44NGqZZGn4de9S3oTHN",pt="xqKP289MUJ06Hgb3CjoW",mt="XctZC_fZAMvRMiHPlt9G",yt="ly9kEH8MpXynhBX6Fhcj",vt="iM2OiMQz6z_NtAQZZyPS",bt="_8r8348KPS_nzNLR_CV_",wt="tzkFrkEU5cB_jY6zcuua",jt=Date.now();function xt({className:e,tooltip:t,onClick:n,children:r}){return(0,o.jsx)("button",{className:e,type:"button",onClick:n,title:t,children:r})}function kt({layers:e,onVisibilityChange:t}){const n=v(e,(e=>{var t;return null!==(t=e.groupName)&&void 0!==t?t:`${e.name}-${jt}`})),r=(n,r,i)=>{if(i){const i=!e.filter((e=>!n.includes(e))).some((e=>e.visible));return t(e.map((e=>({...e,visible:n.includes(e)?r:i}))))}t(n.map((e=>({...e,visible:r}))))},[i,a]=(0,l.useState)(!1),s=()=>a((e=>!e));return i?(0,o.jsxs)("div",{className:dt,children:[(0,o.jsx)("div",{className:ht,children:(0,o.jsxs)(xt,{className:ft,onClick:s,tooltip:"Close",children:[(0,o.jsx)(ot.Z,{className:wt,fontSize:"small"}),(0,o.jsx)("span",{className:gt,children:"Layers"})]})}),(0,o.jsx)("div",{className:pt,children:Array.from(n.entries(),(([e,t,[{groupName:n}]=t])=>(0,o.jsx)(Lt,{group:n,layers:t,onChange:r},e)))})]}):(0,o.jsx)(xt,{className:ut,tooltip:"Layer selector",onClick:s,children:(0,o.jsx)(ot.Z,{className:wt,fontSize:"small"})})}function Lt({group:e,layers:t,onChange:n}){const r=Array.from(v(t,(e=>e.name)),(([e,t])=>(0,o.jsx)(St,{name:e,layers:t,onChange:n},e)));return e?(0,o.jsxs)(l.Fragment,{children:[(0,o.jsx)(St,{name:e,layers:t,onChange:n}),(0,o.jsx)("div",{className:mt,children:r})]}):(0,o.jsx)(l.Fragment,{children:r})}function St({name:e,layers:t,onChange:n}){const r=function(e){let t=e[0].visible;for(const n of e)if(n.visible!==t)return null;return t}(t),i=null===r,a=(0,l.useRef)(null);(0,l.useEffect)((()=>{a.current&&(a.current.indeterminate=i)}),[i]);const s=(0,l.useRef)((()=>!1)),c=r?st.Z:i?lt.Z:ct.Z,u=b(yt,r||i?vt:null);return(0,o.jsxs)("label",{className:u,children:[(0,o.jsx)("input",{ref:a,className:bt,type:"checkbox",onChange:()=>{s.current()?n(t,!0,!0):s.current=Ot((()=>n(t,!r,!1)),200)},checked:null==r||r}),(0,o.jsx)(c,{fontSize:"small",className:wt}),(0,o.jsx)("span",{className:gt,children:e})]})}const Ot=(e,t=200)=>{const n={current:0};let r=0;const i=a=>{if(r||(r=a),a-r>t)return n.current=0,void e();n.current=globalThis.requestAnimationFrame(i)};return n.current=globalThis.requestAnimationFrame(i),()=>0!==n.current&&(globalThis.cancelAnimationFrame(n.current),n.current=0,!0)},Pt="lWOwchFb6W2NpcWR4ZQS",Ct="mIJjIoOSsjLZMp591rN0",Mt="OULly07OGkLPRiEDgp00",Nt="oxctK5Tcknb3syUfT7xg",_t="KEbGPBIjLXnjAiUTu8eP",Et="MBBFrOSR5F_grZcyOCp0",Tt="l_4PaMO7BWOn4DcLN5Oh",At="aWzYqDozdq6Vl4QuIJ1y",Rt="xaprV4ANDgRiE5ai1hUl",Ft="f6SnauerJY75ZqNAuK56",Zt=16,Dt=(0,l.forwardRef)((({layers:e},t)=>{const n=(0,l.useRef)(null);return(0,l.useImperativeHandle)(t,(()=>({getImage:async()=>null==n.current?null:D(n.current)})),[]),0===e.length?null:(0,o.jsx)("div",{ref:n,className:Pt,children:e.map((e=>(0,o.jsx)(It,{...e},e.id)))})}));function It({name:e,scales:t}){return 0===t.length?null:(0,o.jsxs)("div",{className:Ct,children:[(0,o.jsx)("div",{className:Mt,title:e,children:e}),t.map((e=>(0,o.jsx)(Ht,{...e},e.name)))]})}function Ht(e){var t;const n=e.name.replace(/^get/,"").replace(/([A-Z])/g," $1").toLowerCase();const r="palette"in e;const i=function(e){return"linear"===e.scale||"power"===e.scale||"log"===e.scale||"symlog"===e.scale}(e),a=function(e){return"threshold"===e.scale||"quantile"===e.scale||"quantize"===e.scale}(e);return(0,o.jsxs)("div",{className:Nt,children:[(0,o.jsx)("div",{className:_t,children:n}),(0,o.jsx)("span",{className:Et,children:"by "}),(0,o.jsx)("span",{className:Tt,title:e.col,children:null!==(t=e.scaleBy)&&void 0!==t?t:e.col}),r&&i&&(0,o.jsx)(Wt,{...e}),r&&a&&(0,o.jsx)(Ut,{...e}),r&&"category"===e.scale&&(0,o.jsx)(zt,{...e})]})}Dt.displayName="Legend";const Wt=({ticks:e,scaleData:t})=>{const n=e.map(((e,t)=>t)).slice(1,-1),r=Zt*(e.length-1),i=r+11+1;return(0,o.jsxs)("svg",{className:At,height:i,shapeRendering:"crispEdges",children:[(0,o.jsxs)("svg",{y:5,children:[(0,o.jsx)("image",{width:20,height:r,href:Vt(t),preserveAspectRatio:"none"}),n.map((e=>(0,o.jsx)("line",{className:Ft,x2:20,y1:Zt*e,y2:Zt*e},e)))]}),(0,o.jsx)(Gt,{ticks:e,y:-2})]})},Ut=({ticks:e,range:t})=>{const n=t.map(De),r=Zt*(e.length-1)+11+1;return(0,o.jsxs)("svg",{className:At,height:r,shapeRendering:"crispEdges",children:[(0,o.jsx)("svg",{y:5,children:n.map(((e,t)=>(0,o.jsx)("rect",{width:20,height:Zt,y:t*Zt,fill:e},t)))}),(0,o.jsx)(Gt,{ticks:e,y:-2})]})};function zt({ticks:e,range:t,unknownTick:n,unknown:r}){const i=n?[...t,r]:t,a=n?[...e,n]:e,s=i.map(De),l=Zt*a.length;return(0,o.jsxs)("svg",{className:At,height:l,children:[(0,o.jsx)("svg",{children:s.map(((e,t)=>(0,o.jsx)("rect",{width:20,height:14,y:1+t*Zt,fill:e},t)))}),(0,o.jsx)(Gt,{ticks:a})]})}function Gt({ticks:e,x:t=28,y:n=0}){return(0,o.jsx)("svg",{x:t,y:n,children:e.map(((e,t)=>(0,o.jsx)("text",{className:Rt,y:Zt*t,dy:11,children:String(e)},t)))})}function Vt(e,t=200){const n=e.range().length,r=[...Array(n).keys()].map((e=>e/(n-1))),i=e.copy().range(r).invert,a=document.createElement("canvas"),o=a.getContext("2d");a.width=1,a.height=t;for(let n=0;n<t;n++)o.fillStyle=De(e(i(n/t))),o.fillRect(0,n,1,1);return a.toDataURL()}var Bt=n(5413),Jt=n(9693),$t=n(9036),qt=n(9949),Kt=n(6052),Xt=n(9892),Qt=n(3388),Yt=n(7582),en=n(9979),tn=n(4794),nn=n(8340),rn=n(7075),an=n(1422),on=n(7909);const sn="S_Jw5xlS4ysjLfEnG1_V",ln="ulA2RQmkQhSnak9JlXnZ",cn="aIE33mXFqOBosVEFBrb8",un="llmi5hyDHtcHqa2r__su",dn="ilhkc5o5ZlSd4IaGytLF",hn=()=>{};function fn({mode:e,geojson:t,selectedFeatureIndices:n,onSetMode:r=hn,onDownload:i=hn,onUpload:a=hn,onDeleteSelected:s=hn,canUndo:l,canRedo:c,onUndo:u=hn,onRedo:d=hn}){const h=(null==n?void 0:n.length)>0,f=(null==t?void 0:t.features.length)>0;return(0,o.jsxs)("div",{className:sn,children:[(0,o.jsxs)("div",{className:ln,children:[(0,o.jsx)(gn,{name:"View",icon:Yt.Z,iconStyle:{transform:"scale(0.9)"},active:"view"===e,onClick:()=>r("view")}),(0,o.jsx)(gn,{name:"Select",icon:en.Z,active:"select"===e,disabled:!f,onClick:()=>r("select")})]}),(0,o.jsxs)("div",{className:ln,children:[(0,o.jsx)(gn,{name:"Modify",icon:$t.Z,active:"modify"===e,disabled:!h,onClick:()=>r("modify")}),(0,o.jsx)(gn,{name:"Transform",icon:tn.Z,active:"transform"===e,disabled:!h,onClick:()=>r("transform")}),(0,o.jsx)(gn,{name:"Point",icon:nn.Z,active:"point"===e,onClick:()=>r("point")}),(0,o.jsx)(gn,{name:"LineString",icon:qt.Z,active:"linestring"===e,onClick:()=>r("linestring")}),(0,o.jsx)(gn,{name:"Polygon",icon:Jt.Z,active:"polygon"===e,onClick:()=>r("polygon")}),(0,o.jsx)(gn,{name:"Lasso",icon:Bt.Z,active:"lasso"===e,onClick:()=>r("lasso")})]}),(0,o.jsxs)("div",{className:ln,children:[(0,o.jsx)(gn,{name:"Download",icon:rn.Z,disabled:!f,onClick:()=>i(t)}),(0,o.jsx)(gn,{name:"Upload",icon:an.Z,disabled:!f,onClick:()=>a(t)})]}),(0,o.jsxs)("div",{className:ln,children:[(0,o.jsx)(gn,{name:"Undo",icon:Kt.Z,disabled:!l,onClick:u}),(0,o.jsx)(gn,{name:"Redo",icon:Xt.Z,disabled:!c,onClick:d})]}),(0,o.jsx)("div",{className:ln,children:(0,o.jsx)(gn,{name:"Delete",icon:on.Z,disabled:!h,onClick:()=>s(n)})})]})}function gn({name:e,onClick:t=hn,disabled:n=!1,active:r=!1,icon:i,iconStyle:a}){const s=b(cn,r?un:null);return(0,o.jsx)("button",{className:s,onClick:t,title:e,disabled:n,children:i&&(0,o.jsx)(Qt.Z,{component:i,className:dn,fontSize:"small",style:a})})}const pn="rdeck",mn="XTuYKSlBcC933W4sKWtC",yn="kQnelQ4hkAJEJHLO0NJI",vn="hQbOOdEZw0LO0llGKVqS",bn="cSol54mlVTgAnRzj_GUM",wn=(0,l.forwardRef)((({theme:e,deckgl:t,mapgl:n,layers:r,layerSelector:i=!1,onLayerVisibilityChange:a,editor:s},c)=>{var u;const d=(0,l.useRef)(null),h=(0,l.useRef)(null);(0,l.useImperativeHandle)(c,(()=>({async getSnapshot({legend:e=!0,size:t}){const n=d.current,r=h.current,i=await(null==n?void 0:n.getImage());if(null==i)return null;const a=e?await(null==r?void 0:r.getImage()):null;return async function(e,t,n){const r=document.createElement("canvas"),i=r.getContext("2d"),[a,o]=null!=n?n:[e.width,e.height];if(Object.assign(r,{width:a,height:o}),a>e.width||o>e.height)throw new RangeError("Snapshot size must be <= map size");const s=(e.width-r.width)/2,l=(e.height-r.height)/2;return null==i||i.drawImage(e,s,l,e.width,e.height,0,0,e.width,e.height),null!=t&&(null==i||i.drawImage(t,r.width-t.width-10,10)),new Promise(((e,t)=>{r.toBlob((t=>e(t)))}))}(i,null!=a?a:null,t)}})),[]);const f=null!==(u=null==r?void 0:r.map(rt.create))&&void 0!==u?u:[];return(0,o.jsxs)("div",{className:b(pn,e),children:[(0,o.jsx)("div",{className:b(mn,yn),children:i&&(0,o.jsx)(kt,{layers:f.filter((e=>e.props.visibilityToggle)).map((e=>e.renderSelector())).reverse(),onVisibilityChange:a})}),(0,o.jsx)("div",{className:b(mn,vn),children:(0,o.jsx)(Dt,{ref:h,layers:f.filter((e=>e.isVisible)).map((e=>e.renderLegend())).reverse()})}),(0,o.jsx)("div",{className:b(mn,bn),children:s&&(0,o.jsx)(fn,{...s})}),(0,o.jsx)(je,{ref:d,deckgl:t,mapgl:n,layers:f,editor:s})]})}));wn.displayName="RDeck";var jn=n(641);function xn(e){const t=e instanceof jn.Z?e:new jn.Z(e),n=p(t,"longitude","latitude","zoom","bearing","pitch","altitude");return{bounds:t.getBounds(),viewState:{...n,center:t.unprojectFlat(t.center)}}}const kn={longitude:0,latitude:0,zoom:0,pitch:0,bearing:0};class Ln{constructor(e){Object.defineProperty(this,"useDevicePixels",{enumerable:!0,configurable:!0,writable:!0,value:void 0}),Object.defineProperty(this,"pickingRadius",{enumerable:!0,configurable:!0,writable:!0,value:void 0}),Object.defineProperty(this,"blendingMode",{enumerable:!0,configurable:!0,writable:!0,value:void 0}),Object.defineProperty(this,"effects",{enumerable:!0,configurable:!0,writable:!0,value:void 0}),Object.defineProperty(this,"controller",{enumerable:!0,configurable:!0,writable:!0,value:void 0}),Object.defineProperty(this,"initialViewState",{enumerable:!0,configurable:!0,writable:!0,value:kn}),Object.defineProperty(this,"initialBounds",{enumerable:!0,configurable:!0,writable:!0,value:void 0}),Object.defineProperty(this,"onViewStateChange",{enumerable:!0,configurable:!0,writable:!0,value:void 0}),Object.defineProperty(this,"onClick",{enumerable:!0,configurable:!0,writable:!0,value:void 0}),Object.assign(this,e)}}var Sn,On,Pn,Cn,Mn,Nn=function(e,t,n,r){if("a"===n&&!r)throw new TypeError("Private accessor was defined without a getter");if("function"==typeof t?e!==t||!r:!t.has(e))throw new TypeError("Cannot read private member from an object whose class did not declare it");return"m"===n?r:"a"===n?r.call(e):r?r.value:t.get(e)},_n=function(e,t,n,r,i){if("m"===r)throw new TypeError("Private method is not writable");if("a"===r&&!i)throw new TypeError("Private accessor was defined without a setter");if("function"==typeof t?e!==t||!i:!t.has(e))throw new TypeError("Cannot write private member to an object whose class did not declare it");return"a"===r?i.call(e,n):i?i.value=n:t.set(e,n),n};const En=Object.freeze({type:"FeatureCollection",features:[]});class Tn extends class{constructor(e){Object.defineProperty(this,"mode",{enumerable:!0,configurable:!0,writable:!0,value:"view"}),Object.defineProperty(this,"geojson",{enumerable:!0,configurable:!0,writable:!0,value:En}),Object.defineProperty(this,"selectedFeatureIndices",{enumerable:!0,configurable:!0,writable:!0,value:[]}),Object.defineProperty(this,"onSetMode",{enumerable:!0,configurable:!0,writable:!0,value:e=>this.setMode(e)}),Object.defineProperty(this,"onSelectFeatures",{enumerable:!0,configurable:!0,writable:!0,value:e=>this.selectFeatures(e)}),Object.defineProperty(this,"onSetGeoJson",{enumerable:!0,configurable:!0,writable:!0,value:e=>this.setGeoJson(e)}),Object.defineProperty(this,"onDeleteSelected",{enumerable:!0,configurable:!0,writable:!0,value:e=>this.deleteSelected(e)}),Object.defineProperty(this,"onUpload",{enumerable:!0,configurable:!0,writable:!0,value:e=>{}}),Object.defineProperty(this,"onDownload",{enumerable:!0,configurable:!0,writable:!0,value:e=>this.download(e)}),Object.defineProperty(this,"upload",{enumerable:!0,configurable:!0,writable:!0,value:void 0}),Object.assign(this,e)}setState(e={}){Object.assign(this,e)}setMode(e){var t,n;switch(e){case"modify":this.mode=(null===(t=this.selectedFeatureIndices)||void 0===t?void 0:t.length)?"modify":"view";break;case"select":this.mode=(null===(n=this.geojson)||void 0===n?void 0:n.features.length)?"select":"view";break;default:this.mode=e}}selectFeatures(e){this.selectedFeatureIndices=e}setGeoJson(e){this.geojson=e}deleteSelected(e){const t=this.geojson.features.filter(((t,n)=>!e.includes(n)));Object.assign(this,{mode:["modify","transform"].includes(this.mode)?"view":this.mode,selectedFeatureIndices:[],geojson:{...this.geojson,features:t}})}download(e){P(new Blob([JSON.stringify(e)],{type:"application/geo+json"}),"rdeck.geojson"),this.setMode("view")}}{constructor(e){super(e),Sn.add(this),On.set(this,-1),Pn.set(this,[]),Object.defineProperty(this,"onUndo",{enumerable:!0,configurable:!0,writable:!0,value:()=>this.undo()}),Object.defineProperty(this,"onRedo",{enumerable:!0,configurable:!0,writable:!0,value:()=>this.redo()}),Nn(this,Sn,"m",Cn).call(this)}get canUndo(){return Nn(this,On,"f")>0}get canRedo(){return Nn(this,On,"f")<Nn(this,Pn,"f").length-1}undo(){this.canUndo&&(_n(this,On,Nn(this,On,"f")-1,"f"),Object.assign(this,Nn(this,Pn,"f")[Nn(this,On,"f")]))}redo(){this.canRedo&&(_n(this,On,Nn(this,On,"f")+1,"f"),Object.assign(this,Nn(this,Pn,"f")[Nn(this,On,"f")]))}setState(e){super.setState(e),Nn(this,Sn,"m",Mn).call(this)}setMode(e){super.setMode(e),Nn(this,Sn,"m",Mn).call(this)}selectFeatures(e){super.selectFeatures(e),Nn(this,Sn,"m",Mn).call(this)}setGeoJson(e){super.setGeoJson(e),Nn(this,Sn,"m",Cn).call(this)}deleteSelected(e){super.deleteSelected(e),Nn(this,Sn,"m",Cn).call(this)}}function An({mode:e,geojson:t,selectedFeatureIndices:n}){return{mode:e,geojson:t,selectedFeatureIndices:n}}On=new WeakMap,Pn=new WeakMap,Sn=new WeakSet,Cn=function(e=this){const t=An(e);(function(e,t){if(Object.is(e,t))return!0;if(null==e||null==t)return!1;const n=Object.keys(e);if(n.length!==Object.keys(t).length)return!1;for(const r of n)if(!Object.is(e[r],t[r])||t.hasOwnProperty(r))return!1;return!0})(t,Nn(this,Pn,"f")[Nn(this,On,"f")])||(Nn(this,Pn,"f").length=Nn(this,On,"f")+1,_n(this,On,Nn(this,Pn,"f").push(t)-1,"f"))},Mn=function(e=this){Nn(this,Pn,"f")[Nn(this,On,"f")]=An(e)};class Rn{constructor(e){Object.defineProperty(this,"mapboxAccessToken",{enumerable:!0,configurable:!0,writable:!0,value:void 0}),Object.defineProperty(this,"mapStyle",{enumerable:!0,configurable:!0,writable:!0,value:void 0}),Object.defineProperty(this,"reuseMaps",{enumerable:!0,configurable:!0,writable:!0,value:!0}),Object.assign(this,e)}}var Fn,Zn,Dn,In,Hn=function(e,t,n,r){if("a"===n&&!r)throw new TypeError("Private accessor was defined without a getter");if("function"==typeof t?e!==t||!r:!t.has(e))throw new TypeError("Cannot read private member from an object whose class did not declare it");return"m"===n?r:"a"===n?r.call(e):r?r.value:t.get(e)},Wn=function(e,t,n,r,i){if("m"===r)throw new TypeError("Private method is not writable");if("a"===r&&!i)throw new TypeError("Private accessor was defined without a setter");if("function"==typeof t?e!==t||!i:!t.has(e))throw new TypeError("Cannot write private member to an object whose class did not declare it");return"a"===r?i.call(e,n):i?i.value=n:t.set(e,n),n};class Un{constructor(e={},t){Object.defineProperty(this,"theme",{enumerable:!0,configurable:!0,writable:!0,value:"kepler"}),Fn.set(this,new Ln),Zn.set(this,new Rn),Object.defineProperty(this,"layers",{enumerable:!0,configurable:!0,writable:!0,value:[]}),Object.defineProperty(this,"layerSelector",{enumerable:!0,configurable:!0,writable:!0,value:!0}),Dn.set(this,null),Object.defineProperty(this,"onChange",{enumerable:!0,configurable:!0,writable:!0,value:void 0}),In.set(this,(()=>{var e;return null===(e=this.onChange)||void 0===e?void 0:e.call(this)})),this.setState(e),Reflect.defineProperty(this,"onChange",{configurable:!1,enumerable:!1,value:t,writable:!0}),this.setLayerVisibility=this.setLayerVisibility.bind(this),N(this,Hn(this,In,"f"))}get deckgl(){return Hn(this,Fn,"f")}set deckgl(e){Wn(this,Fn,N(new Ln(e),Hn(this,In,"f")),"f")}get mapgl(){return Hn(this,Zn,"f")}set mapgl(e){Wn(this,Zn,N(new Rn(e),Hn(this,In,"f")),"f")}get editor(){return Hn(this,Dn,"f")}set editor(e){null==e?Wn(this,Dn,null,"f"):null==Hn(this,Dn,"f")?Wn(this,Dn,N(new Tn(e),Hn(this,In,"f")),"f"):Hn(this,Dn,"f").setState(e)}setState({deckgl:e,mapgl:t,editor:n,...r}={}){Object.assign(this,{...r,deckgl:{...this.deckgl,...e},mapgl:{...this.mapgl,...t}}),void 0!==n&&(this.editor=null!=n?{...this.editor,...n}:null)}upsertLayer(e){var t,n;const r=this.layers.find((t=>t.id===e.id));if(null==r)return void(this.layers=[...this.layers,e]);const i={...r,...e,data:null!==(n=null!==(t=e.data)&&void 0!==t?t:null==r?void 0:r.data)&&void 0!==n?n:null};this.layers=this.layers.map((e=>e===r?i:e))}setLayerVisibility(e){if(0===e.length)return;this.layers=this.layers.map((t=>{const n=e.find((e=>((e,t)=>{const n=e.name===t.name,r=e.groupName===t.groupName;return n&&r||null==e.name&&null!=e.groupName&&r})(e,t)&&e.visible!==t.visible));return n?{...t,visible:n.visible}:t}))}}Fn=new WeakMap,Zn=new WeakMap,Dn=new WeakMap,In=new WeakMap;var zn,Gn,Vn,Bn,Jn,$n,qn,Kn=function(e,t,n,r,i){if("m"===r)throw new TypeError("Private method is not writable");if("a"===r&&!i)throw new TypeError("Private accessor was defined without a setter");if("function"==typeof t?e!==t||!i:!t.has(e))throw new TypeError("Cannot write private member to an object whose class did not declare it");return"a"===r?i.call(e,n):i?i.value=n:t.set(e,n),n},Xn=function(e,t,n,r){if("a"===n&&!r)throw new TypeError("Private accessor was defined without a getter");if("function"==typeof t?e!==t||!r:!t.has(e))throw new TypeError("Cannot read private member from an object whose class did not declare it");return"m"===n?r:"a"===n?r.call(e):r?r.value:t.get(e)};class Qn{constructor(e,t){zn.set(this,void 0),Gn.set(this,void 0),Vn.set(this,(0,l.createRef)()),Bn.set(this,void 0),Jn.set(this,((e,t)=>{var n,r,i;if(null===(r=(n=Xn(this,Bn,"f").deckgl).onClick)||void 0===r||r.call(n,e,t),HTMLWidgets.shinyMode){const t={coordinate:e.coordinate,...xn(e.viewport),layer:p(null===(i=e.layer)||void 0===i?void 0:i.props,"id","name","groupName"),object:U(e)};Shiny.setInputValue(`${this.element.id}_click`,t,{priority:"event"})}})),$n.set(this,(e=>{var t,n;if(null===(n=(t=Xn(this,Bn,"f").deckgl).onViewStateChange)||void 0===n||n.call(t,e),HTMLWidgets.shinyMode){const t=xn(e.viewState);Shiny.setInputValue(`${this.element.id}_viewstate`,t,{priority:"event"})}})),qn.set(this,(e=>{HTMLWidgets.shinyMode&&Shiny.setInputValue(`${this.element.id}_editorupload`,{geojson:JSON.stringify(e)})})),Kn(this,Gn,e,"f"),Kn(this,zn,(0,s.s)(e),"f"),Kn(this,Bn,new Un(t,(()=>this.render())),"f"),e.addEventListener("keydown",(e=>{(A?e.metaKey:e.ctrlKey)&&"KeyS"===e.code&&(e.preventDefault(),this.snapshot())})),HTMLWidgets.shinyMode&&(Shiny.addCustomMessageHandler(`${e.id}:layer`,(e=>{this.state.upsertLayer(e)})),Shiny.addCustomMessageHandler(`${e.id}:deck`,(e=>{this.state.setState(e)})))}get element(){return Xn(this,Gn,"f")}get state(){return Xn(this,Bn,"f")}render(){let{deckgl:e,mapgl:t,editor:n,...r}=Xn(this,Bn,"f");e={...e,onClick:Xn(this,Jn,"f"),onViewStateChange:Xn(this,$n,"f")};let i=null;null!=n&&(i={...n,canUndo:n.canUndo,canRedo:n.canRedo,onUpload:e=>{Xn(this,qn,"f").call(this,e),n.setMode("view")}}),null!=e.initialBounds&&delete e.initialViewState,Xn(this,zn,"f").render((0,o.jsx)(l.StrictMode,{children:(0,o.jsx)(wn,{ref:Xn(this,Vn,"f"),...{...r,deckgl:e,mapgl:t,editor:i,onLayerVisibilityChange:this.state.setLayerVisibility}})}))}setLayerVisibility(e){return Xn(this,Bn,"f").setLayerVisibility(e)}async snapshot({filename:e="rdeck.png",legend:t=!0,size:n}={}){const r=Xn(this,Vn,"f").current,i=await(null==r?void 0:r.getSnapshot({legend:t,size:n}));return null!=i&&null!=e&&P(i,e),null!=i?i:null}}zn=new WeakMap,Gn=new WeakMap,Vn=new WeakMap,Bn=new WeakMap,Jn=new WeakMap,$n=new WeakMap,qn=new WeakMap;const Yn={name:"rdeck",type:"output",factory(e,t,n){let r=null;return{get instance(){return r},renderValue(t){r=new Qn(e,t),r.render()},resize(){}}}};function er(e){const t=document.getElementById(e);return t&&nr(t)}function tr(){return[...document.querySelectorAll(".rdeck.html-widget")].map((e=>nr(e))).filter((e=>e instanceof Qn))}function nr(e){var t;return null===(t=null==e?void 0:e.htmlwidget_data_init_result)||void 0===t?void 0:t.instance}HTMLWidgets.widget(Yn);const rr="0.4.0"},6070:()=>{},2672:()=>{},2210:()=>{}},i={};function a(e){var t=i[e];if(void 0!==t)return t.exports;var n=i[e]={exports:{}};return r[e].call(n.exports,n,n.exports,a),n.exports}a.m=r,e=[],a.O=(t,n,r,i)=>{if(!n){var o=1/0;for(u=0;u<e.length;u++){for(var[n,r,i]=e[u],s=!0,l=0;l<n.length;l++)(!1&i||o>=i)&&Object.keys(a.O).every((e=>a.O[e](n[l])))?n.splice(l--,1):(s=!1,i<o&&(o=i));if(s){e.splice(u--,1);var c=r();void 0!==c&&(t=c)}}return t}i=i||0;for(var u=e.length;u>0&&e[u-1][2]>i;u--)e[u]=e[u-1];e[u]=[n,r,i]},a.n=e=>{var t=e&&e.__esModule?()=>e.default:()=>e;return a.d(t,{a:t}),t},n=Object.getPrototypeOf?e=>Object.getPrototypeOf(e):e=>e.__proto__,a.t=function(e,r){if(1&r&&(e=this(e)),8&r)return e;if("object"==typeof e&&e){if(4&r&&e.__esModule)return e;if(16&r&&"function"==typeof e.then)return e}var i=Object.create(null);a.r(i);var o={};t=t||[null,n({}),n([]),n(n)];for(var s=2&r&&e;"object"==typeof s&&!~t.indexOf(s);s=n(s))Object.getOwnPropertyNames(s).forEach((t=>o[t]=()=>e[t]));return o.default=()=>e,a.d(i,o),i},a.d=(e,t)=>{for(var n in t)a.o(t,n)&&!a.o(e,n)&&Object.defineProperty(e,n,{enumerable:!0,get:t[n]})},a.g=function(){if("object"==typeof globalThis)return globalThis;try{return this||new Function("return this")()}catch(e){if("object"==typeof window)return window}}(),a.o=(e,t)=>Object.prototype.hasOwnProperty.call(e,t),a.r=e=>{"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(e,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(e,"__esModule",{value:!0})},(()=>{var e={472:0};a.O.j=t=>0===e[t];var t=(t,n)=>{var r,i,[o,s,l]=n,c=0;if(o.some((t=>0!==e[t]))){for(r in s)a.o(s,r)&&(a.m[r]=s[r]);if(l)var u=l(a)}for(t&&t(n);c<o.length;c++)i=o[c],a.o(e,i)&&e[i]&&e[i][0](),e[i]=0;return a.O(u)},n=self.webpackChunkrdeck=self.webpackChunkrdeck||[];n.forEach(t.bind(null,0)),n.push=t.bind(null,n.push.bind(n))})();var o=a.O(void 0,[486,474,619,315,568,175,977,627,811,42,899,667,324,134,133,468,535,745,783,528,784,485,378,645,394,816,650,869,706,836,458,769,67,806,551,282,953,538,49,844,639,825,596],(()=>a(1087)));return o=a.O(o)})()));
//# sourceMappingURL=data:application/json;charset=utf-8;base64,