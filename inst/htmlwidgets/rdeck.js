!function(e,t){"object"==typeof exports&&"object"==typeof module?module.exports=t():"function"==typeof define&&define.amd?define([],t):"object"==typeof exports?exports.rdeck=t():e.rdeck=t()}(self,(()=>(()=>{var e,t,n,r={6911:(e,t,n)=>{"use strict";n.r(t),n.d(t,{VERSION:()=>kt,Widget:()=>wt,binding:()=>jt,getWidgetById:()=>xt,getWidgets:()=>Lt});var r={};n.r(r),n.d(r,{AGGREGATION_OPERATION:()=>l.KM,ArcLayer:()=>o.zv,BitmapLayer:()=>o.hz,CPUGridLayer:()=>l.ab,ColumnLayer:()=>o.eJ,ContourLayer:()=>l.YY,GPUGridLayer:()=>l.ML,GeoJsonLayer:()=>o.UW,GreatCircleLayer:()=>c.GJ,GridCellLayer:()=>o.cJ,GridLayer:()=>l.mU,H3ClusterLayer:()=>c.cH,H3HexagonLayer:()=>c.bW,HeatmapLayer:()=>l.zP,HexagonLayer:()=>l.dX,IconLayer:()=>o.eE,LineLayer:()=>o.Ie,MVTLayer:()=>c.i3,PathLayer:()=>o.nr,PointCloudLayer:()=>o.U5,PolygonLayer:()=>o.dW,QuadkeyLayer:()=>c._k,S2Layer:()=>c.jJ,ScatterplotLayer:()=>o.pU,ScenegraphLayer:()=>u.S,ScreenGridLayer:()=>l.p3,SimpleMeshLayer:()=>u.L,SolidPolygonLayer:()=>o.PJ,TerrainLayer:()=>c.tr,TextLayer:()=>o.AB,Tile3DLayer:()=>c.cY,TileLayer:()=>c.Im,TripsLayer:()=>c.Fw,_AggregationLayer:()=>l.Di,_BinSorter:()=>l.l0,_CPUAggregator:()=>l.oA,_GPUGridAggregator:()=>l.Wc,_MultiIconLayer:()=>o.vb,_TextBackgroundLayer:()=>o._k,_getURLFromTemplate:()=>c.po});n(8559);var i=n(5893),a=n(745),s=n(7294),o=n(7786),l=n(9080),c=n(803),u=n(1956),d=n(5395);const h=[0,0,0,255];function p([e,t,n,r=255]){return`rgba(${e}, ${t}, ${n}, ${r/255})`}function f(e,t){return Array.isArray(e)?t||4!==e.length?((t=null!=t?t:[])[0]=e[0],t[1]=e[1],t[2]=e[2],t[3]=3===e.length?e[3]:255,t):e:"string"==typeof e?(function(e,t){if(7===e.length){const n=parseInt(e.substring(1),16);t[0]=Math.floor(n/65536),t[1]=Math.floor(n/256%256),t[2]=n%256,t[3]=255}else if(9===e.length){const n=parseInt(e.substring(1),16);t[0]=Math.floor(n/16777216),t[1]=Math.floor(n/65536%256),t[2]=Math.floor(n/256%256),t[3]=n%256}}(e,t=null!=t?t:[]),t):h}var y=n(4634),g=n(4177),m=n(458),v=n(5801),b=n(3613),j=n(602),w=n(8973),x=n(2625);function L(e){return null!==e&&"object"==typeof e&&"accessor"===e.type}function k(e){return L(e)&&"scale"in e}var S=n(9757);const N=Object.freeze({additive:{[S.Z.BLEND]:!0,blendFunc:[S.Z.SRC_ALPHA,S.Z.DST_ALPHA],blendEquation:S.Z.FUNC_ADD},subtractive:{[S.Z.BLEND]:!0,blendFunc:[S.Z.ONE,S.Z.ONE_MINUS_DST_COLOR,S.Z.SRC_ALPHA,S.Z.DST_ALPHA],blendEquation:[S.Z.FUNC_SUBTRACT,S.Z.FUNC_ADD]},normal:{[S.Z.BLEND]:!0,blendFunc:[S.Z.SRC_ALPHA,S.Z.ONE_MINUS_SRC_ALPHA,S.Z.ONE,S.Z.ONE_MINUS_SRC_ALPHA],blendEquation:[S.Z.FUNC_ADD,S.Z.FUNC_ADD]}});function C(e="normal"){var t;return null!==(t=N[e])&&void 0!==t?t:N.normal}function _(e){return null!==e&&"object"==typeof e&&"frame"in e}function O(e,{name:t,type:n}){var r,i,a,s;const o=e.frame,l=Object.fromEntries(Object.entries(o).map((([e])=>[e,[]]))),c=Object.keys(e.frame).filter((e=>e!==t)),u=o[t],d=function(e){switch(e){case"MULTIPOINT":return T;case"MULTILINESTRING":return A;case"MULTIPOLYGON":return Z;default:throw TypeError(`${e} not supported`)}}(n),h=e=>{for(const t of c)l[t].push(o[t][e])},p=[];for(let n=0;n<e.length;n++){const o=u[n];if(d(o)){l[t].push(...o);for(let t=0;t<o.length;t++)h(n),p.push(null!==(i=null===(r=e.indices)||void 0===r?void 0:r[n])&&void 0!==i?i:n)}else l[t].push(o),h(n),p.push(null!==(s=null===(a=e.indices)||void 0===a?void 0:a[n])&&void 0!==s?s:n)}return{length:l[t].length,geometry:{...e.geometry,[t]:n.replace("MULTI","")},indices:p,frame:l}}function T(e){return Array.isArray(null==e?void 0:e[0])}function A(e){var t;return Array.isArray(null===(t=null==e?void 0:e[0])||void 0===t?void 0:t[0])}function Z(e){var t,n;return Array.isArray(null===(n=null===(t=null==e?void 0:e[0])||void 0===t?void 0:t[0])||void 0===n?void 0:n[0])}var E=n(3693),M=n(4717),P=n(6867),D=n(3326),H=n(2112),R=n(7693),z=n(8569),I=n(1435);class U extends E.Z{initializeState(){if(!function(e){return F.some((t=>e instanceof t))}(this))return;const e=this,t=e.getAttributeManager();t&&t.addInstanced({pickingColors:{type:S.Z.UNSIGNED_BYTE,size:3,accessor:(t,{index:n,data:r,target:i})=>{var a,s,o;if(_(r)&&Array.isArray(r.indices))return e.encodePickingColor(r.indices.indexOf(r.indices[n]),i);const l=null===(s=null===(a=null==t?void 0:t.__source)||void 0===a?void 0:a.parent)||void 0===s?void 0:s.props.data;return _(l)&&Array.isArray(l.indices)?e.encodePickingColor(l.indices.indexOf(l.indices[t.__source.index]),i):e.encodePickingColor(null!==(o=null==t?void 0:t.__source.index)&&void 0!==o?o:n,i)},shaderAttributes:{pickingColors:{divisor:0},instancePickingColors:{divisor:1}}}})}}const F=[M.Z,P.Z,D.Z,H.Z,R.Z,z.Z,I.Z];function W(e,...t){if(null==e)return null;const n=t.map((t=>[t,e[t]]));return Object.fromEntries(n)}function V(e){return e.clientHeight>0&&e.clientHeight>0?e:e.parentElement?V(e.parentElement):null}function B(e){const t=V(e);if(e===t||null==t)return{width:e.clientWidth,height:e.clientHeight};const{width:n,height:r}=getComputedStyle(e),i=document.createElement("div");Object.assign(i.style,{width:n,height:r,display:"hidden"}),t.appendChild(i);const a={width:i.clientWidth,height:i.clientHeight};return t.removeChild(i),a}function G(e,t){const n=new Map;for(const r of e){const e=t(r);n.has(e)?n.get(e).push(r):n.set(e,[r])}return n}function $(...e){return e.filter((e=>null!=e)).join(" ")}function q(e,t=0){let n;return(...r)=>{window.clearTimeout(n),n=window.setTimeout((()=>e(...r)),t)}}class J{constructor(){this._val=new Map,this._ref=new WeakMap}getStore(e){return"object"==typeof(t=e)&&null!==t||"function"==typeof t?this._ref:this._val;var t}has(e){return this.getStore(e).has(e)}get(e){return this.getStore(e).get(e)}set(e,t){return this.getStore(e).set(e,t),this}}function Y(e){const t=new J;return(...n)=>{const r=n[0],i=n.slice(0,-1).reduceRight(((e,t)=>{if(e.has(t))return e.get(t);const n=new J;return e.set(t,n),n}),t);if(i.has(r))return i.get(r);const a=e(...n);return i.set(r,a),a}}const K=Y((function(e){const t=function(e){return Object.entries(e.geometry).filter((([,e])=>/MULTI/.test(e))).map((([e,t])=>({name:e,type:t})))}(e);return 0===t.length?e:t.reduce(O,e)})),X=Y(f),Q=Y((function(e,t){const n=function({col:e,dataType:t},n){if("highlightColor"===n)switch(t){case"table":return function(e){return({index:t,layer:n})=>f(n.props.data.frame[e][t])}(e);case"object":return function(e){return({object:t})=>f(t[e])}(e);case"geojson":return function(e){return({object:t})=>f(t.properties[e])}(e);default:throw TypeError(`${t} not supported`)}if(n.endsWith("Color"))switch(t){case"table":return function(e){return(t,{index:n,data:r,target:i})=>f(r.frame[e][n],i)}(e);case"object":return function(e){return(t,{target:n})=>f(t[e],n)}(e);case"geojson":return function(e){return(t,{target:n})=>f(t.properties[e],n)}(e);default:throw TypeError(`${t} not supported`)}switch(t){case"table":return function(e){return(t,{index:n,data:r})=>r.frame[e][n]}(e);case"object":return function(e){return t=>t[e]}(e);case"geojson":return function(e){return t=>t.properties[e]}(e);default:throw TypeError(`${t} not supported`)}}(e,t);return{...e,getData:n}})),ee=Y((function(e,t){"palette"in e&&(e.range=e.palette.map((e=>f(e))),e.unknown=f(e.unknown));const n=function(e){switch(e.scale){case"linear":return(0,y.Z)().domain(e.domain).range(e.range).unknown(e.unknown).clamp(!0);case"power":return(0,g.ZP)().exponent(e.exponent).domain(e.domain).range(e.range).unknown(e.unknown).clamp(!0);case"log":return(0,m.Z)().base(e.base).domain(e.domain).range(e.range).unknown(e.unknown).clamp(!0);case"symlog":return(0,v.Z)().domain(e.domain).range(e.range).unknown(e.unknown).clamp(!0);case"identity":return(0,b.Z)().unknown(e.unknown);case"threshold":case"quantile":return(0,j.Z)().domain(e.domain).range(e.range).unknown(e.unknown);case"category":return(0,w.Z)().domain(e.domain).range(e.range).unknown(e.unknown);case"quantize":return(0,x.Z)().domain(e.domain).range(e.range).unknown(e.unknown);default:throw TypeError(`scale ${e.scale} not supported`)}}(e),r="highlightColor"===t?function({col:e,dataType:t},n){switch(t){case"table":return function(e,t){return({index:n,layer:r})=>t(r.props.data.frame[e][n])}(e,n);case"object":return function(e,t){return({object:n})=>t(n[e])}(e,n);case"geojson":return function(e,t){return({object:n})=>t(n.properties[e])}(e,n);default:throw TypeError(`${t} not supported`)}}(e,n):function({col:e,dataType:t},n){switch(t){case"table":return function(e,t){return(n,{index:r,data:i})=>t(i.frame[e][r])}(e,n);case"object":return function(e,t){return n=>t(n[e])}(e,n);case"geojson":return function(e,t){return n=>t(n.properties[e])}(e,n);default:throw TypeError(`${t} not supported`)}}(e,n);return{...e,name:t,getData:r,scaleData:n}}));class te{constructor({type:e,...t}){var n,r;const i=Object.entries(t),a=function(e){const t=e.filter(ne).map((([e,t])=>[e,X(t)])),n=e.find((([e])=>"colorRange"===e));n&&t.push([n[0],n[1].map((e=>X(e)))]);return t}(i),s=function(e){return e.filter((([,e])=>L(e))).map((([e,t])=>[e,k(t)?ee(t,e):Q(t,e)]))}(i);this.type=e;const o=Object.fromEntries([...i,...a,...s.map((([e,t])=>[e,t.getData])),...ie(i),["visible",null===(n=t.visible)||void 0===n||n],["updateTriggers",re(s)],["parameters",(l=t.parameters,c=t.blendingMode,{...l,...C(c)})]]);var l,c;_(o.data)&&(o.data=K(o.data),o.extensions=[new U,...null!==(r=o.extensions)&&void 0!==r?r:[]]),"TileLayer"===e&&(o.renderSubLayers=e=>{const{bbox:{west:t,south:n,east:r,north:i},x:a,y:s,z:o}=e.tile;return new d.Z({...e,data:[{z:o,x:a,y:s}],image:e.data,bounds:[t,n,r,i]})}),this.props=o,this.scales=s.filter((([,e])=>k(e))).map((([,e])=>e)),"TextLayer"===e&&"fonts"in document&&document.fonts.load(`16px ${t.fontFamily}`)}static create(e){return new te(e)}renderLayer(e){if("TripsLayer"===this.type&&void 0!==e){const t=this.props,{loopLength:n,animationSpeed:r}=t,i=n/r,a=e/1e3%i/i;t.currentTime=a*n}return new r[this.type]({...this.props})}renderLegend(){const e=this.scales.filter((e=>e.legend));return{id:this.props.id,name:this.props.name,scales:e}}renderSelector(){var e;return{id:this.props.id,groupName:this.props.groupName,name:this.props.name,visible:null===(e=this.props.visible)||void 0===e||e}}}function ne([e,t]){return e.endsWith("Color")&&(Array.isArray(t)||"string"==typeof t)}function re(e){const t=e=>{const{getData:t,scaleData:n,palette:r,...i}=e;return i},n=e.map((([e,n])=>[e,t(n)]));return Object.fromEntries(n)}function ie(e){return e.filter((([e])=>"getColorWeight"===e||"getElevationWeight"===e)).filter((([,e])=>null!==e&&"function"!=typeof e&&!L(e))).map((([e,t])=>[e,()=>t]))}n(6158),n(2687);var ae=n(8202),se=n(6024),oe=n(17),le=n(7244),ce=n(7682);class ue extends le.Z{setProps(e){const t=e.initialBounds;if(null!=t&&(n=t,r=this.props.initialBounds,!(n===r||null==n&&null==r||null!=n&&null!=r&&(null==n?void 0:n.every(((e,t)=>e===(null==r?void 0:r[t]))))))){const[n,r,i,a]=t,s=[[Math.max(n,-180),Math.max(r,-85.051129)],[Math.min(i,180),Math.min(a,85.051129)]];this._setCanvasSize(e);const{width:o,height:l}=this._getMapSize();e={...e,initialViewState:(0,ce.Xg)({height:l,width:o,bounds:s})}}var n,r;super.setProps(e)}_getMapSize(){const e=this.canvas;if(null==e)return{width:this.width,height:this.height};if(0===e.clientWidth&&0===e.clientHeight){const t=e.closest(".rdeck.html-widget");if(null!=t)return B(t)}return{width:e.clientWidth,height:e.clientHeight}}}ue.defaultProps={...le.Z.defaultProps,initialBounds:null};var de=n(3295);const he=".feature_id";function pe(e,t=null){if(!e.picked)return null;null==t&&(t=function({object:e,layer:t}){return!_(t.props.data)||t instanceof de.Z?function(e){return"Feature"===(null==e?void 0:e.type)&&"geometry"in e&&"type"in e.geometry}(e)?"geojson":"object":"table"}(e));const n=function(e){switch(e){case"table":return(e,{index:t,data:n})=>{const r=Object.keys(n.geometry),i={};for(const[e,a]of Object.entries(n.frame))r.includes(e)||(i[e]=a[t]);return i};case"object":return e=>({...e});case"geojson":return e=>({[he]:null==e?void 0:e.id,...null==e?void 0:e.properties});default:throw TypeError(`${e} not supported`)}}(t),{object:r,index:i}=e;return n(r,{index:i,data:e.layer.props.data})}const fe="cyWLt4_G7nk5vT9hPr0o",ye="Z9hHHet2RXmL0iMel3Zt",ge="jp658yEHLlesSRvwBwDl",me="t9I8kJyjeEJEOArvMD7j",ve="vovHpTur01BROrMLmEFz";function be({info:e}){if(!e.picked||null==e.layer.props.tooltip)return null;const{x:t,y:n}=e,{name:r,tooltip:a}=e.layer.props,s=pe(e,a.dataType);delete s[he];const o=!0===a.cols?Object.keys(s):a.cols;return(0,i.jsxs)("div",{className:fe,style:{transform:`translate(${t}px, ${n}px)`},children:[(0,i.jsx)("div",{className:ye,children:r}),(0,i.jsx)("table",{className:ge,children:(0,i.jsx)("tbody",{children:o.map((e=>{var t;return(0,i.jsxs)("tr",{children:[(0,i.jsx)("td",{className:me,children:e}),(0,i.jsx)("td",{className:ve,children:String(null!==(t=s[e])&&void 0!==t?t:null)})]},e)}))})})]})}function je({props:e,layers:t}){const n=(0,s.useRef)(null),[r,a]=we(),{mapboxAccessToken:o,mapStyle:l,controller:c,parameters:u,blendingMode:d,...h}=e,p={...u,...C(d)},[f,y]=(0,s.useState)(0),g=t.some((e=>"TripsLayer"===e.type));xe(g,(e=>y(e)));const m=t.map((e=>null!=e.type?e.renderLayer(f):null));return(0,i.jsxs)(s.Fragment,{children:[(0,i.jsx)(se.Z,{Deck:ue,ref:n,...h,parameters:p,layers:m,onHover:a,children:(0,i.jsx)(ae.Z,{id:"map",controller:c,repeat:!0,children:l&&(0,i.jsx)(oe.D5,{reuseMaps:!0,mapboxAccessToken:o,mapStyle:l})})}),r&&(0,i.jsx)(be,{info:r})]})}const we=()=>{const[e,t]=(0,s.useState)(null);return[e,(0,s.useCallback)((e=>{if(!e.picked||!e.layer.props.tooltip||e.layer instanceof de.Z)return t(null);t(e)}),[])]},xe=(e,t)=>{const n=(0,s.useRef)(0),r=(0,s.useRef)(Date.now()),i=()=>{t(Date.now()-r.current),n.current=window.requestAnimationFrame(i)};(0,s.useEffect)((()=>{if(e)return n.current=window.requestAnimationFrame(i),()=>window.cancelAnimationFrame(n.current)}),[e])};var Le=n(6082),ke=n(912),Se=n(2372),Ne=n(8426);const Ce="U44LhpKlV8r1Vu1ZoZA3",_e="XF770nELUcE_0zxo_aOg",Oe="HYRhC2aw1PSMYGCz2bDb",Te="YNou4FYlc3N3GhFp2BkO",Ae="f44NGqZZGn4de9S3oTHN",Ze="xqKP289MUJ06Hgb3CjoW",Ee="XctZC_fZAMvRMiHPlt9G",Me="ly9kEH8MpXynhBX6Fhcj",Pe="iM2OiMQz6z_NtAQZZyPS",De="_8r8348KPS_nzNLR_CV_",He="tzkFrkEU5cB_jY6zcuua",Re=Date.now();function ze({className:e,tooltip:t,onClick:n,children:r}){return(0,i.jsx)("button",{className:e,type:"button",onClick:n,title:t,children:r})}function Ie({layers:e,onVisibilityChange:t}){const n=G(e,(e=>{var t;return null!==(t=e.groupName)&&void 0!==t?t:`${e.name}-${Re}`})),r=(n,r,i)=>{if(i){const i=!e.filter((e=>!n.includes(e))).some((e=>e.visible));return t(e.map((e=>({...e,visible:n.includes(e)?r:i}))))}t(n.map((e=>({...e,visible:r}))))},[a,o]=(0,s.useState)(!1),l=()=>o((e=>!e));return a?(0,i.jsxs)("div",{className:_e,children:[(0,i.jsx)("div",{className:Oe,children:(0,i.jsxs)(ze,{className:Te,onClick:l,tooltip:"Close",children:[(0,i.jsx)(Le.Z,{className:He,fontSize:"small"}),(0,i.jsx)("span",{className:Ae,children:"Layers"})]})}),(0,i.jsx)("div",{className:Ze,children:Array.from(n.entries(),(([e,t,[{groupName:n}]=t])=>(0,i.jsx)(Ue,{group:n,layers:t,onChange:r},e)))})]}):(0,i.jsx)(ze,{className:Ce,tooltip:"Layer selector",onClick:l,children:(0,i.jsx)(Le.Z,{className:He,fontSize:"small"})})}function Ue({group:e,layers:t,onChange:n}){const r=Array.from(G(t,(e=>e.name)),(([e,t])=>(0,i.jsx)(Fe,{name:e,layers:t,onChange:n},e)));return e?(0,i.jsxs)(s.Fragment,{children:[(0,i.jsx)(Fe,{name:e,layers:t,onChange:n}),(0,i.jsx)("div",{className:Ee,children:r})]}):(0,i.jsx)(s.Fragment,{children:r})}function Fe({name:e,layers:t,onChange:n}){const r=function(e){let t=e[0].visible;for(const n of e)if(n.visible!==t)return null;return t}(t),a=null===r,o=(0,s.useRef)(null);(0,s.useEffect)((()=>{o.current&&(o.current.indeterminate=a)}),[a]);const l=(0,s.useRef)((()=>!1)),c=r?ke.Z:a?Se.Z:Ne.Z,u=$(Me,r||a?Pe:null);return(0,i.jsxs)("label",{className:u,children:[(0,i.jsx)("input",{ref:o,className:De,type:"checkbox",onChange:()=>{l.current()?n(t,!0,!0):l.current=We((()=>n(t,!r,!1)),200)},checked:null==r||r}),(0,i.jsx)(c,{fontSize:"small",className:He}),(0,i.jsx)("span",{className:Ae,children:e})]})}const We=(e,t=200)=>{const n={current:0};let r=0;const i=a=>{if(r||(r=a),a-r>t)return n.current=0,void e();n.current=globalThis.requestAnimationFrame(i)};return n.current=globalThis.requestAnimationFrame(i),()=>0!==n.current&&(globalThis.cancelAnimationFrame(n.current),n.current=0,!0)},Ve="lWOwchFb6W2NpcWR4ZQS",Be="mIJjIoOSsjLZMp591rN0",Ge="OULly07OGkLPRiEDgp00",$e="oxctK5Tcknb3syUfT7xg",qe="KEbGPBIjLXnjAiUTu8eP",Je="MBBFrOSR5F_grZcyOCp0",Ye="l_4PaMO7BWOn4DcLN5Oh",Ke="aWzYqDozdq6Vl4QuIJ1y",Xe="xaprV4ANDgRiE5ai1hUl",Qe="f6SnauerJY75ZqNAuK56",et=16;function tt({layers:e}){return 0===e.length?null:(0,i.jsx)("div",{className:Ve,children:e.map((e=>(0,i.jsx)(nt,{...e},e.id)))})}function nt({name:e,scales:t}){return 0===t.length?null:(0,i.jsxs)("div",{className:Be,children:[(0,i.jsx)("div",{className:Ge,title:e,children:e}),t.map((e=>(0,i.jsx)(rt,{...e},e.name)))]})}function rt(e){var t;const n=e.name.replace(/^get/,"").replace(/([A-Z])/g," $1").toLowerCase();const r="palette"in e;const a=function(e){return"linear"===e.scale||"power"===e.scale||"log"===e.scale||"symlog"===e.scale}(e),s=function(e){return"threshold"===e.scale||"quantile"===e.scale||"quantize"===e.scale}(e);return(0,i.jsxs)("div",{className:$e,children:[(0,i.jsx)("div",{className:qe,children:n}),(0,i.jsx)("span",{className:Je,children:"by "}),(0,i.jsx)("span",{className:Ye,title:e.col,children:null!==(t=e.scaleBy)&&void 0!==t?t:e.col}),r&&a&&(0,i.jsx)(it,{...e}),r&&s&&(0,i.jsx)(at,{...e}),r&&"category"===e.scale&&(0,i.jsx)(st,{...e})]})}const it=({ticks:e,scaleData:t})=>{const n=e.map(((e,t)=>t)).slice(1,-1),r=et*(e.length-1),a=r+11+1;return(0,i.jsxs)("svg",{className:Ke,height:a,shapeRendering:"crispEdges",children:[(0,i.jsxs)("svg",{y:5,children:[(0,i.jsx)("image",{width:20,height:r,href:lt(t),preserveAspectRatio:"none"}),n.map((e=>(0,i.jsx)("line",{className:Qe,x2:20,y1:et*e,y2:et*e},e)))]}),(0,i.jsx)(ot,{ticks:e,y:-2})]})},at=({ticks:e,range:t})=>{const n=t.map(p),r=et*(e.length-1)+11+1;return(0,i.jsxs)("svg",{className:Ke,height:r,shapeRendering:"crispEdges",children:[(0,i.jsx)("svg",{y:5,children:n.map(((e,t)=>(0,i.jsx)("rect",{width:20,height:et,y:t*et,fill:e},t)))}),(0,i.jsx)(ot,{ticks:e,y:-2})]})};function st({ticks:e,range:t,unknownTick:n,unknown:r}){const a=n?[...t,r]:t,s=n?[...e,n]:e,o=a.map(p),l=et*s.length;return(0,i.jsxs)("svg",{className:Ke,height:l,children:[(0,i.jsx)("svg",{children:o.map(((e,t)=>(0,i.jsx)("rect",{width:20,height:14,y:1+t*et,fill:e},t)))}),(0,i.jsx)(ot,{ticks:s})]})}function ot({ticks:e,x:t=28,y:n=0}){return(0,i.jsx)("svg",{x:t,y:n,children:e.map(((e,t)=>(0,i.jsx)("text",{className:Xe,y:et*t,dy:11,children:String(e)},t)))})}function lt(e,t=200){const n=e.range().length,r=[...Array(n).keys()].map((e=>e/(n-1))),i=e.copy().range(r).invert,a=document.createElement("canvas"),s=a.getContext("2d");a.width=1,a.height=t;for(let n=0;n<t;n++)s.fillStyle=p(e(i(n/t))),s.fillRect(0,n,1,1);return a.toDataURL()}const ct="rdeck",ut="XTuYKSlBcC933W4sKWtC",dt="kQnelQ4hkAJEJHLO0NJI",ht="hQbOOdEZw0LO0llGKVqS";function pt({props:e,layers:t,theme:n,lazyLoad:r,layerSelector:a,onLayerVisibilityChange:o}){const l=t.map(te.create),c=(0,s.useRef)(null),u=function(e,t){const[n,r]=(0,s.useState)(!1);return(0,s.useEffect)((()=>{if(t&&e.current){const t=new IntersectionObserver((e=>{r(e[0].isIntersecting)}),{threshold:0});return t.observe(e.current),()=>t.disconnect()}}),[t,e]),n}(c,r),d=!r||u;return(0,i.jsxs)("div",{ref:c,className:$(ct,n),children:[(0,i.jsx)("div",{className:$(ut,dt),children:a&&(0,i.jsx)(Ie,{layers:l.filter((e=>e.props.visibilityToggle)).map((e=>e.renderSelector())).reverse(),onVisibilityChange:o})}),d&&(0,i.jsx)(je,{props:e,layers:l}),(0,i.jsx)("div",{className:$(ut,ht),children:(0,i.jsx)(tt,{layers:l.filter((e=>e.props.visible)).map((e=>e.renderLegend())).reverse()})})]})}var ft=n(6935);function yt(e){const t=e instanceof ft.Z?e:new ft.Z(e),n=W(t,"longitude","latitude","zoom","bearing","pitch","altitude");return{bounds:t.getBounds(),viewState:{...n,center:t.unprojectFlat(t.center)}}}var gt,mt,vt=function(e,t,n,r,i){if("m"===r)throw new TypeError("Private method is not writable");if("a"===r&&!i)throw new TypeError("Private accessor was defined without a setter");if("function"==typeof t?e!==t||!i:!t.has(e))throw new TypeError("Cannot write private member to an object whose class did not declare it");return"a"===r?i.call(e,n):i?i.value=n:t.set(e,n),n},bt=function(e,t,n,r){if("a"===n&&!r)throw new TypeError("Private accessor was defined without a getter");if("function"==typeof t?e!==t||!r:!t.has(e))throw new TypeError("Cannot read private member from an object whose class did not declare it");return"m"===n?r:"a"===n?r.call(e):r?r.value:t.get(e)};const jt={name:"rdeck",type:"output",factory:(e,t,n)=>new wt(e,t,n)};class wt{constructor(e,t,n){gt.set(this,void 0),mt.set(this,void 0),this.props={blendingMode:"normal"},this.layers=[],this.theme="kepler",this.layerSelector=!0,this.lazyLoad=!1,vt(this,gt,e,"f"),vt(this,mt,(0,a.s)(e),"f"),this.handleClick=this.handleClick.bind(this);const{handleViewStateChange:r}=this;if(this.handleViewStateChange=q((e=>r(e)),50),this.setLayerVisibility=this.setLayerVisibility.bind(this),HTMLWidgets.shinyMode){const t=q((e=>this.renderValue(e)),50);Shiny.addCustomMessageHandler(`${e.id}:layer`,(e=>{var n,r,i;const a=this.layers.find((t=>t.id===e.id)),s={...a,...e,visible:null!==(n=e.visible)&&void 0!==n?n:null==a?void 0:a.visible,data:null!==(i=null!==(r=e.data)&&void 0!==r?r:null==a?void 0:a.data)&&void 0!==i?i:null};this.layers=null==a?[...this.layers,s]:this.layers.map((e=>e===a?s:e)),t({layers:this.layers})})),Shiny.addCustomMessageHandler(`${e.id}:deck`,(e=>{this.renderValue(e)}))}}renderValue({props:e=this.props,layers:t=this.layers,theme:n=this.theme,layerSelector:r=this.layerSelector,lazyLoad:a=this.lazyLoad}={}){null!=(e={...this.props,...e,onClick:this.handleClick,onViewStateChange:this.handleViewStateChange}).initialBounds&&delete e.initialViewState,Object.assign(this,{props:e,layers:t,theme:n,layerSelector:r,lazyLoad:a}),bt(this,mt,"f").render((0,i.jsx)(pt,{props:e,layers:t,theme:n,layerSelector:r,lazyLoad:a,onLayerVisibilityChange:this.setLayerVisibility}))}resize(e,t){}get id(){return bt(this,gt,"f").id}setLayerVisibility(e){if(0===e.length)return;const t=this.layers.map((t=>{const n=e.find((e=>((e,t)=>{const n=e.name===t.name,r=e.groupName===t.groupName;return n&&r||null==e.name&&null!=e.groupName&&r})(e,t)&&e.visible!==t.visible));return n?{...t,visible:n.visible}:t}));this.renderValue({layers:t})}handleClick(e){var t;if(HTMLWidgets.shinyMode){const n={coordinate:e.coordinate,...yt(e.viewport),layer:W(null===(t=e.layer)||void 0===t?void 0:t.props,"id","name","groupName"),object:pe(e)};Shiny.setInputValue(`${this.id}_click`,n,{priority:"event"})}}handleViewStateChange({viewState:e}){if(HTMLWidgets.shinyMode){const t=yt(e);Shiny.setInputValue(`${this.id}_viewstate`,t,{priority:"event"})}}}function xt(e){var t;const n=document.getElementById(e);return null!==(t=null==n?void 0:n.htmlwidget_data_init_result)&&void 0!==t?t:null}function Lt(){return[...document.querySelectorAll(".rdeck.html-widget")].map((e=>e.htmlwidget_data_init_result)).filter((e=>e instanceof wt))}gt=new WeakMap,mt=new WeakMap,HTMLWidgets.widget(jt);const kt="0.4.0"},9521:()=>{},9125:()=>{},9214:()=>{}},i={};function a(e){var t=i[e];if(void 0!==t)return t.exports;var n=i[e]={exports:{}};return r[e].call(n.exports,n,n.exports,a),n.exports}a.m=r,e=[],a.O=(t,n,r,i)=>{if(!n){var s=1/0;for(u=0;u<e.length;u++){for(var[n,r,i]=e[u],o=!0,l=0;l<n.length;l++)(!1&i||s>=i)&&Object.keys(a.O).every((e=>a.O[e](n[l])))?n.splice(l--,1):(o=!1,i<s&&(s=i));if(o){e.splice(u--,1);var c=r();void 0!==c&&(t=c)}}return t}i=i||0;for(var u=e.length;u>0&&e[u-1][2]>i;u--)e[u]=e[u-1];e[u]=[n,r,i]},a.n=e=>{var t=e&&e.__esModule?()=>e.default:()=>e;return a.d(t,{a:t}),t},n=Object.getPrototypeOf?e=>Object.getPrototypeOf(e):e=>e.__proto__,a.t=function(e,r){if(1&r&&(e=this(e)),8&r)return e;if("object"==typeof e&&e){if(4&r&&e.__esModule)return e;if(16&r&&"function"==typeof e.then)return e}var i=Object.create(null);a.r(i);var s={};t=t||[null,n({}),n([]),n(n)];for(var o=2&r&&e;"object"==typeof o&&!~t.indexOf(o);o=n(o))Object.getOwnPropertyNames(o).forEach((t=>s[t]=()=>e[t]));return s.default=()=>e,a.d(i,s),i},a.d=(e,t)=>{for(var n in t)a.o(t,n)&&!a.o(e,n)&&Object.defineProperty(e,n,{enumerable:!0,get:t[n]})},a.g=function(){if("object"==typeof globalThis)return globalThis;try{return this||new Function("return this")()}catch(e){if("object"==typeof window)return window}}(),a.o=(e,t)=>Object.prototype.hasOwnProperty.call(e,t),a.r=e=>{"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(e,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(e,"__esModule",{value:!0})},(()=>{var e={472:0};a.O.j=t=>0===e[t];var t=(t,n)=>{var r,i,[s,o,l]=n,c=0;if(s.some((t=>0!==e[t]))){for(r in o)a.o(o,r)&&(a.m[r]=o[r]);if(l)var u=l(a)}for(t&&t(n);c<s.length;c++)i=s[c],a.o(e,i)&&e[i]&&e[i][0](),e[i]=0;return a.O(u)},n=self.webpackChunkrdeck=self.webpackChunkrdeck||[];n.forEach(t.bind(null,0)),n.push=t.bind(null,n.push.bind(n))})();var s=a.O(void 0,[486,474,619,568,175,627,811,42,899,667,324,134,133,468,745,535,528,784,485,378,645,394,816,650,869,67,806,282,953,538,49,639,825,596],(()=>a(6911)));return s=a.O(s)})()));
//# sourceMappingURL=data:application/json;charset=utf-8;base64,