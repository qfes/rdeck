!function(e,t){"object"==typeof exports&&"object"==typeof module?module.exports=t():"function"==typeof define&&define.amd?define([],t):"object"==typeof exports?exports.rdeck=t():e.rdeck=t()}(self,(()=>(()=>{var e,t,n,r={4338:(e,t,n)=>{"use strict";n.r(t),n.d(t,{VERSION:()=>Tn,Widget:()=>On,binding:()=>Cn,getWidgetById:()=>Pn,getWidgets:()=>Mn});var r={};n.r(r),n.d(r,{AGGREGATION_OPERATION:()=>ce.KM,ArcLayer:()=>le.ArcLayer,BitmapLayer:()=>le.BitmapLayer,CPUGridLayer:()=>ce.ab,ColumnLayer:()=>le.ColumnLayer,ContourLayer:()=>ce.YY,GPUGridLayer:()=>ce.ML,GeoJsonLayer:()=>le.GeoJsonLayer,GreatCircleLayer:()=>ue.GreatCircleLayer,GridCellLayer:()=>le.GridCellLayer,GridLayer:()=>ce.mU,H3ClusterLayer:()=>ue.H3ClusterLayer,H3HexagonLayer:()=>ue.H3HexagonLayer,HeatmapLayer:()=>ce.zP,HexagonLayer:()=>ce.dX,IconLayer:()=>le.IconLayer,LineLayer:()=>le.LineLayer,MVTLayer:()=>ue.MVTLayer,PathLayer:()=>le.PathLayer,PointCloudLayer:()=>le.PointCloudLayer,PolygonLayer:()=>le.PolygonLayer,QuadkeyLayer:()=>ue.QuadkeyLayer,S2Layer:()=>ue.S2Layer,ScatterplotLayer:()=>le.ScatterplotLayer,ScenegraphLayer:()=>de.ScenegraphLayer,ScreenGridLayer:()=>ce.p3,SimpleMeshLayer:()=>de.SimpleMeshLayer,SolidPolygonLayer:()=>le.SolidPolygonLayer,TerrainLayer:()=>ue.TerrainLayer,TextLayer:()=>le.TextLayer,Tile3DLayer:()=>ue.Tile3DLayer,TileLayer:()=>ue.TileLayer,TripsLayer:()=>ue.TripsLayer,_AggregationLayer:()=>ce.Di,_BinSorter:()=>ce.l0,_CPUAggregator:()=>ce.oA,_GPUGridAggregator:()=>ce.Wc,_MultiIconLayer:()=>le._MultiIconLayer,_TextBackgroundLayer:()=>le._TextBackgroundLayer,_getURLFromTemplate:()=>ue._getURLFromTemplate});n(8559);var i=n(5893),a=n(745),o=n(7294),s=(n(6158),n(2687),n(4009)),l=n(6024),c=n(3295),u=n(17),d=n(8289),f=n(7682);function h(e,...t){if(null==e)return null;const n=t.map((t=>[t,e[t]]));return Object.fromEntries(n)}function p(e){return e.clientHeight>0&&e.clientHeight>0?e:e.parentElement?p(e.parentElement):null}function g(e){const t=p(e);if(e===t||null==t)return{width:e.clientWidth,height:e.clientHeight};const{width:n,height:r}=getComputedStyle(e),i=document.createElement("div");Object.assign(i.style,{width:n,height:r,display:"hidden"}),t.appendChild(i);const a={width:i.clientWidth,height:i.clientHeight};return t.removeChild(i),a}function y(e,t){const n=new Map;for(const r of e){const e=t(r);n.has(e)?n.get(e).push(r):n.set(e,[r])}return n}function m(...e){return e.filter((e=>null!=e)).join(" ")}class b{constructor(){Object.defineProperty(this,"_val",{enumerable:!0,configurable:!0,writable:!0,value:new Map}),Object.defineProperty(this,"_ref",{enumerable:!0,configurable:!0,writable:!0,value:new WeakMap})}getStore(e){return"object"==typeof(t=e)&&null!==t||"function"==typeof t?this._ref:this._val;var t}has(e){return this.getStore(e).has(e)}get(e){return this.getStore(e).get(e)}set(e,t){return this.getStore(e).set(e,t),this}}function v(e){const t=new b;return(...n)=>{const r=n[0],i=n.slice(0,-1).reduceRight(((e,t)=>{if(e.has(t))return e.get(t);const n=new b;return e.set(t,n),n}),t);if(i.has(r))return i.get(r);const a=e(...n);return i.set(r,a),a}}class w extends d.Z{setProps(e){const t=e.initialBounds;if(null!=t&&(n=t,r=this.props.initialBounds,!(n===r||null==n&&null==r||null!=n&&null!=r&&(null==n?void 0:n.every(((e,t)=>e===(null==r?void 0:r[t]))))))){const[n,r,i,a]=t,o=[[Math.max(n,-180),Math.max(r,-85.051129)],[Math.min(i,180),Math.min(a,85.051129)]];this._setCanvasSize(e);const{width:s,height:l}=this._getMapSize();e={...e,initialViewState:{...(0,f.Xg)({height:l,width:s,bounds:o}),bearing:0,pitch:0}}}var n,r;super.setProps(e)}_getMapSize(){const e=this.canvas;if(null==e)return{width:this.width,height:this.height};if(0===e.clientWidth&&0===e.clientHeight){const t=e.closest(".rdeck.html-widget");if(null!=t)return g(t)}return{width:e.clientWidth,height:e.clientHeight}}}function j(e){return null!==e&&"object"==typeof e&&"frame"in e}function x(e,{name:t,type:n}){var r,i,a,o;const s=e.frame,l=Object.fromEntries(Object.entries(s).map((([e])=>[e,[]]))),c=Object.keys(e.frame).filter((e=>e!==t)),u=s[t],d=function(e){switch(e){case"MULTIPOINT":return L;case"MULTILINESTRING":return k;case"MULTIPOLYGON":return S;default:throw TypeError(`${e} not supported`)}}(n),f=e=>{for(const t of c)l[t].push(s[t][e])},h=[];for(let n=0;n<e.length;n++){const s=u[n];if(d(s)){l[t].push(...s);for(let t=0;t<s.length;t++)f(n),h.push(null!==(i=null===(r=e.indices)||void 0===r?void 0:r[n])&&void 0!==i?i:n)}else l[t].push(s),f(n),h.push(null!==(o=null===(a=e.indices)||void 0===a?void 0:a[n])&&void 0!==o?o:n)}return{length:l[t].length,geometry:{...e.geometry,[t]:n.replace("MULTI","")},indices:h,frame:l}}function L(e){return Array.isArray(null==e?void 0:e[0])}function k(e){var t;return Array.isArray(null===(t=null==e?void 0:e[0])||void 0===t?void 0:t[0])}function S(e){var t,n;return Array.isArray(null===(n=null===(t=null==e?void 0:e[0])||void 0===t?void 0:t[0])||void 0===n?void 0:n[0])}Object.defineProperty(w,"defaultProps",{enumerable:!0,configurable:!0,writable:!0,value:{...d.Z.defaultProps,initialBounds:null}});const O=".feature_id";function C(e,t=null){if(!e.picked)return null;null==t&&(t=function({object:e,layer:t}){return!j(t.props.data)||t instanceof c.Z?function(e){return"Feature"===(null==e?void 0:e.type)&&"geometry"in e&&"type"in e.geometry}(e)?"geojson":"object":"table"}(e));const n=function(e){switch(e){case"table":return(e,{index:t,data:n})=>{const r=Object.keys(n.geometry),i={};for(const[e,a]of Object.entries(n.frame))r.includes(e)||(i[e]=a[t]);return i};case"object":return e=>({...e});case"geojson":return e=>({[O]:null==e?void 0:e.id,...null==e?void 0:e.properties});default:throw TypeError(`${e} not supported`)}}(t),{object:r,index:i}=e;return n(r,{index:i,data:e.layer.props.data})}const P="cyWLt4_G7nk5vT9hPr0o",M="Z9hHHet2RXmL0iMel3Zt",N="jp658yEHLlesSRvwBwDl",T="t9I8kJyjeEJEOArvMD7j",_="vovHpTur01BROrMLmEFz";function E({info:e}){if(!e.picked||null==e.layer.props.tooltip)return null;const{x:t,y:n}=e,{name:r,tooltip:a}=e.layer.props,o=C(e,a.dataType);delete o[O];const s=!0===a.cols?Object.keys(o):a.cols;return(0,i.jsxs)("div",{className:P,style:{transform:`translate(${t}px, ${n}px)`},children:[(0,i.jsx)("div",{className:M,children:r}),(0,i.jsx)("table",{className:N,children:(0,i.jsx)("tbody",{children:s.map((e=>{var t;return(0,i.jsxs)("tr",{children:[(0,i.jsx)("td",{className:T,children:e}),(0,i.jsx)("td",{className:_,children:String(null!==(t=o[e])&&void 0!==t?t:null)})]},e)}))})})]})}var A=n(9757);const Z=Object.freeze({additive:{[A.default.BLEND]:!0,blendFunc:[A.default.SRC_ALPHA,A.default.DST_ALPHA],blendEquation:A.default.FUNC_ADD},subtractive:{[A.default.BLEND]:!0,blendFunc:[A.default.ONE,A.default.ONE_MINUS_DST_COLOR,A.default.SRC_ALPHA,A.default.DST_ALPHA],blendEquation:[A.default.FUNC_SUBTRACT,A.default.FUNC_ADD]},normal:{[A.default.BLEND]:!0,blendFunc:[A.default.SRC_ALPHA,A.default.ONE_MINUS_SRC_ALPHA,A.default.ONE,A.default.ONE_MINUS_SRC_ALPHA],blendEquation:[A.default.FUNC_ADD,A.default.FUNC_ADD]}});function F(e="normal"){var t;return null!==(t=Z[e])&&void 0!==t?t:Z.normal}var D=n(4329),R=n(7359),I=n(9900);function H(e){switch(e.type){case"Point":return 1;case"MultiPoint":case"LineString":return e.coordinates.length;case"MultiLineString":case"Polygon":return W(e.coordinates);case"MultiPolygon":return e.coordinates.reduce(((e,t)=>e+W(t)),0);case"GeometryCollection":return e.geometries.reduce(((e,t)=>e+H(t)),0);default:throw new TypeError(`Geomtry type ${e.type} not supported.`)}}function W(e){return e.reduce(((e,t)=>e+t.length),0)}const G=[3,169,244],U=[116,117,129],V=[...G,216.75],z=[...U,216.75],B=[...G,38.25],$=[...U,38.25],q=[0,0,0,0];function J(e){if(null==e)return null;const{geojson:t,selectedFeatureIndices:n,setGeoJson:r,selectFeatures:i}=e,a=function(e){var t;return null!==(t=re[null!=e?e:"view"])&&void 0!==t?t:re.view}(e.mode),o=!ie.includes(a);return new te({data:t,selectedFeatureIndexes:n,mode:a,modeConfig:{screenSpace:!0,viewport:{}},onEdit:function({updatedData:e,editType:t,editContext:a}){var o;"updateTentativeFeature"!==t&&("selectFeature"!==t?(this.data=e,ee.has(t)&&(null==r||r(e),"addFeature"===t&&(null==i||i([...n,...a.featureIndexes])))):null==i||i(null!==(o=a.selectedIndices)&&void 0!==o?o:[]))},pickable:a!==re.view,pickingLineWidthExtraPixels:5,pickingDepth:0,getRadius:6,getLineWidth:1.5,getTentativeLineWidth:1.5,lineWidthScale:1,getFillColor:a===re.view?q:Y,getLineColor:Q,getTentativeLineColor:V,getEditHandlePointOutlineColor:V,getTentativeFillColor:B,getEditHandlePointColor:q,getDashArray:o?[4,2]:[0,0],extensions:[new D.Z({dash:!0})],_subLayerProps:{geojson:{dataComparator:X,_dataDiff:K},guides:{dataComparator:X,_dataDiff:K}}})}function Y(e,t,n){return t?B:$}function Q(e,t,n){return t?V:z}function X(e,t){return Object.is(e.features,t.features)}function K(e,t){const n=e.features,r=t.features;if(n.length!==r.length)return"A new data container was supplied";const i=[],a=n.length;for(let e=0;e<a;++e){const t=n[e],o=r[e];if(t!==o){if(H(t.geometry)!==H(o.geometry)){i.push({startRow:e,endRow:a});break}i.push({startRow:e,endRow:e+1})}}return i}const ee=Object.freeze(new Set(["addPosition","removePosition","addFeature","finishMovePosition","scaled","rotated","translated","extruded","split"]));class te extends I.nk{onPointerMove(e){this.state.lastPointerMoveEvent=e;this.getActiveMode().handlePointerMove(e,this.getModeProps(this.props))}updateState(e){e.changeFlags.propsOrDataChanged&&super.updateState(e)}setState(e){if(this.props.mode===re.modify)return super.setState(e);for(const t in e)if("cursor"!==t||e.cursor!==this.state.cursor)return super.setState(e)}}class ne extends R.ViewMode{handlePointerMove(e,t){var n;const r=0!==(null===(n=null==e?void 0:e.picks)||void 0===n?void 0:n.length);t.onUpdateCursor(r?"pointer":null)}handleClick(e,t){var n;if(!(0!==(null==e?void 0:e.picks.length)))return;const r=new Set(t.selectedIndexes),i=new Set(e.picks.map((e=>e.index))),a=function(e,t){for(const n of t)if(!e.has(n))return!1;return!0}(r,i)?function(...e){const t=new Set(e[0]);for(const n of e.slice(1))for(const e of n)t.delete(e);return t}(r,i):function(...e){return new Set(e.flatMap((e=>[...e])))}(r,i);null===(n=t.onEdit)||void 0===n||n.call(t,{updatedData:t.data,editType:"selectFeature",editContext:{selectedIndices:[...a]}})}}R.utils.getEditHandlesForGeometry=v(R.utils.getEditHandlesForGeometry);const re=Object.seal({view:R.ViewMode,select:ne,modify:R.ModifyMode,transform:R.TransformMode,linestring:R.DrawLineStringMode,point:R.DrawPointMode,polygon:R.DrawPolygonMode,lasso:R.DrawPolygonByDraggingMode}),ie=[re.view,re.select];function ae({deckgl:e,mapgl:t,layers:n,editor:r}){const a=(0,o.useRef)(null),[c,d]=oe();let{blendingMode:f,controller:h,onClick:p,...g}=e;const y={...e.parameters,...f&&F(f)},[m,b]=(0,o.useState)(0),v=n.some((e=>"TripsLayer"===e.type));se(v,(e=>b(e)));const j=n.map((e=>null!=e.type?e.renderLayer(m):null)),x=J(r),L=null!=r&&!["view","select"].includes(r.mode);return L&&h&&(h={...h,doubleClickZoom:!1}),(0,i.jsxs)(o.Fragment,{children:[(0,i.jsx)(l.Z,{Deck:w,ref:a,...{...g,parameters:y},layers:[...j,x],onHover:L?void 0:d,onClick:L?void 0:p,getCursor:null==x?void 0:x.getCursor.bind(x),children:(0,i.jsx)(s.Z,{id:"map",controller:h,repeat:!0,children:t.mapStyle&&(0,i.jsx)(u.D5,{...t})})}),c&&(0,i.jsx)(E,{info:c})]})}const oe=()=>{const[e,t]=(0,o.useState)(null);return[e,(0,o.useCallback)((e=>{if(!e.picked||!e.layer.props.tooltip||e.layer instanceof c.Z)return t(null);t(e)}),[])]},se=(e,t)=>{const n=(0,o.useRef)(0),r=(0,o.useRef)(Date.now()),i=()=>{t(Date.now()-r.current),n.current=window.requestAnimationFrame(i)};(0,o.useEffect)((()=>{if(e)return n.current=window.requestAnimationFrame(i),()=>window.cancelAnimationFrame(n.current)}),[e])};var le=n(7786),ce=n(9080),ue=n(803),de=n(1956),fe=n(5395);const he=[0,0,0,255];function pe([e,t,n,r=255]){return`rgba(${e}, ${t}, ${n}, ${r/255})`}function ge(e,t){return Array.isArray(e)?t||4!==e.length?((t=null!=t?t:[])[0]=e[0],t[1]=e[1],t[2]=e[2],t[3]=3===e.length?e[3]:255,t):e:"string"==typeof e?(function(e,t){if(7===e.length){const n=parseInt(e.substring(1),16);t[0]=Math.floor(n/65536),t[1]=Math.floor(n/256%256),t[2]=n%256,t[3]=255}else if(9===e.length){const n=parseInt(e.substring(1),16);t[0]=Math.floor(n/16777216),t[1]=Math.floor(n/65536%256),t[2]=Math.floor(n/256%256),t[3]=n%256}}(e,t=null!=t?t:[]),t):he}var ye=n(4634),me=n(4177),be=n(458),ve=n(5801),we=n(3613),je=n(602),xe=n(8973),Le=n(2625);function ke(e){return null!==e&&"object"==typeof e&&"accessor"===e.type}function Se(e){return ke(e)&&"scale"in e}var Oe=n(3693),Ce=n(4717),Pe=n(6867),Me=n(3326),Ne=n(2112),Te=n(7693),_e=n(8569),Ee=n(1435);class Ae extends Oe.Z{initializeState(){if(!function(e){return Ze.some((t=>e instanceof t))}(this))return;const e=this,t=e.getAttributeManager();t&&t.addInstanced({pickingColors:{type:A.default.UNSIGNED_BYTE,size:3,accessor:(t,{index:n,data:r,target:i})=>{var a,o,s;if(j(r)&&Array.isArray(r.indices))return e.encodePickingColor(r.indices.indexOf(r.indices[n]),i);const l=null===(o=null===(a=null==t?void 0:t.__source)||void 0===a?void 0:a.parent)||void 0===o?void 0:o.props.data;return j(l)&&Array.isArray(l.indices)?e.encodePickingColor(l.indices.indexOf(l.indices[t.__source.index]),i):e.encodePickingColor(null!==(s=null==t?void 0:t.__source.index)&&void 0!==s?s:n,i)},shaderAttributes:{pickingColors:{divisor:0},instancePickingColors:{divisor:1}}}})}}const Ze=[Ce.Z,Pe.Z,Me.Z,Ne.Z,Te.Z,_e.Z,Ee.Z];const Fe=v((function(e){const t=function(e){return Object.entries(e.geometry).filter((([,e])=>/MULTI/.test(e))).map((([e,t])=>({name:e,type:t})))}(e);return 0===t.length?e:t.reduce(x,e)})),De=v(ge),Re=v((function(e,t){const n=function({col:e,dataType:t},n){if("highlightColor"===n)switch(t){case"table":return function(e){return({index:t,layer:n})=>ge(n.props.data.frame[e][t])}(e);case"object":return function(e){return({object:t})=>ge(t[e])}(e);case"geojson":return function(e){return({object:t})=>ge(t.properties[e])}(e);default:throw TypeError(`${t} not supported`)}if(n.endsWith("Color"))switch(t){case"table":return function(e){return(t,{index:n,data:r,target:i})=>ge(r.frame[e][n],i)}(e);case"object":return function(e){return(t,{target:n})=>ge(t[e],n)}(e);case"geojson":return function(e){return(t,{target:n})=>ge(t.properties[e],n)}(e);default:throw TypeError(`${t} not supported`)}switch(t){case"table":return function(e){return(t,{index:n,data:r})=>r.frame[e][n]}(e);case"object":return function(e){return t=>t[e]}(e);case"geojson":return function(e){return t=>t.properties[e]}(e);default:throw TypeError(`${t} not supported`)}}(e,t);return{...e,getData:n}})),Ie=v((function(e,t){"palette"in e&&(e.range=e.palette.map((e=>ge(e))),e.unknown=ge(e.unknown));const n=function(e){switch(e.scale){case"linear":return(0,ye.Z)().domain(e.domain).range(e.range).unknown(e.unknown).clamp(!0);case"power":return(0,me.ZP)().exponent(e.exponent).domain(e.domain).range(e.range).unknown(e.unknown).clamp(!0);case"log":return(0,be.Z)().base(e.base).domain(e.domain).range(e.range).unknown(e.unknown).clamp(!0);case"symlog":return(0,ve.Z)().domain(e.domain).range(e.range).unknown(e.unknown).clamp(!0);case"identity":return(0,we.Z)().unknown(e.unknown);case"threshold":case"quantile":return(0,je.Z)().domain(e.domain).range(e.range).unknown(e.unknown);case"category":return(0,xe.Z)().domain(e.domain).range(e.range).unknown(e.unknown);case"quantize":return(0,Le.Z)().domain(e.domain).range(e.range).unknown(e.unknown);default:throw TypeError(`scale ${e.scale} not supported`)}}(e),r="highlightColor"===t?function({col:e,dataType:t},n){switch(t){case"table":return function(e,t){return({index:n,layer:r})=>t(r.props.data.frame[e][n])}(e,n);case"object":return function(e,t){return({object:n})=>t(n[e])}(e,n);case"geojson":return function(e,t){return({object:n})=>t(n.properties[e])}(e,n);default:throw TypeError(`${t} not supported`)}}(e,n):function({col:e,dataType:t},n){switch(t){case"table":return function(e,t){return(n,{index:r,data:i})=>t(i.frame[e][r])}(e,n);case"object":return function(e,t){return n=>t(n[e])}(e,n);case"geojson":return function(e,t){return n=>t(n.properties[e])}(e,n);default:throw TypeError(`${t} not supported`)}}(e,n);return{...e,name:t,getData:r,scaleData:n}}));class He{constructor({type:e,...t}){var n,r;Object.defineProperty(this,"type",{enumerable:!0,configurable:!0,writable:!0,value:void 0}),Object.defineProperty(this,"props",{enumerable:!0,configurable:!0,writable:!0,value:void 0}),Object.defineProperty(this,"scales",{enumerable:!0,configurable:!0,writable:!0,value:void 0});const i=Object.entries(t),a=function(e){const t=e.filter(We).map((([e,t])=>[e,De(t)])),n=e.find((([e])=>"colorRange"===e));n&&t.push([n[0],n[1].map((e=>De(e)))]);return t}(i),o=function(e){return e.filter((([,e])=>ke(e))).map((([e,t])=>[e,Se(t)?Ie(t,e):Re(t,e)]))}(i);this.type=e;const s=Object.fromEntries([...i,...a,...o.map((([e,t])=>[e,t.getData])),...Ue(i),["visible",null===(n=t.visible)||void 0===n||n],["updateTriggers",Ge(o)],["parameters",(l=t.parameters,c=t.blendingMode,{...l,...F(c)})]]);var l,c;j(s.data)&&(s.data=Fe(s.data),s.extensions=[new Ae,...null!==(r=s.extensions)&&void 0!==r?r:[]]),"TileLayer"===e&&(s.renderSubLayers=e=>{const{bbox:{west:t,south:n,east:r,north:i},x:a,y:o,z:s}=e.tile;return new fe.Z({...e,data:[{z:s,x:a,y:o}],image:e.data,bounds:[t,n,r,i]})}),this.props=s,this.scales=o.filter((([,e])=>Se(e))).map((([,e])=>e)),"TextLayer"===e&&"fonts"in document&&document.fonts.load(`16px ${t.fontFamily}`)}static create(e){return new He(e)}renderLayer(e){if("TripsLayer"===this.type&&void 0!==e){const t=this.props,{loopLength:n,animationSpeed:r}=t,i=n/r,a=e/1e3%i/i;t.currentTime=a*n}return new r[this.type]({...this.props})}renderLegend(){const e=this.scales.filter((e=>e.legend));return{id:this.props.id,name:this.props.name,scales:e}}renderSelector(){var e;return{id:this.props.id,groupName:this.props.groupName,name:this.props.name,visible:null===(e=this.props.visible)||void 0===e||e}}}function We([e,t]){return e.endsWith("Color")&&(Array.isArray(t)||"string"==typeof t)}function Ge(e){const t=e=>{const{getData:t,scaleData:n,palette:r,...i}=e;return i},n=e.map((([e,n])=>[e,t(n)]));return Object.fromEntries(n)}function Ue(e){return e.filter((([e])=>"getColorWeight"===e||"getElevationWeight"===e)).filter((([,e])=>null!==e&&"function"!=typeof e&&!ke(e))).map((([e,t])=>[e,()=>t]))}var Ve=n(6082),ze=n(912),Be=n(2372),$e=n(8426);const qe="U44LhpKlV8r1Vu1ZoZA3",Je="XF770nELUcE_0zxo_aOg",Ye="HYRhC2aw1PSMYGCz2bDb",Qe="YNou4FYlc3N3GhFp2BkO",Xe="f44NGqZZGn4de9S3oTHN",Ke="xqKP289MUJ06Hgb3CjoW",et="XctZC_fZAMvRMiHPlt9G",tt="ly9kEH8MpXynhBX6Fhcj",nt="iM2OiMQz6z_NtAQZZyPS",rt="_8r8348KPS_nzNLR_CV_",it="tzkFrkEU5cB_jY6zcuua",at=Date.now();function ot({className:e,tooltip:t,onClick:n,children:r}){return(0,i.jsx)("button",{className:e,type:"button",onClick:n,title:t,children:r})}function st({layers:e,onVisibilityChange:t}){const n=y(e,(e=>{var t;return null!==(t=e.groupName)&&void 0!==t?t:`${e.name}-${at}`})),r=(n,r,i)=>{if(i){const i=!e.filter((e=>!n.includes(e))).some((e=>e.visible));return t(e.map((e=>({...e,visible:n.includes(e)?r:i}))))}t(n.map((e=>({...e,visible:r}))))},[a,s]=(0,o.useState)(!1),l=()=>s((e=>!e));return a?(0,i.jsxs)("div",{className:Je,children:[(0,i.jsx)("div",{className:Ye,children:(0,i.jsxs)(ot,{className:Qe,onClick:l,tooltip:"Close",children:[(0,i.jsx)(Ve.Z,{className:it,fontSize:"small"}),(0,i.jsx)("span",{className:Xe,children:"Layers"})]})}),(0,i.jsx)("div",{className:Ke,children:Array.from(n.entries(),(([e,t,[{groupName:n}]=t])=>(0,i.jsx)(lt,{group:n,layers:t,onChange:r},e)))})]}):(0,i.jsx)(ot,{className:qe,tooltip:"Layer selector",onClick:l,children:(0,i.jsx)(Ve.Z,{className:it,fontSize:"small"})})}function lt({group:e,layers:t,onChange:n}){const r=Array.from(y(t,(e=>e.name)),(([e,t])=>(0,i.jsx)(ct,{name:e,layers:t,onChange:n},e)));return e?(0,i.jsxs)(o.Fragment,{children:[(0,i.jsx)(ct,{name:e,layers:t,onChange:n}),(0,i.jsx)("div",{className:et,children:r})]}):(0,i.jsx)(o.Fragment,{children:r})}function ct({name:e,layers:t,onChange:n}){const r=function(e){let t=e[0].visible;for(const n of e)if(n.visible!==t)return null;return t}(t),a=null===r,s=(0,o.useRef)(null);(0,o.useEffect)((()=>{s.current&&(s.current.indeterminate=a)}),[a]);const l=(0,o.useRef)((()=>!1)),c=r?ze.Z:a?Be.Z:$e.Z,u=m(tt,r||a?nt:null);return(0,i.jsxs)("label",{className:u,children:[(0,i.jsx)("input",{ref:s,className:rt,type:"checkbox",onChange:()=>{l.current()?n(t,!0,!0):l.current=ut((()=>n(t,!r,!1)),200)},checked:null==r||r}),(0,i.jsx)(c,{fontSize:"small",className:it}),(0,i.jsx)("span",{className:Xe,children:e})]})}const ut=(e,t=200)=>{const n={current:0};let r=0;const i=a=>{if(r||(r=a),a-r>t)return n.current=0,void e();n.current=globalThis.requestAnimationFrame(i)};return n.current=globalThis.requestAnimationFrame(i),()=>0!==n.current&&(globalThis.cancelAnimationFrame(n.current),n.current=0,!0)},dt="lWOwchFb6W2NpcWR4ZQS",ft="mIJjIoOSsjLZMp591rN0",ht="OULly07OGkLPRiEDgp00",pt="oxctK5Tcknb3syUfT7xg",gt="KEbGPBIjLXnjAiUTu8eP",yt="MBBFrOSR5F_grZcyOCp0",mt="l_4PaMO7BWOn4DcLN5Oh",bt="aWzYqDozdq6Vl4QuIJ1y",vt="xaprV4ANDgRiE5ai1hUl",wt="f6SnauerJY75ZqNAuK56",jt=16;function xt({layers:e}){return 0===e.length?null:(0,i.jsx)("div",{className:dt,children:e.map((e=>(0,i.jsx)(Lt,{...e},e.id)))})}function Lt({name:e,scales:t}){return 0===t.length?null:(0,i.jsxs)("div",{className:ft,children:[(0,i.jsx)("div",{className:ht,title:e,children:e}),t.map((e=>(0,i.jsx)(kt,{...e},e.name)))]})}function kt(e){var t;const n=e.name.replace(/^get/,"").replace(/([A-Z])/g," $1").toLowerCase();const r="palette"in e;const a=function(e){return"linear"===e.scale||"power"===e.scale||"log"===e.scale||"symlog"===e.scale}(e),o=function(e){return"threshold"===e.scale||"quantile"===e.scale||"quantize"===e.scale}(e);return(0,i.jsxs)("div",{className:pt,children:[(0,i.jsx)("div",{className:gt,children:n}),(0,i.jsx)("span",{className:yt,children:"by "}),(0,i.jsx)("span",{className:mt,title:e.col,children:null!==(t=e.scaleBy)&&void 0!==t?t:e.col}),r&&a&&(0,i.jsx)(St,{...e}),r&&o&&(0,i.jsx)(Ot,{...e}),r&&"category"===e.scale&&(0,i.jsx)(Ct,{...e})]})}const St=({ticks:e,scaleData:t})=>{const n=e.map(((e,t)=>t)).slice(1,-1),r=jt*(e.length-1),a=r+11+1;return(0,i.jsxs)("svg",{className:bt,height:a,shapeRendering:"crispEdges",children:[(0,i.jsxs)("svg",{y:5,children:[(0,i.jsx)("image",{width:20,height:r,href:Mt(t),preserveAspectRatio:"none"}),n.map((e=>(0,i.jsx)("line",{className:wt,x2:20,y1:jt*e,y2:jt*e},e)))]}),(0,i.jsx)(Pt,{ticks:e,y:-2})]})},Ot=({ticks:e,range:t})=>{const n=t.map(pe),r=jt*(e.length-1)+11+1;return(0,i.jsxs)("svg",{className:bt,height:r,shapeRendering:"crispEdges",children:[(0,i.jsx)("svg",{y:5,children:n.map(((e,t)=>(0,i.jsx)("rect",{width:20,height:jt,y:t*jt,fill:e},t)))}),(0,i.jsx)(Pt,{ticks:e,y:-2})]})};function Ct({ticks:e,range:t,unknownTick:n,unknown:r}){const a=n?[...t,r]:t,o=n?[...e,n]:e,s=a.map(pe),l=jt*o.length;return(0,i.jsxs)("svg",{className:bt,height:l,children:[(0,i.jsx)("svg",{children:s.map(((e,t)=>(0,i.jsx)("rect",{width:20,height:14,y:1+t*jt,fill:e},t)))}),(0,i.jsx)(Pt,{ticks:o})]})}function Pt({ticks:e,x:t=28,y:n=0}){return(0,i.jsx)("svg",{x:t,y:n,children:e.map(((e,t)=>(0,i.jsx)("text",{className:vt,y:jt*t,dy:11,children:String(e)},t)))})}function Mt(e,t=200){const n=e.range().length,r=[...Array(n).keys()].map((e=>e/(n-1))),i=e.copy().range(r).invert,a=document.createElement("canvas"),o=a.getContext("2d");a.width=1,a.height=t;for(let n=0;n<t;n++)o.fillStyle=pe(e(i(n/t))),o.fillRect(0,n,1,1);return a.toDataURL()}var Nt=n(7046),Tt=n(6533),_t=n(9292),Et=n(9744),At=n(1610),Zt=n(904),Ft=n(5482),Dt=n(7226),Rt=n(5579),It=n(9702),Ht=n(2149),Wt=n(6761);const Gt="S_Jw5xlS4ysjLfEnG1_V",Ut="ulA2RQmkQhSnak9JlXnZ",Vt="aIE33mXFqOBosVEFBrb8",zt="llmi5hyDHtcHqa2r__su",Bt="ilhkc5o5ZlSd4IaGytLF",$t=()=>{};function qt({mode:e="view",geojson:t,selectedFeatureIndices:n,setMode:r=$t,download:a=$t,upload:o=$t,deleteSelected:s=$t}){const l=0!==(null==n?void 0:n.length);return(0,i.jsxs)("div",{className:Gt,children:[(0,i.jsxs)("div",{className:Ut,children:[(0,i.jsx)(Jt,{name:"View",icon:Zt.Z,iconStyle:{transform:"scale(0.9)"},active:"view"===e,onClick:()=>r("view")}),(0,i.jsx)(Jt,{name:"Select",icon:Ft.Z,active:"select"===e,onClick:()=>r("select")})]}),(0,i.jsxs)("div",{className:Ut,children:[(0,i.jsx)(Jt,{name:"Modify",icon:_t.Z,active:"modify"===e,disabled:!l,onClick:()=>r("modify")}),(0,i.jsx)(Jt,{name:"Transform",icon:Dt.Z,active:"transform"===e,disabled:!l,onClick:()=>r("transform")}),(0,i.jsx)(Jt,{name:"Point",icon:Rt.Z,active:"point"===e,onClick:()=>r("point")}),(0,i.jsx)(Jt,{name:"LineString",icon:Et.Z,active:"linestring"===e,onClick:()=>r("linestring")}),(0,i.jsx)(Jt,{name:"Polygon",icon:Tt.Z,active:"polygon"===e,onClick:()=>r("polygon")}),(0,i.jsx)(Jt,{name:"Lasso",icon:Nt.Z,active:"lasso"===e,onClick:()=>r("lasso")})]}),(0,i.jsxs)("div",{className:Ut,children:[(0,i.jsx)(Jt,{name:"Download",icon:It.Z,onClick:()=>a(t)}),(0,i.jsx)(Jt,{name:"Upload",icon:Ht.Z,onClick:()=>o(t)})]}),(0,i.jsx)("div",{className:Ut,children:(0,i.jsx)(Jt,{name:"Delete",icon:Wt.Z,disabled:!l,onClick:()=>s(n)})})]})}function Jt({name:e,onClick:t=$t,disabled:n=!1,active:r=!1,icon:a,iconStyle:o}){const s=m(Vt,r?zt:null);return(0,i.jsx)("button",{className:s,onClick:t,title:e,disabled:n,children:a&&(0,i.jsx)(At.Z,{component:a,className:Bt,fontSize:"small",style:o})})}const Yt="rdeck",Qt="XTuYKSlBcC933W4sKWtC",Xt="kQnelQ4hkAJEJHLO0NJI",Kt="hQbOOdEZw0LO0llGKVqS",en="cSol54mlVTgAnRzj_GUM";function tn({theme:e,deckgl:t,mapgl:n,layers:r,lazyLoad:a=!1,layerSelector:s=!1,onLayerVisibilityChange:l,editor:c}){var u;const d=null!==(u=null==r?void 0:r.map(He.create))&&void 0!==u?u:[],f=(0,o.useRef)(null),h=function(e,t){const[n,r]=(0,o.useState)(!1);return(0,o.useEffect)((()=>{if(t&&e.current){const t=new IntersectionObserver((e=>{r(e[0].isIntersecting)}),{threshold:0});return t.observe(e.current),()=>t.disconnect()}}),[t,e]),n}(f,a),p=!a||h;return(0,i.jsxs)("div",{ref:f,className:m(Yt,e),children:[(0,i.jsx)("div",{className:m(Qt,Xt),children:s&&(0,i.jsx)(st,{layers:d.filter((e=>e.props.visibilityToggle)).map((e=>e.renderSelector())).reverse(),onVisibilityChange:l})}),(0,i.jsx)("div",{className:m(Qt,Kt),children:(0,i.jsx)(xt,{layers:d.filter((e=>e.props.visible)).map((e=>e.renderLegend())).reverse()})}),(0,i.jsx)("div",{className:m(Qt,en),children:c&&(0,i.jsx)(qt,{...c})}),p&&(0,i.jsx)(ae,{deckgl:t,mapgl:n,layers:d,editor:c})]})}var nn=n(6935);function rn(e){const t=e instanceof nn.Z?e:new nn.Z(e),n=h(t,"longitude","latitude","zoom","bearing","pitch","altitude");return{bounds:t.getBounds(),viewState:{...n,center:t.unprojectFlat(t.center)}}}function an(e,t){const n=(e,n)=>null==t?void 0:t({[e]:n}),r=(e,t,{value:r})=>Reflect.defineProperty(e,t,{enumerable:!0,configurable:!1,get:()=>r,set(e){Object.is(e,r)||(r=e,n(t,e))}}),i=(e,t,r)=>Reflect.defineProperty(e,t,{...r,enumerable:!0,configurable:!1,set(i){var a,o;const s=null===(a=r.get)||void 0===a?void 0:a.call(e);Object.is(i,s)||(null===(o=r.set)||void 0===o||o.call(e,i),n(t,i))}}),a=e=>Object.entries(Object.getOwnPropertyDescriptors(e));for(const[t,n]of a(e))n.configurable&&n.writable&&r(e,t,n);for(const[t,n]of a(Object.getPrototypeOf(e)))"function"==typeof n.set&&i(e,t,n);return e}var on,sn,ln,cn,un=function(e,t,n,r){if("a"===n&&!r)throw new TypeError("Private accessor was defined without a getter");if("function"==typeof t?e!==t||!r:!t.has(e))throw new TypeError("Cannot read private member from an object whose class did not declare it");return"m"===n?r:"a"===n?r.call(e):r?r.value:t.get(e)},dn=function(e,t,n,r,i){if("m"===r)throw new TypeError("Private method is not writable");if("a"===r&&!i)throw new TypeError("Private accessor was defined without a setter");if("function"==typeof t?e!==t||!i:!t.has(e))throw new TypeError("Cannot write private member to an object whose class did not declare it");return"a"===r?i.call(e,n):i?i.value=n:t.set(e,n),n};const fn={longitude:0,latitude:0,zoom:0,pitch:0,bearing:0};class hn{constructor(e){Object.defineProperty(this,"useDevicePixels",{enumerable:!0,configurable:!0,writable:!0,value:void 0}),Object.defineProperty(this,"pickingRadius",{enumerable:!0,configurable:!0,writable:!0,value:void 0}),Object.defineProperty(this,"blendingMode",{enumerable:!0,configurable:!0,writable:!0,value:void 0}),Object.defineProperty(this,"effects",{enumerable:!0,configurable:!0,writable:!0,value:void 0}),Object.defineProperty(this,"controller",{enumerable:!0,configurable:!0,writable:!0,value:void 0}),Object.defineProperty(this,"initialViewState",{enumerable:!0,configurable:!0,writable:!0,value:fn}),Object.defineProperty(this,"initialBounds",{enumerable:!0,configurable:!0,writable:!0,value:void 0}),Object.defineProperty(this,"onViewStateChange",{enumerable:!0,configurable:!0,writable:!0,value:void 0}),Object.defineProperty(this,"onClick",{enumerable:!0,configurable:!0,writable:!0,value:void 0}),Object.assign(this,e)}}class pn{constructor(e){Object.defineProperty(this,"mapboxAccessToken",{enumerable:!0,configurable:!0,writable:!0,value:void 0}),Object.defineProperty(this,"mapStyle",{enumerable:!0,configurable:!0,writable:!0,value:void 0}),Object.defineProperty(this,"reuseMaps",{enumerable:!0,configurable:!0,writable:!0,value:!0}),Object.assign(this,e)}}const gn=Object.freeze({type:"FeatureCollection",features:[]});class yn{constructor(e){Object.defineProperty(this,"mode",{enumerable:!0,configurable:!0,writable:!0,value:"view"}),Object.defineProperty(this,"geojson",{enumerable:!0,configurable:!0,writable:!0,value:gn}),Object.defineProperty(this,"selectedFeatureIndices",{enumerable:!0,configurable:!0,writable:!0,value:[]}),Object.defineProperty(this,"upload",{enumerable:!0,configurable:!0,writable:!0,value:void 0}),Object.assign(this,e),this.setMode=this.setMode.bind(this),this.selectFeatures=this.selectFeatures.bind(this),this.setGeoJson=this.setGeoJson.bind(this),this.deleteSelected=this.deleteSelected.bind(this),this.download=this.download.bind(this)}setMode(e){this.mode=e}selectFeatures(e){this.selectedFeatureIndices=e}setGeoJson(e){this.geojson=e}deleteSelected(e=[0]){const t=this.geojson.features.filter(((t,n)=>!e.includes(n)));Object.assign(this,{mode:["modify","transform"].includes(this.mode)?"view":this.mode,selectedFeatureIndices:[],geojson:{...this.geojson,features:t}})}download(e){const t=new Blob([JSON.stringify(e)],{type:"application/geo+json"}),n=document.createElement("a");n.href=URL.createObjectURL(t),n.download="rdeck.geojson",n.click()}}class mn{constructor(e={},t){Object.defineProperty(this,"theme",{enumerable:!0,configurable:!0,writable:!0,value:"kepler"}),on.set(this,new hn),sn.set(this,new pn),Object.defineProperty(this,"layers",{enumerable:!0,configurable:!0,writable:!0,value:[]}),Object.defineProperty(this,"layerSelector",{enumerable:!0,configurable:!0,writable:!0,value:!1}),Object.defineProperty(this,"lazyLoad",{enumerable:!0,configurable:!0,writable:!0,value:!1}),ln.set(this,null),Object.defineProperty(this,"onChange",{enumerable:!0,configurable:!0,writable:!0,value:void 0}),cn.set(this,(()=>{var e;return null===(e=this.onChange)||void 0===e?void 0:e.call(this)})),this.setState(e),Reflect.defineProperty(this,"onChange",{configurable:!1,enumerable:!1,value:t,writable:!0}),this.setLayerVisibility=this.setLayerVisibility.bind(this),an(this,un(this,cn,"f"))}get deckgl(){return un(this,on,"f")}set deckgl(e){dn(this,on,an(new hn(e),un(this,cn,"f")),"f")}get mapgl(){return un(this,sn,"f")}set mapgl(e){dn(this,sn,an(new pn(e),un(this,cn,"f")),"f")}get editor(){return un(this,ln,"f")}set editor(e){dn(this,ln,null!=e?an(new yn(e),un(this,cn,"f")):null,"f")}setState({deckgl:e,mapgl:t,editor:n,...r}={}){Object.assign(this,{...r,deckgl:{...this.deckgl,...e},mapgl:{...this.mapgl,...t}}),void 0!==n&&(this.editor=null!=n?{...this.editor,...n}:null)}upsertLayer(e){var t,n,r;const i=this.layers.find((t=>t.id===e.id));if(null==i)return void(this.layers=[...this.layers,e]);const a={...i,...e,visible:null!==(t=e.visible)&&void 0!==t?t:null==i?void 0:i.visible,data:null!==(r=null!==(n=e.data)&&void 0!==n?n:null==i?void 0:i.data)&&void 0!==r?r:null};this.layers=this.layers.map((e=>e===i?a:e))}setLayerVisibility(e){if(0===e.length)return;this.layers=this.layers.map((t=>{const n=e.find((e=>((e,t)=>{const n=e.name===t.name,r=e.groupName===t.groupName;return n&&r||null==e.name&&null!=e.groupName&&r})(e,t)&&e.visible!==t.visible));return n?{...t,visible:n.visible}:t}))}}on=new WeakMap,sn=new WeakMap,ln=new WeakMap,cn=new WeakMap;var bn,vn,wn,jn,xn,Ln,kn=function(e,t,n,r,i){if("m"===r)throw new TypeError("Private method is not writable");if("a"===r&&!i)throw new TypeError("Private accessor was defined without a setter");if("function"==typeof t?e!==t||!i:!t.has(e))throw new TypeError("Cannot write private member to an object whose class did not declare it");return"a"===r?i.call(e,n):i?i.value=n:t.set(e,n),n},Sn=function(e,t,n,r){if("a"===n&&!r)throw new TypeError("Private accessor was defined without a getter");if("function"==typeof t?e!==t||!r:!t.has(e))throw new TypeError("Cannot read private member from an object whose class did not declare it");return"m"===n?r:"a"===n?r.call(e):r?r.value:t.get(e)};class On{constructor(e,t){bn.set(this,void 0),vn.set(this,void 0),wn.set(this,void 0),jn.set(this,((e,t)=>{var n,r,i;if(null===(r=(n=Sn(this,wn,"f").deckgl).onClick)||void 0===r||r.call(n,e,t),HTMLWidgets.shinyMode){const t={coordinate:e.coordinate,...rn(e.viewport),layer:h(null===(i=e.layer)||void 0===i?void 0:i.props,"id","name","groupName"),object:C(e)};Shiny.setInputValue(`${this.element.id}_click`,t,{priority:"event"})}})),xn.set(this,(e=>{var t,n;if(null===(n=(t=Sn(this,wn,"f").deckgl).onViewStateChange)||void 0===n||n.call(t,e),HTMLWidgets.shinyMode){const t=rn(e.viewState);Shiny.setInputValue(`${this.element.id}_viewstate`,t,{priority:"event"})}})),Ln.set(this,(e=>{HTMLWidgets.shinyMode&&Shiny.setInputValue(`${this.element.id}_editorupload`,{geojson:JSON.stringify(e)})})),kn(this,vn,e,"f"),kn(this,bn,(0,a.s)(e),"f"),kn(this,wn,new mn(t,(()=>this.render())),"f"),HTMLWidgets.shinyMode&&(Shiny.addCustomMessageHandler(`${e.id}:layer`,(e=>{this.state.upsertLayer(e)})),Shiny.addCustomMessageHandler(`${e.id}:deck`,(e=>{this.state.setState(e)})))}get element(){return Sn(this,vn,"f")}get state(){return Sn(this,wn,"f")}render(){let{deckgl:e,mapgl:t,editor:n,...r}=Sn(this,wn,"f");e={...e,onClick:Sn(this,jn,"f"),onViewStateChange:Sn(this,xn,"f")},null!=n&&(n={...n,upload:Sn(this,Ln,"f")}),null!=e.initialBounds&&delete e.initialViewState,Sn(this,bn,"f").render((0,i.jsx)(o.StrictMode,{children:(0,i.jsx)(tn,{...{...r,deckgl:e,mapgl:t,editor:n,onLayerVisibilityChange:this.state.setLayerVisibility}})}))}setLayerVisibility(e){return Sn(this,wn,"f").setLayerVisibility(e)}}bn=new WeakMap,vn=new WeakMap,wn=new WeakMap,jn=new WeakMap,xn=new WeakMap,Ln=new WeakMap;const Cn={name:"rdeck",type:"output",factory(e,t,n){let r=null;return{get instance(){return r},renderValue(t){r=new On(e,t),r.render()},resize(){}}}};function Pn(e){const t=document.getElementById(e);return t&&Nn(t)}function Mn(){return[...document.querySelectorAll(".rdeck.html-widget")].map((e=>Nn(e))).filter((e=>e instanceof On))}function Nn(e){var t;return null===(t=null==e?void 0:e.htmlwidget_data_init_result)||void 0===t?void 0:t.instance}HTMLWidgets.widget(Cn);const Tn="0.4.0"},479:()=>{},9125:()=>{},9214:()=>{}},i={};function a(e){var t=i[e];if(void 0!==t)return t.exports;var n=i[e]={exports:{}};return r[e].call(n.exports,n,n.exports,a),n.exports}a.m=r,e=[],a.O=(t,n,r,i)=>{if(!n){var o=1/0;for(u=0;u<e.length;u++){for(var[n,r,i]=e[u],s=!0,l=0;l<n.length;l++)(!1&i||o>=i)&&Object.keys(a.O).every((e=>a.O[e](n[l])))?n.splice(l--,1):(s=!1,i<o&&(o=i));if(s){e.splice(u--,1);var c=r();void 0!==c&&(t=c)}}return t}i=i||0;for(var u=e.length;u>0&&e[u-1][2]>i;u--)e[u]=e[u-1];e[u]=[n,r,i]},a.n=e=>{var t=e&&e.__esModule?()=>e.default:()=>e;return a.d(t,{a:t}),t},n=Object.getPrototypeOf?e=>Object.getPrototypeOf(e):e=>e.__proto__,a.t=function(e,r){if(1&r&&(e=this(e)),8&r)return e;if("object"==typeof e&&e){if(4&r&&e.__esModule)return e;if(16&r&&"function"==typeof e.then)return e}var i=Object.create(null);a.r(i);var o={};t=t||[null,n({}),n([]),n(n)];for(var s=2&r&&e;"object"==typeof s&&!~t.indexOf(s);s=n(s))Object.getOwnPropertyNames(s).forEach((t=>o[t]=()=>e[t]));return o.default=()=>e,a.d(i,o),i},a.d=(e,t)=>{for(var n in t)a.o(t,n)&&!a.o(e,n)&&Object.defineProperty(e,n,{enumerable:!0,get:t[n]})},a.g=function(){if("object"==typeof globalThis)return globalThis;try{return this||new Function("return this")()}catch(e){if("object"==typeof window)return window}}(),a.o=(e,t)=>Object.prototype.hasOwnProperty.call(e,t),a.r=e=>{"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(e,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(e,"__esModule",{value:!0})},(()=>{var e={472:0};a.O.j=t=>0===e[t];var t=(t,n)=>{var r,i,[o,s,l]=n,c=0;if(o.some((t=>0!==e[t]))){for(r in s)a.o(s,r)&&(a.m[r]=s[r]);if(l)var u=l(a)}for(t&&t(n);c<o.length;c++)i=o[c],a.o(e,i)&&e[i]&&e[i][0](),e[i]=0;return a.O(u)},n=self.webpackChunkrdeck=self.webpackChunkrdeck||[];n.forEach(t.bind(null,0)),n.push=t.bind(null,n.push.bind(n))})();var o=a.O(void 0,[486,474,619,315,568,175,627,977,811,42,899,667,324,134,133,468,745,535,528,783,784,485,378,645,394,816,650,869,706,836,458,769,67,806,551,282,953,538,49,844,639,825,596],(()=>a(4338)));return o=a.O(o)})()));
//# sourceMappingURL=data:application/json;charset=utf-8;base64,