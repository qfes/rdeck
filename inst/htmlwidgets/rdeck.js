!function(e,t){"object"==typeof exports&&"object"==typeof module?module.exports=t():"function"==typeof define&&define.amd?define([],t):"object"==typeof exports?exports.rdeck=t():e.rdeck=t()}(self,(()=>(()=>{var e,t,n,r={7170:(e,t,n)=>{"use strict";n.r(t),n.d(t,{VERSION:()=>Rt,Widget:()=>Mt,binding:()=>Et,getWidgetById:()=>At,getWidgets:()=>Zt});var r={};n.r(r),n.d(r,{AGGREGATION_OPERATION:()=>z.KM,ArcLayer:()=>I.zv,BitmapLayer:()=>I.hz,CPUGridLayer:()=>z.ab,ColumnLayer:()=>I.eJ,ContourLayer:()=>z.YY,GPUGridLayer:()=>z.ML,GeoJsonLayer:()=>I.UW,GreatCircleLayer:()=>U.GJ,GridCellLayer:()=>I.cJ,GridLayer:()=>z.mU,H3ClusterLayer:()=>U.cH,H3HexagonLayer:()=>U.bW,HeatmapLayer:()=>z.zP,HexagonLayer:()=>z.dX,IconLayer:()=>I.eE,LineLayer:()=>I.Ie,MVTLayer:()=>U.i3,PathLayer:()=>I.nr,PointCloudLayer:()=>I.U5,PolygonLayer:()=>I.dW,QuadkeyLayer:()=>U._k,S2Layer:()=>U.jJ,ScatterplotLayer:()=>I.pU,ScenegraphLayer:()=>F.S,ScreenGridLayer:()=>z.p3,SimpleMeshLayer:()=>F.L,SolidPolygonLayer:()=>I.PJ,TerrainLayer:()=>U.tr,TextLayer:()=>I.AB,Tile3DLayer:()=>U.cY,TileLayer:()=>U.Im,TripsLayer:()=>U.Fw,_AggregationLayer:()=>z.Di,_BinSorter:()=>z.l0,_CPUAggregator:()=>z.oA,_GPUGridAggregator:()=>z.Wc,_MultiIconLayer:()=>I.vb,_TextBackgroundLayer:()=>I._k,_getURLFromTemplate:()=>U.po});n(8559);var i=n(5893),a=n(745),o=n(7294),s=(n(6158),n(2687),n(8202)),l=n(6024),c=n(3295),u=n(17),d=n(7244),f=n(7682);function h(e,...t){if(null==e)return null;const n=t.map((t=>[t,e[t]]));return Object.fromEntries(n)}function p(e){return e.clientHeight>0&&e.clientHeight>0?e:e.parentElement?p(e.parentElement):null}function g(e){const t=p(e);if(e===t||null==t)return{width:e.clientWidth,height:e.clientHeight};const{width:n,height:r}=getComputedStyle(e),i=document.createElement("div");Object.assign(i.style,{width:n,height:r,display:"hidden"}),t.appendChild(i);const a={width:i.clientWidth,height:i.clientHeight};return t.removeChild(i),a}function y(e,t){const n=new Map;for(const r of e){const e=t(r);n.has(e)?n.get(e).push(r):n.set(e,[r])}return n}function m(...e){return e.filter((e=>null!=e)).join(" ")}class b{constructor(){Object.defineProperty(this,"_val",{enumerable:!0,configurable:!0,writable:!0,value:new Map}),Object.defineProperty(this,"_ref",{enumerable:!0,configurable:!0,writable:!0,value:new WeakMap})}getStore(e){return"object"==typeof(t=e)&&null!==t||"function"==typeof t?this._ref:this._val;var t}has(e){return this.getStore(e).has(e)}get(e){return this.getStore(e).get(e)}set(e,t){return this.getStore(e).set(e,t),this}}function v(e){const t=new b;return(...n)=>{const r=n[0],i=n.slice(0,-1).reduceRight(((e,t)=>{if(e.has(t))return e.get(t);const n=new b;return e.set(t,n),n}),t);if(i.has(r))return i.get(r);const a=e(...n);return i.set(r,a),a}}class w extends d.Z{setProps(e){const t=e.initialBounds;if(null!=t&&(n=t,r=this.props.initialBounds,!(n===r||null==n&&null==r||null!=n&&null!=r&&(null==n?void 0:n.every(((e,t)=>e===(null==r?void 0:r[t]))))))){const[n,r,i,a]=t,o=[[Math.max(n,-180),Math.max(r,-85.051129)],[Math.min(i,180),Math.min(a,85.051129)]];this._setCanvasSize(e);const{width:s,height:l}=this._getMapSize();e={...e,initialViewState:{...(0,f.Xg)({height:l,width:s,bounds:o}),bearing:0,pitch:0}}}var n,r;super.setProps(e)}_getMapSize(){const e=this.canvas;if(null==e)return{width:this.width,height:this.height};if(0===e.clientWidth&&0===e.clientHeight){const t=e.closest(".rdeck.html-widget");if(null!=t)return g(t)}return{width:e.clientWidth,height:e.clientHeight}}}function j(e){return null!==e&&"object"==typeof e&&"frame"in e}function x(e,{name:t,type:n}){var r,i,a,o;const s=e.frame,l=Object.fromEntries(Object.entries(s).map((([e])=>[e,[]]))),c=Object.keys(e.frame).filter((e=>e!==t)),u=s[t],d=function(e){switch(e){case"MULTIPOINT":return k;case"MULTILINESTRING":return L;case"MULTIPOLYGON":return O;default:throw TypeError(`${e} not supported`)}}(n),f=e=>{for(const t of c)l[t].push(s[t][e])},h=[];for(let n=0;n<e.length;n++){const s=u[n];if(d(s)){l[t].push(...s);for(let t=0;t<s.length;t++)f(n),h.push(null!==(i=null===(r=e.indices)||void 0===r?void 0:r[n])&&void 0!==i?i:n)}else l[t].push(s),f(n),h.push(null!==(o=null===(a=e.indices)||void 0===a?void 0:a[n])&&void 0!==o?o:n)}return{length:l[t].length,geometry:{...e.geometry,[t]:n.replace("MULTI","")},indices:h,frame:l}}function k(e){return Array.isArray(null==e?void 0:e[0])}function L(e){var t;return Array.isArray(null===(t=null==e?void 0:e[0])||void 0===t?void 0:t[0])}function O(e){var t,n;return Array.isArray(null===(n=null===(t=null==e?void 0:e[0])||void 0===t?void 0:t[0])||void 0===n?void 0:n[0])}Object.defineProperty(w,"defaultProps",{enumerable:!0,configurable:!0,writable:!0,value:{...d.Z.defaultProps,initialBounds:null}});const S=".feature_id";function N(e,t=null){if(!e.picked)return null;null==t&&(t=function({object:e,layer:t}){return!j(t.props.data)||t instanceof c.Z?function(e){return"Feature"===(null==e?void 0:e.type)&&"geometry"in e&&"type"in e.geometry}(e)?"geojson":"object":"table"}(e));const n=function(e){switch(e){case"table":return(e,{index:t,data:n})=>{const r=Object.keys(n.geometry),i={};for(const[e,a]of Object.entries(n.frame))r.includes(e)||(i[e]=a[t]);return i};case"object":return e=>({...e});case"geojson":return e=>({[S]:null==e?void 0:e.id,...null==e?void 0:e.properties});default:throw TypeError(`${e} not supported`)}}(t),{object:r,index:i}=e;return n(r,{index:i,data:e.layer.props.data})}const P="cyWLt4_G7nk5vT9hPr0o",C="Z9hHHet2RXmL0iMel3Zt",T="jp658yEHLlesSRvwBwDl",_="t9I8kJyjeEJEOArvMD7j",M="vovHpTur01BROrMLmEFz";function E({info:e}){if(!e.picked||null==e.layer.props.tooltip)return null;const{x:t,y:n}=e,{name:r,tooltip:a}=e.layer.props,o=N(e,a.dataType);delete o[S];const s=!0===a.cols?Object.keys(o):a.cols;return(0,i.jsxs)("div",{className:P,style:{transform:`translate(${t}px, ${n}px)`},children:[(0,i.jsx)("div",{className:C,children:r}),(0,i.jsx)("table",{className:T,children:(0,i.jsx)("tbody",{children:s.map((e=>{var t;return(0,i.jsxs)("tr",{children:[(0,i.jsx)("td",{className:_,children:e}),(0,i.jsx)("td",{className:M,children:String(null!==(t=o[e])&&void 0!==t?t:null)})]},e)}))})})]})}var A=n(9757);const Z=Object.freeze({additive:{[A.Z.BLEND]:!0,blendFunc:[A.Z.SRC_ALPHA,A.Z.DST_ALPHA],blendEquation:A.Z.FUNC_ADD},subtractive:{[A.Z.BLEND]:!0,blendFunc:[A.Z.ONE,A.Z.ONE_MINUS_DST_COLOR,A.Z.SRC_ALPHA,A.Z.DST_ALPHA],blendEquation:[A.Z.FUNC_SUBTRACT,A.Z.FUNC_ADD]},normal:{[A.Z.BLEND]:!0,blendFunc:[A.Z.SRC_ALPHA,A.Z.ONE_MINUS_SRC_ALPHA,A.Z.ONE,A.Z.ONE_MINUS_SRC_ALPHA],blendEquation:[A.Z.FUNC_ADD,A.Z.FUNC_ADD]}});function D(e="normal"){var t;return null!==(t=Z[e])&&void 0!==t?t:Z.normal}function R({deckgl:e,mapgl:t,layers:n}){const r=(0,o.useRef)(null),[a,c]=W(),{controller:d,blendingMode:f,...h}=e,p={...e.parameters,...f&&D(f)},[g,y]=(0,o.useState)(0),m=n.some((e=>"TripsLayer"===e.type));H(m,(e=>y(e)));const b=n.map((e=>null!=e.type?e.renderLayer(g):null));return(0,i.jsxs)(o.Fragment,{children:[(0,i.jsx)(l.Z,{Deck:w,ref:r,...h,parameters:p,layers:b,onHover:c,children:(0,i.jsx)(s.Z,{id:"map",controller:d,repeat:!0,children:t.mapStyle&&(0,i.jsx)(u.D5,{...t})})}),a&&(0,i.jsx)(E,{info:a})]})}const W=()=>{const[e,t]=(0,o.useState)(null);return[e,(0,o.useCallback)((e=>{if(!e.picked||!e.layer.props.tooltip||e.layer instanceof c.Z)return t(null);t(e)}),[])]},H=(e,t)=>{const n=(0,o.useRef)(0),r=(0,o.useRef)(Date.now()),i=()=>{t(Date.now()-r.current),n.current=window.requestAnimationFrame(i)};(0,o.useEffect)((()=>{if(e)return n.current=window.requestAnimationFrame(i),()=>window.cancelAnimationFrame(n.current)}),[e])};var I=n(7786),z=n(9080),U=n(803),F=n(1956),B=n(5395);const V=[0,0,0,255];function G([e,t,n,r=255]){return`rgba(${e}, ${t}, ${n}, ${r/255})`}function $(e,t){return Array.isArray(e)?t||4!==e.length?((t=null!=t?t:[])[0]=e[0],t[1]=e[1],t[2]=e[2],t[3]=3===e.length?e[3]:255,t):e:"string"==typeof e?(function(e,t){if(7===e.length){const n=parseInt(e.substring(1),16);t[0]=Math.floor(n/65536),t[1]=Math.floor(n/256%256),t[2]=n%256,t[3]=255}else if(9===e.length){const n=parseInt(e.substring(1),16);t[0]=Math.floor(n/16777216),t[1]=Math.floor(n/65536%256),t[2]=Math.floor(n/256%256),t[3]=n%256}}(e,t=null!=t?t:[]),t):V}var q=n(4634),J=n(4177),Y=n(458),K=n(5801),X=n(3613),Q=n(602),ee=n(8973),te=n(2625);function ne(e){return null!==e&&"object"==typeof e&&"accessor"===e.type}function re(e){return ne(e)&&"scale"in e}var ie=n(3693),ae=n(4717),oe=n(6867),se=n(3326),le=n(2112),ce=n(7693),ue=n(8569),de=n(1435);class fe extends ie.Z{initializeState(){if(!function(e){return he.some((t=>e instanceof t))}(this))return;const e=this,t=e.getAttributeManager();t&&t.addInstanced({pickingColors:{type:A.Z.UNSIGNED_BYTE,size:3,accessor:(t,{index:n,data:r,target:i})=>{var a,o,s;if(j(r)&&Array.isArray(r.indices))return e.encodePickingColor(r.indices.indexOf(r.indices[n]),i);const l=null===(o=null===(a=null==t?void 0:t.__source)||void 0===a?void 0:a.parent)||void 0===o?void 0:o.props.data;return j(l)&&Array.isArray(l.indices)?e.encodePickingColor(l.indices.indexOf(l.indices[t.__source.index]),i):e.encodePickingColor(null!==(s=null==t?void 0:t.__source.index)&&void 0!==s?s:n,i)},shaderAttributes:{pickingColors:{divisor:0},instancePickingColors:{divisor:1}}}})}}const he=[ae.Z,oe.Z,se.Z,le.Z,ce.Z,ue.Z,de.Z];const pe=v((function(e){const t=function(e){return Object.entries(e.geometry).filter((([,e])=>/MULTI/.test(e))).map((([e,t])=>({name:e,type:t})))}(e);return 0===t.length?e:t.reduce(x,e)})),ge=v($),ye=v((function(e,t){const n=function({col:e,dataType:t},n){if("highlightColor"===n)switch(t){case"table":return function(e){return({index:t,layer:n})=>$(n.props.data.frame[e][t])}(e);case"object":return function(e){return({object:t})=>$(t[e])}(e);case"geojson":return function(e){return({object:t})=>$(t.properties[e])}(e);default:throw TypeError(`${t} not supported`)}if(n.endsWith("Color"))switch(t){case"table":return function(e){return(t,{index:n,data:r,target:i})=>$(r.frame[e][n],i)}(e);case"object":return function(e){return(t,{target:n})=>$(t[e],n)}(e);case"geojson":return function(e){return(t,{target:n})=>$(t.properties[e],n)}(e);default:throw TypeError(`${t} not supported`)}switch(t){case"table":return function(e){return(t,{index:n,data:r})=>r.frame[e][n]}(e);case"object":return function(e){return t=>t[e]}(e);case"geojson":return function(e){return t=>t.properties[e]}(e);default:throw TypeError(`${t} not supported`)}}(e,t);return{...e,getData:n}})),me=v((function(e,t){"palette"in e&&(e.range=e.palette.map((e=>$(e))),e.unknown=$(e.unknown));const n=function(e){switch(e.scale){case"linear":return(0,q.Z)().domain(e.domain).range(e.range).unknown(e.unknown).clamp(!0);case"power":return(0,J.ZP)().exponent(e.exponent).domain(e.domain).range(e.range).unknown(e.unknown).clamp(!0);case"log":return(0,Y.Z)().base(e.base).domain(e.domain).range(e.range).unknown(e.unknown).clamp(!0);case"symlog":return(0,K.Z)().domain(e.domain).range(e.range).unknown(e.unknown).clamp(!0);case"identity":return(0,X.Z)().unknown(e.unknown);case"threshold":case"quantile":return(0,Q.Z)().domain(e.domain).range(e.range).unknown(e.unknown);case"category":return(0,ee.Z)().domain(e.domain).range(e.range).unknown(e.unknown);case"quantize":return(0,te.Z)().domain(e.domain).range(e.range).unknown(e.unknown);default:throw TypeError(`scale ${e.scale} not supported`)}}(e),r="highlightColor"===t?function({col:e,dataType:t},n){switch(t){case"table":return function(e,t){return({index:n,layer:r})=>t(r.props.data.frame[e][n])}(e,n);case"object":return function(e,t){return({object:n})=>t(n[e])}(e,n);case"geojson":return function(e,t){return({object:n})=>t(n.properties[e])}(e,n);default:throw TypeError(`${t} not supported`)}}(e,n):function({col:e,dataType:t},n){switch(t){case"table":return function(e,t){return(n,{index:r,data:i})=>t(i.frame[e][r])}(e,n);case"object":return function(e,t){return n=>t(n[e])}(e,n);case"geojson":return function(e,t){return n=>t(n.properties[e])}(e,n);default:throw TypeError(`${t} not supported`)}}(e,n);return{...e,name:t,getData:r,scaleData:n}}));class be{constructor({type:e,...t}){var n,r;Object.defineProperty(this,"type",{enumerable:!0,configurable:!0,writable:!0,value:void 0}),Object.defineProperty(this,"props",{enumerable:!0,configurable:!0,writable:!0,value:void 0}),Object.defineProperty(this,"scales",{enumerable:!0,configurable:!0,writable:!0,value:void 0});const i=Object.entries(t),a=function(e){const t=e.filter(ve).map((([e,t])=>[e,ge(t)])),n=e.find((([e])=>"colorRange"===e));n&&t.push([n[0],n[1].map((e=>ge(e)))]);return t}(i),o=function(e){return e.filter((([,e])=>ne(e))).map((([e,t])=>[e,re(t)?me(t,e):ye(t,e)]))}(i);this.type=e;const s=Object.fromEntries([...i,...a,...o.map((([e,t])=>[e,t.getData])),...je(i),["visible",null===(n=t.visible)||void 0===n||n],["updateTriggers",we(o)],["parameters",(l=t.parameters,c=t.blendingMode,{...l,...D(c)})]]);var l,c;j(s.data)&&(s.data=pe(s.data),s.extensions=[new fe,...null!==(r=s.extensions)&&void 0!==r?r:[]]),"TileLayer"===e&&(s.renderSubLayers=e=>{const{bbox:{west:t,south:n,east:r,north:i},x:a,y:o,z:s}=e.tile;return new B.Z({...e,data:[{z:s,x:a,y:o}],image:e.data,bounds:[t,n,r,i]})}),this.props=s,this.scales=o.filter((([,e])=>re(e))).map((([,e])=>e)),"TextLayer"===e&&"fonts"in document&&document.fonts.load(`16px ${t.fontFamily}`)}static create(e){return new be(e)}renderLayer(e){if("TripsLayer"===this.type&&void 0!==e){const t=this.props,{loopLength:n,animationSpeed:r}=t,i=n/r,a=e/1e3%i/i;t.currentTime=a*n}return new r[this.type]({...this.props})}renderLegend(){const e=this.scales.filter((e=>e.legend));return{id:this.props.id,name:this.props.name,scales:e}}renderSelector(){var e;return{id:this.props.id,groupName:this.props.groupName,name:this.props.name,visible:null===(e=this.props.visible)||void 0===e||e}}}function ve([e,t]){return e.endsWith("Color")&&(Array.isArray(t)||"string"==typeof t)}function we(e){const t=e=>{const{getData:t,scaleData:n,palette:r,...i}=e;return i},n=e.map((([e,n])=>[e,t(n)]));return Object.fromEntries(n)}function je(e){return e.filter((([e])=>"getColorWeight"===e||"getElevationWeight"===e)).filter((([,e])=>null!==e&&"function"!=typeof e&&!ne(e))).map((([e,t])=>[e,()=>t]))}var xe=n(6082),ke=n(912),Le=n(2372),Oe=n(8426);const Se="U44LhpKlV8r1Vu1ZoZA3",Ne="XF770nELUcE_0zxo_aOg",Pe="HYRhC2aw1PSMYGCz2bDb",Ce="YNou4FYlc3N3GhFp2BkO",Te="f44NGqZZGn4de9S3oTHN",_e="xqKP289MUJ06Hgb3CjoW",Me="XctZC_fZAMvRMiHPlt9G",Ee="ly9kEH8MpXynhBX6Fhcj",Ae="iM2OiMQz6z_NtAQZZyPS",Ze="_8r8348KPS_nzNLR_CV_",De="tzkFrkEU5cB_jY6zcuua",Re=Date.now();function We({className:e,tooltip:t,onClick:n,children:r}){return(0,i.jsx)("button",{className:e,type:"button",onClick:n,title:t,children:r})}function He({layers:e,onVisibilityChange:t}){const n=y(e,(e=>{var t;return null!==(t=e.groupName)&&void 0!==t?t:`${e.name}-${Re}`})),r=(n,r,i)=>{if(i){const i=!e.filter((e=>!n.includes(e))).some((e=>e.visible));return t(e.map((e=>({...e,visible:n.includes(e)?r:i}))))}t(n.map((e=>({...e,visible:r}))))},[a,s]=(0,o.useState)(!1),l=()=>s((e=>!e));return a?(0,i.jsxs)("div",{className:Ne,children:[(0,i.jsx)("div",{className:Pe,children:(0,i.jsxs)(We,{className:Ce,onClick:l,tooltip:"Close",children:[(0,i.jsx)(xe.Z,{className:De,fontSize:"small"}),(0,i.jsx)("span",{className:Te,children:"Layers"})]})}),(0,i.jsx)("div",{className:_e,children:Array.from(n.entries(),(([e,t,[{groupName:n}]=t])=>(0,i.jsx)(Ie,{group:n,layers:t,onChange:r},e)))})]}):(0,i.jsx)(We,{className:Se,tooltip:"Layer selector",onClick:l,children:(0,i.jsx)(xe.Z,{className:De,fontSize:"small"})})}function Ie({group:e,layers:t,onChange:n}){const r=Array.from(y(t,(e=>e.name)),(([e,t])=>(0,i.jsx)(ze,{name:e,layers:t,onChange:n},e)));return e?(0,i.jsxs)(o.Fragment,{children:[(0,i.jsx)(ze,{name:e,layers:t,onChange:n}),(0,i.jsx)("div",{className:Me,children:r})]}):(0,i.jsx)(o.Fragment,{children:r})}function ze({name:e,layers:t,onChange:n}){const r=function(e){let t=e[0].visible;for(const n of e)if(n.visible!==t)return null;return t}(t),a=null===r,s=(0,o.useRef)(null);(0,o.useEffect)((()=>{s.current&&(s.current.indeterminate=a)}),[a]);const l=(0,o.useRef)((()=>!1)),c=r?ke.Z:a?Le.Z:Oe.Z,u=m(Ee,r||a?Ae:null);return(0,i.jsxs)("label",{className:u,children:[(0,i.jsx)("input",{ref:s,className:Ze,type:"checkbox",onChange:()=>{l.current()?n(t,!0,!0):l.current=Ue((()=>n(t,!r,!1)),200)},checked:null==r||r}),(0,i.jsx)(c,{fontSize:"small",className:De}),(0,i.jsx)("span",{className:Te,children:e})]})}const Ue=(e,t=200)=>{const n={current:0};let r=0;const i=a=>{if(r||(r=a),a-r>t)return n.current=0,void e();n.current=globalThis.requestAnimationFrame(i)};return n.current=globalThis.requestAnimationFrame(i),()=>0!==n.current&&(globalThis.cancelAnimationFrame(n.current),n.current=0,!0)},Fe="lWOwchFb6W2NpcWR4ZQS",Be="mIJjIoOSsjLZMp591rN0",Ve="OULly07OGkLPRiEDgp00",Ge="oxctK5Tcknb3syUfT7xg",$e="KEbGPBIjLXnjAiUTu8eP",qe="MBBFrOSR5F_grZcyOCp0",Je="l_4PaMO7BWOn4DcLN5Oh",Ye="aWzYqDozdq6Vl4QuIJ1y",Ke="xaprV4ANDgRiE5ai1hUl",Xe="f6SnauerJY75ZqNAuK56",Qe=16;function et({layers:e}){return 0===e.length?null:(0,i.jsx)("div",{className:Fe,children:e.map((e=>(0,i.jsx)(tt,{...e},e.id)))})}function tt({name:e,scales:t}){return 0===t.length?null:(0,i.jsxs)("div",{className:Be,children:[(0,i.jsx)("div",{className:Ve,title:e,children:e}),t.map((e=>(0,i.jsx)(nt,{...e},e.name)))]})}function nt(e){var t;const n=e.name.replace(/^get/,"").replace(/([A-Z])/g," $1").toLowerCase();const r="palette"in e;const a=function(e){return"linear"===e.scale||"power"===e.scale||"log"===e.scale||"symlog"===e.scale}(e),o=function(e){return"threshold"===e.scale||"quantile"===e.scale||"quantize"===e.scale}(e);return(0,i.jsxs)("div",{className:Ge,children:[(0,i.jsx)("div",{className:$e,children:n}),(0,i.jsx)("span",{className:qe,children:"by "}),(0,i.jsx)("span",{className:Je,title:e.col,children:null!==(t=e.scaleBy)&&void 0!==t?t:e.col}),r&&a&&(0,i.jsx)(rt,{...e}),r&&o&&(0,i.jsx)(it,{...e}),r&&"category"===e.scale&&(0,i.jsx)(at,{...e})]})}const rt=({ticks:e,scaleData:t})=>{const n=e.map(((e,t)=>t)).slice(1,-1),r=Qe*(e.length-1),a=r+11+1;return(0,i.jsxs)("svg",{className:Ye,height:a,shapeRendering:"crispEdges",children:[(0,i.jsxs)("svg",{y:5,children:[(0,i.jsx)("image",{width:20,height:r,href:st(t),preserveAspectRatio:"none"}),n.map((e=>(0,i.jsx)("line",{className:Xe,x2:20,y1:Qe*e,y2:Qe*e},e)))]}),(0,i.jsx)(ot,{ticks:e,y:-2})]})},it=({ticks:e,range:t})=>{const n=t.map(G),r=Qe*(e.length-1)+11+1;return(0,i.jsxs)("svg",{className:Ye,height:r,shapeRendering:"crispEdges",children:[(0,i.jsx)("svg",{y:5,children:n.map(((e,t)=>(0,i.jsx)("rect",{width:20,height:Qe,y:t*Qe,fill:e},t)))}),(0,i.jsx)(ot,{ticks:e,y:-2})]})};function at({ticks:e,range:t,unknownTick:n,unknown:r}){const a=n?[...t,r]:t,o=n?[...e,n]:e,s=a.map(G),l=Qe*o.length;return(0,i.jsxs)("svg",{className:Ye,height:l,children:[(0,i.jsx)("svg",{children:s.map(((e,t)=>(0,i.jsx)("rect",{width:20,height:14,y:1+t*Qe,fill:e},t)))}),(0,i.jsx)(ot,{ticks:o})]})}function ot({ticks:e,x:t=28,y:n=0}){return(0,i.jsx)("svg",{x:t,y:n,children:e.map(((e,t)=>(0,i.jsx)("text",{className:Ke,y:Qe*t,dy:11,children:String(e)},t)))})}function st(e,t=200){const n=e.range().length,r=[...Array(n).keys()].map((e=>e/(n-1))),i=e.copy().range(r).invert,a=document.createElement("canvas"),o=a.getContext("2d");a.width=1,a.height=t;for(let n=0;n<t;n++)o.fillStyle=G(e(i(n/t))),o.fillRect(0,n,1,1);return a.toDataURL()}const lt="rdeck",ct="XTuYKSlBcC933W4sKWtC",ut="kQnelQ4hkAJEJHLO0NJI",dt="hQbOOdEZw0LO0llGKVqS";function ft({theme:e,deckgl:t,mapgl:n,layers:r,lazyLoad:a=!1,layerSelector:s=!1,onLayerVisibilityChange:l}){var c;const u=null!==(c=null==r?void 0:r.map(be.create))&&void 0!==c?c:[],d=(0,o.useRef)(null),f=function(e,t){const[n,r]=(0,o.useState)(!1);return(0,o.useEffect)((()=>{if(t&&e.current){const t=new IntersectionObserver((e=>{r(e[0].isIntersecting)}),{threshold:0});return t.observe(e.current),()=>t.disconnect()}}),[t,e]),n}(d,a),h=!a||f;return(0,i.jsxs)("div",{ref:d,className:m(lt,e),children:[(0,i.jsx)("div",{className:m(ct,ut),children:s&&(0,i.jsx)(He,{layers:u.filter((e=>e.props.visibilityToggle)).map((e=>e.renderSelector())).reverse(),onVisibilityChange:l})}),h&&(0,i.jsx)(R,{deckgl:t,mapgl:n,layers:u}),(0,i.jsx)("div",{className:m(ct,dt),children:(0,i.jsx)(et,{layers:u.filter((e=>e.props.visible)).map((e=>e.renderLegend())).reverse()})})]})}var ht=n(6935);function pt(e){const t=e instanceof ht.Z?e:new ht.Z(e),n=h(t,"longitude","latitude","zoom","bearing","pitch","altitude");return{bounds:t.getBounds(),viewState:{...n,center:t.unprojectFlat(t.center)}}}function gt(e,t){const n=(e,n)=>null==t?void 0:t({[e]:n}),r=(e,t,{value:r})=>Reflect.defineProperty(e,t,{enumerable:!0,configurable:!1,get:()=>r,set(e){Object.is(e,r)||(r=e,n(t,e))}}),i=(e,t,r)=>Reflect.defineProperty(e,t,{...r,enumerable:!0,configurable:!1,set(i){var a,o;const s=null===(a=r.get)||void 0===a?void 0:a.call(e);Object.is(i,s)||(null===(o=r.set)||void 0===o||o.call(e,i),n(t,i))}}),a=e=>Object.entries(Object.getOwnPropertyDescriptors(e));for(const[t,n]of a(e))n.configurable&&n.writable&&r(e,t,n);for(const[t,n]of a(Object.getPrototypeOf(e)))"function"==typeof n.set&&i(e,t,n);return e}var yt,mt,bt,vt=function(e,t,n,r){if("a"===n&&!r)throw new TypeError("Private accessor was defined without a getter");if("function"==typeof t?e!==t||!r:!t.has(e))throw new TypeError("Cannot read private member from an object whose class did not declare it");return"m"===n?r:"a"===n?r.call(e):r?r.value:t.get(e)},wt=function(e,t,n,r,i){if("m"===r)throw new TypeError("Private method is not writable");if("a"===r&&!i)throw new TypeError("Private accessor was defined without a setter");if("function"==typeof t?e!==t||!i:!t.has(e))throw new TypeError("Cannot write private member to an object whose class did not declare it");return"a"===r?i.call(e,n):i?i.value=n:t.set(e,n),n};const jt={longitude:0,latitude:0,zoom:0,pitch:0,bearing:0};class xt{constructor(e){Object.defineProperty(this,"useDevicePixels",{enumerable:!0,configurable:!0,writable:!0,value:void 0}),Object.defineProperty(this,"pickingRadius",{enumerable:!0,configurable:!0,writable:!0,value:void 0}),Object.defineProperty(this,"blendingMode",{enumerable:!0,configurable:!0,writable:!0,value:void 0}),Object.defineProperty(this,"effects",{enumerable:!0,configurable:!0,writable:!0,value:void 0}),Object.defineProperty(this,"controller",{enumerable:!0,configurable:!0,writable:!0,value:void 0}),Object.defineProperty(this,"initialViewState",{enumerable:!0,configurable:!0,writable:!0,value:jt}),Object.defineProperty(this,"initialBounds",{enumerable:!0,configurable:!0,writable:!0,value:void 0}),Object.defineProperty(this,"onViewStateChange",{enumerable:!0,configurable:!0,writable:!0,value:void 0}),Object.defineProperty(this,"onClick",{enumerable:!0,configurable:!0,writable:!0,value:void 0}),Object.assign(this,e)}}class kt{constructor(e){Object.defineProperty(this,"mapboxAccessToken",{enumerable:!0,configurable:!0,writable:!0,value:void 0}),Object.defineProperty(this,"mapStyle",{enumerable:!0,configurable:!0,writable:!0,value:void 0}),Object.defineProperty(this,"reuseMaps",{enumerable:!0,configurable:!0,writable:!0,value:!0}),Object.assign(this,e)}}class Lt{constructor(e={},t){Object.defineProperty(this,"theme",{enumerable:!0,configurable:!0,writable:!0,value:"kepler"}),yt.set(this,new xt),mt.set(this,new kt),Object.defineProperty(this,"layers",{enumerable:!0,configurable:!0,writable:!0,value:[]}),Object.defineProperty(this,"layerSelector",{enumerable:!0,configurable:!0,writable:!0,value:!1}),Object.defineProperty(this,"lazyLoad",{enumerable:!0,configurable:!0,writable:!0,value:!1}),Object.defineProperty(this,"onChange",{enumerable:!0,configurable:!0,writable:!0,value:void 0}),bt.set(this,(()=>{var e;return null===(e=this.onChange)||void 0===e?void 0:e.call(this)})),this.setState(e),Reflect.defineProperty(this,"onChange",{configurable:!1,enumerable:!1,value:t,writable:!0}),this.setLayerVisibility=this.setLayerVisibility.bind(this),gt(this,vt(this,bt,"f"))}get deckgl(){return vt(this,yt,"f")}set deckgl(e){wt(this,yt,gt(new xt(e),vt(this,bt,"f")),"f")}get mapgl(){return vt(this,mt,"f")}set mapgl(e){wt(this,mt,gt(new kt(e),vt(this,bt,"f")),"f")}setState({deckgl:e,mapgl:t,...n}={}){Object.assign(this,{...n,deckgl:{...this.deckgl,...e},mapgl:{...this.mapgl,...t}})}upsertLayer(e){var t,n,r;const i=this.layers.find((t=>t.id===e.id));if(null==i)return void(this.layers=[...this.layers,e]);const a={...i,...e,visible:null!==(t=e.visible)&&void 0!==t?t:null==i?void 0:i.visible,data:null!==(r=null!==(n=e.data)&&void 0!==n?n:null==i?void 0:i.data)&&void 0!==r?r:null};this.layers=this.layers.map((e=>e===i?a:e))}setLayerVisibility(e){if(0===e.length)return;this.layers=this.layers.map((t=>{const n=e.find((e=>((e,t)=>{const n=e.name===t.name,r=e.groupName===t.groupName;return n&&r||null==e.name&&null!=e.groupName&&r})(e,t)&&e.visible!==t.visible));return n?{...t,visible:n.visible}:t}))}}yt=new WeakMap,mt=new WeakMap,bt=new WeakMap;var Ot,St,Nt,Pt,Ct,Tt=function(e,t,n,r,i){if("m"===r)throw new TypeError("Private method is not writable");if("a"===r&&!i)throw new TypeError("Private accessor was defined without a setter");if("function"==typeof t?e!==t||!i:!t.has(e))throw new TypeError("Cannot write private member to an object whose class did not declare it");return"a"===r?i.call(e,n):i?i.value=n:t.set(e,n),n},_t=function(e,t,n,r){if("a"===n&&!r)throw new TypeError("Private accessor was defined without a getter");if("function"==typeof t?e!==t||!r:!t.has(e))throw new TypeError("Cannot read private member from an object whose class did not declare it");return"m"===n?r:"a"===n?r.call(e):r?r.value:t.get(e)};class Mt{constructor(e,t){Ot.set(this,void 0),St.set(this,void 0),Nt.set(this,void 0),Pt.set(this,((e,t)=>{var n,r,i;if(null===(r=(n=_t(this,Nt,"f").deckgl).onClick)||void 0===r||r.call(n,e,t),HTMLWidgets.shinyMode){const t={coordinate:e.coordinate,...pt(e.viewport),layer:h(null===(i=e.layer)||void 0===i?void 0:i.props,"id","name","groupName"),object:N(e)};Shiny.setInputValue(`${this.element.id}_click`,t,{priority:"event"})}})),Ct.set(this,(e=>{var t,n;if(null===(n=(t=_t(this,Nt,"f").deckgl).onViewStateChange)||void 0===n||n.call(t,e),HTMLWidgets.shinyMode){const t=pt(e.viewState);Shiny.setInputValue(`${this.element.id}_viewstate`,t,{priority:"event"})}})),Tt(this,St,e,"f"),Tt(this,Ot,(0,a.s)(e),"f"),Tt(this,Nt,new Lt(t,(()=>this.render())),"f"),HTMLWidgets.shinyMode&&(Shiny.addCustomMessageHandler(`${e.id}:layer`,(e=>{this.state.upsertLayer(e)})),Shiny.addCustomMessageHandler(`${e.id}:deck`,(e=>{this.state.setState(e)})))}get element(){return _t(this,St,"f")}get state(){return _t(this,Nt,"f")}render(){const{theme:e,mapgl:t,layers:n,layerSelector:r,lazyLoad:a}=_t(this,Nt,"f"),s={..._t(this,Nt,"f").deckgl,onClick:_t(this,Pt,"f"),onViewStateChange:_t(this,Ct,"f")};null!=s.initialBounds&&delete s.initialViewState,_t(this,Ot,"f").render((0,i.jsx)(o.StrictMode,{children:(0,i.jsx)(ft,{theme:e,deckgl:s,mapgl:t,layers:n,layerSelector:r,onLayerVisibilityChange:this.state.setLayerVisibility,lazyLoad:a})}))}setLayerVisibility(e){return _t(this,Nt,"f").setLayerVisibility(e)}}Ot=new WeakMap,St=new WeakMap,Nt=new WeakMap,Pt=new WeakMap,Ct=new WeakMap;const Et={name:"rdeck",type:"output",factory(e,t,n){let r=null;return{get instance(){return r},renderValue(t){r=new Mt(e,t),r.render()},resize(){}}}};function At(e){const t=document.getElementById(e);return t&&Dt(t)}function Zt(){return[...document.querySelectorAll(".rdeck.html-widget")].map((e=>Dt(e))).filter((e=>e instanceof Mt))}function Dt(e){var t;return null===(t=null==e?void 0:e.htmlwidget_data_init_result)||void 0===t?void 0:t.instance}HTMLWidgets.widget(Et);const Rt="0.4.0"},479:()=>{},9125:()=>{},9214:()=>{}},i={};function a(e){var t=i[e];if(void 0!==t)return t.exports;var n=i[e]={exports:{}};return r[e].call(n.exports,n,n.exports,a),n.exports}a.m=r,e=[],a.O=(t,n,r,i)=>{if(!n){var o=1/0;for(u=0;u<e.length;u++){for(var[n,r,i]=e[u],s=!0,l=0;l<n.length;l++)(!1&i||o>=i)&&Object.keys(a.O).every((e=>a.O[e](n[l])))?n.splice(l--,1):(s=!1,i<o&&(o=i));if(s){e.splice(u--,1);var c=r();void 0!==c&&(t=c)}}return t}i=i||0;for(var u=e.length;u>0&&e[u-1][2]>i;u--)e[u]=e[u-1];e[u]=[n,r,i]},a.n=e=>{var t=e&&e.__esModule?()=>e.default:()=>e;return a.d(t,{a:t}),t},n=Object.getPrototypeOf?e=>Object.getPrototypeOf(e):e=>e.__proto__,a.t=function(e,r){if(1&r&&(e=this(e)),8&r)return e;if("object"==typeof e&&e){if(4&r&&e.__esModule)return e;if(16&r&&"function"==typeof e.then)return e}var i=Object.create(null);a.r(i);var o={};t=t||[null,n({}),n([]),n(n)];for(var s=2&r&&e;"object"==typeof s&&!~t.indexOf(s);s=n(s))Object.getOwnPropertyNames(s).forEach((t=>o[t]=()=>e[t]));return o.default=()=>e,a.d(i,o),i},a.d=(e,t)=>{for(var n in t)a.o(t,n)&&!a.o(e,n)&&Object.defineProperty(e,n,{enumerable:!0,get:t[n]})},a.g=function(){if("object"==typeof globalThis)return globalThis;try{return this||new Function("return this")()}catch(e){if("object"==typeof window)return window}}(),a.o=(e,t)=>Object.prototype.hasOwnProperty.call(e,t),a.r=e=>{"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(e,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(e,"__esModule",{value:!0})},(()=>{var e={472:0};a.O.j=t=>0===e[t];var t=(t,n)=>{var r,i,[o,s,l]=n,c=0;if(o.some((t=>0!==e[t]))){for(r in s)a.o(s,r)&&(a.m[r]=s[r]);if(l)var u=l(a)}for(t&&t(n);c<o.length;c++)i=o[c],a.o(e,i)&&e[i]&&e[i][0](),e[i]=0;return a.O(u)},n=self.webpackChunkrdeck=self.webpackChunkrdeck||[];n.forEach(t.bind(null,0)),n.push=t.bind(null,n.push.bind(n))})();var o=a.O(void 0,[486,474,619,568,175,627,811,42,899,667,324,134,133,468,745,535,528,784,485,378,645,394,816,650,869,67,806,282,953,538,49,639,825,596],(()=>a(7170)));return o=a.O(o)})()));
//# sourceMappingURL=data:application/json;charset=utf-8;base64,