!function(e,t){"object"==typeof exports&&"object"==typeof module?module.exports=t():"function"==typeof define&&define.amd?define([],t):"object"==typeof exports?exports.rdeck=t():e.rdeck=t()}(self,(()=>(()=>{var e,t,n,r={4453:(e,t,n)=>{"use strict";n.r(t),n.d(t,{VERSION:()=>gn,Widget:()=>dn,binding:()=>hn,getWidgetById:()=>fn,getWidgets:()=>pn});var r={};n.r(r),n.d(r,{AGGREGATION_OPERATION:()=>Q.KM,ArcLayer:()=>K.ArcLayer,BitmapLayer:()=>K.BitmapLayer,CPUGridLayer:()=>Q.ab,ColumnLayer:()=>K.ColumnLayer,ContourLayer:()=>Q.YY,GPUGridLayer:()=>Q.ML,GeoJsonLayer:()=>K.GeoJsonLayer,GreatCircleLayer:()=>X.GreatCircleLayer,GridCellLayer:()=>K.GridCellLayer,GridLayer:()=>Q.mU,H3ClusterLayer:()=>X.H3ClusterLayer,H3HexagonLayer:()=>X.H3HexagonLayer,HeatmapLayer:()=>Q.zP,HexagonLayer:()=>Q.dX,IconLayer:()=>K.IconLayer,LineLayer:()=>K.LineLayer,MVTLayer:()=>X.MVTLayer,PathLayer:()=>K.PathLayer,PointCloudLayer:()=>K.PointCloudLayer,PolygonLayer:()=>K.PolygonLayer,QuadkeyLayer:()=>X.QuadkeyLayer,S2Layer:()=>X.S2Layer,ScatterplotLayer:()=>K.ScatterplotLayer,ScenegraphLayer:()=>ee.ScenegraphLayer,ScreenGridLayer:()=>Q.p3,SimpleMeshLayer:()=>ee.SimpleMeshLayer,SolidPolygonLayer:()=>K.SolidPolygonLayer,TerrainLayer:()=>X.TerrainLayer,TextLayer:()=>K.TextLayer,Tile3DLayer:()=>X.Tile3DLayer,TileLayer:()=>X.TileLayer,TripsLayer:()=>X.TripsLayer,_AggregationLayer:()=>Q.Di,_BinSorter:()=>Q.l0,_CPUAggregator:()=>Q.oA,_GPUGridAggregator:()=>Q.Wc,_MultiIconLayer:()=>K._MultiIconLayer,_TextBackgroundLayer:()=>K._TextBackgroundLayer,_getURLFromTemplate:()=>X._getURLFromTemplate});n(8559);var i=n(5893),a=n(745),o=n(7294),s=(n(6158),n(2687),n(4009)),l=n(6024),c=n(3295),u=n(17),d=n(8289),h=n(7682);function f(e,...t){if(null==e)return null;const n=t.map((t=>[t,e[t]]));return Object.fromEntries(n)}function p(e){return e.clientHeight>0&&e.clientHeight>0?e:e.parentElement?p(e.parentElement):null}function y(e){const t=p(e);if(e===t||null==t)return{width:e.clientWidth,height:e.clientHeight};const{width:n,height:r}=getComputedStyle(e),i=document.createElement("div");Object.assign(i.style,{width:n,height:r,display:"hidden"}),t.appendChild(i);const a={width:i.clientWidth,height:i.clientHeight};return t.removeChild(i),a}function g(e,t){const n=new Map;for(const r of e){const e=t(r);n.has(e)?n.get(e).push(r):n.set(e,[r])}return n}function m(...e){return e.filter((e=>null!=e)).join(" ")}class b{constructor(){Object.defineProperty(this,"_val",{enumerable:!0,configurable:!0,writable:!0,value:new Map}),Object.defineProperty(this,"_ref",{enumerable:!0,configurable:!0,writable:!0,value:new WeakMap})}getStore(e){return"object"==typeof(t=e)&&null!==t||"function"==typeof t?this._ref:this._val;var t}has(e){return this.getStore(e).has(e)}get(e){return this.getStore(e).get(e)}set(e,t){return this.getStore(e).set(e,t),this}}function v(e){const t=new b;return(...n)=>{const r=n[0],i=n.slice(0,-1).reduceRight(((e,t)=>{if(e.has(t))return e.get(t);const n=new b;return e.set(t,n),n}),t);if(i.has(r))return i.get(r);const a=e(...n);return i.set(r,a),a}}class w extends d.Z{setProps(e){const t=e.initialBounds;if(null!=t&&(n=t,r=this.props.initialBounds,!(n===r||null==n&&null==r||null!=n&&null!=r&&(null==n?void 0:n.every(((e,t)=>e===(null==r?void 0:r[t]))))))){const[n,r,i,a]=t,o=[[Math.max(n,-180),Math.max(r,-85.051129)],[Math.min(i,180),Math.min(a,85.051129)]];this._setCanvasSize(e);const{width:s,height:l}=this._getMapSize();e={...e,initialViewState:{...(0,h.Xg)({height:l,width:s,bounds:o}),bearing:0,pitch:0}}}var n,r;super.setProps(e)}_getMapSize(){const e=this.canvas;if(null==e)return{width:this.width,height:this.height};if(0===e.clientWidth&&0===e.clientHeight){const t=e.closest(".rdeck.html-widget");if(null!=t)return y(t)}return{width:e.clientWidth,height:e.clientHeight}}}function j(e){return null!==e&&"object"==typeof e&&"frame"in e}function x(e,{name:t,type:n}){var r,i,a,o;const s=e.frame,l=Object.fromEntries(Object.entries(s).map((([e])=>[e,[]]))),c=Object.keys(e.frame).filter((e=>e!==t)),u=s[t],d=function(e){switch(e){case"MULTIPOINT":return L;case"MULTILINESTRING":return k;case"MULTIPOLYGON":return O;default:throw TypeError(`${e} not supported`)}}(n),h=e=>{for(const t of c)l[t].push(s[t][e])},f=[];for(let n=0;n<e.length;n++){const s=u[n];if(d(s)){l[t].push(...s);for(let t=0;t<s.length;t++)h(n),f.push(null!==(i=null===(r=e.indices)||void 0===r?void 0:r[n])&&void 0!==i?i:n)}else l[t].push(s),h(n),f.push(null!==(o=null===(a=e.indices)||void 0===a?void 0:a[n])&&void 0!==o?o:n)}return{length:l[t].length,geometry:{...e.geometry,[t]:n.replace("MULTI","")},indices:f,frame:l}}function L(e){return Array.isArray(null==e?void 0:e[0])}function k(e){var t;return Array.isArray(null===(t=null==e?void 0:e[0])||void 0===t?void 0:t[0])}function O(e){var t,n;return Array.isArray(null===(n=null===(t=null==e?void 0:e[0])||void 0===t?void 0:t[0])||void 0===n?void 0:n[0])}Object.defineProperty(w,"defaultProps",{enumerable:!0,configurable:!0,writable:!0,value:{...d.Z.defaultProps,initialBounds:null}});const C=".feature_id";function S(e,t=null){if(!e.picked)return null;null==t&&(t=function({object:e,layer:t}){return!j(t.props.data)||t instanceof c.Z?function(e){return"Feature"===(null==e?void 0:e.type)&&"geometry"in e&&"type"in e.geometry}(e)?"geojson":"object":"table"}(e));const n=function(e){switch(e){case"table":return(e,{index:t,data:n})=>{const r=Object.keys(n.geometry),i={};for(const[e,a]of Object.entries(n.frame))r.includes(e)||(i[e]=a[t]);return i};case"object":return e=>({...e});case"geojson":return e=>({[C]:null==e?void 0:e.id,...null==e?void 0:e.properties});default:throw TypeError(`${e} not supported`)}}(t),{object:r,index:i}=e;return n(r,{index:i,data:e.layer.props.data})}const P="cyWLt4_G7nk5vT9hPr0o",N="Z9hHHet2RXmL0iMel3Zt",T="jp658yEHLlesSRvwBwDl",M="t9I8kJyjeEJEOArvMD7j",_="vovHpTur01BROrMLmEFz";function E({info:e}){if(!e.picked||null==e.layer.props.tooltip)return null;const{x:t,y:n}=e,{name:r,tooltip:a}=e.layer.props,o=S(e,a.dataType);delete o[C];const s=!0===a.cols?Object.keys(o):a.cols;return(0,i.jsxs)("div",{className:P,style:{transform:`translate(${t}px, ${n}px)`},children:[(0,i.jsx)("div",{className:N,children:r}),(0,i.jsx)("table",{className:T,children:(0,i.jsx)("tbody",{children:s.map((e=>{var t;return(0,i.jsxs)("tr",{children:[(0,i.jsx)("td",{className:M,children:e}),(0,i.jsx)("td",{className:_,children:String(null!==(t=o[e])&&void 0!==t?t:null)})]},e)}))})})]})}var A=n(9757);const Z=Object.freeze({additive:{[A.default.BLEND]:!0,blendFunc:[A.default.SRC_ALPHA,A.default.DST_ALPHA],blendEquation:A.default.FUNC_ADD},subtractive:{[A.default.BLEND]:!0,blendFunc:[A.default.ONE,A.default.ONE_MINUS_DST_COLOR,A.default.SRC_ALPHA,A.default.DST_ALPHA],blendEquation:[A.default.FUNC_SUBTRACT,A.default.FUNC_ADD]},normal:{[A.default.BLEND]:!0,blendFunc:[A.default.SRC_ALPHA,A.default.ONE_MINUS_SRC_ALPHA,A.default.ONE,A.default.ONE_MINUS_SRC_ALPHA],blendEquation:[A.default.FUNC_ADD,A.default.FUNC_ADD]}});function D(e="normal"){var t;return null!==(t=Z[e])&&void 0!==t?t:Z.normal}var R=n(4329),F=n(7359),H=n(1688);const W=[3,169,244],U=[...W,255],z=[...W,25.5],I=[0,0,0,0];const B=Object.freeze(new Set(["addPosition","removePosition","addFeature","finishMovePosition","scaled","rotated","translated","extruded","split"]));class G extends F.CompositeMode{constructor(e=[new F.TranslateMode,new F.ModifyMode]){super(e)}handlePointerMove(e,t){const n=[],r={...t,onUpdateCursor:e=>n.unshift(e)};this._modes.forEach((t=>t.handlePointerMove(e,r))),t.onUpdateCursor(n.find((e=>null!=e)))}}const V=Object.seal({view:new F.ViewMode,modify:new G,polygon:new F.DrawPolygonMode,lasso:new F.DrawPolygonByDraggingMode});function $(e){var t;return null!==(t=V[null!=e?e:"view"])&&void 0!==t?t:V.view}function q({deckgl:e,mapgl:t,layers:n,editor:r}){const a=(0,o.useRef)(null),[c,d]=J(),{controller:h,blendingMode:f,onClick:p,...y}=e,g={...e.parameters,...f&&D(f)},[m,b]=(0,o.useState)(0),v=n.some((e=>"TripsLayer"===e.type));Y(v,(e=>b(e)));const j=n.map((e=>null!=e.type?e.renderLayer(m):null)),x=function(e){if(null==e)return null;const{mode:t,geojson:n,setGeoJson:r}=e;return new H.nk({data:n,selectedFeatureIndexes:[0],mode:$(t),modeConfig:{screenSpace:!0,viewport:{}},onEdit:(i=r,function({updatedData:e,editType:t,editContext:n}){"updateTentativeFeature"===t&&0!==e.features.length&&(e.features.length=0),this.data=e,B.has(t)&&(null==i||i({updatedData:e,editType:t,editContext:n}))}),getRadius:5,getLineWidth:2,getTentativeLineWidth:2,getFillColor:"view"===t?I:z,getLineColor:U,getTentativeLineColor:U,getEditHandlePointOutlineColor:U,getTentativeFillColor:z,getEditHandlePointColor:I,getDashArray:"view"===t?[0,0]:[4,2],extensions:[new R.Z({dash:!0})]});var i}(r),L=null!=r&&"view"!==r.mode;return(0,i.jsxs)(o.Fragment,{children:[(0,i.jsx)(l.Z,{Deck:w,ref:a,...{...y,parameters:g},layers:[...j,x],onHover:L?void 0:d,onClick:L?void 0:p,getCursor:null==x?void 0:x.getCursor.bind(x),children:(0,i.jsx)(s.Z,{id:"map",controller:h,repeat:!0,children:t.mapStyle&&(0,i.jsx)(u.D5,{...t})})}),c&&(0,i.jsx)(E,{info:c})]})}const J=()=>{const[e,t]=(0,o.useState)(null);return[e,(0,o.useCallback)((e=>{if(!e.picked||!e.layer.props.tooltip||e.layer instanceof c.Z)return t(null);t(e)}),[])]},Y=(e,t)=>{const n=(0,o.useRef)(0),r=(0,o.useRef)(Date.now()),i=()=>{t(Date.now()-r.current),n.current=window.requestAnimationFrame(i)};(0,o.useEffect)((()=>{if(e)return n.current=window.requestAnimationFrame(i),()=>window.cancelAnimationFrame(n.current)}),[e])};var K=n(7786),Q=n(9080),X=n(803),ee=n(1956),te=n(5395);const ne=[0,0,0,255];function re([e,t,n,r=255]){return`rgba(${e}, ${t}, ${n}, ${r/255})`}function ie(e,t){return Array.isArray(e)?t||4!==e.length?((t=null!=t?t:[])[0]=e[0],t[1]=e[1],t[2]=e[2],t[3]=3===e.length?e[3]:255,t):e:"string"==typeof e?(function(e,t){if(7===e.length){const n=parseInt(e.substring(1),16);t[0]=Math.floor(n/65536),t[1]=Math.floor(n/256%256),t[2]=n%256,t[3]=255}else if(9===e.length){const n=parseInt(e.substring(1),16);t[0]=Math.floor(n/16777216),t[1]=Math.floor(n/65536%256),t[2]=Math.floor(n/256%256),t[3]=n%256}}(e,t=null!=t?t:[]),t):ne}var ae=n(4634),oe=n(4177),se=n(458),le=n(5801),ce=n(3613),ue=n(602),de=n(8973),he=n(2625);function fe(e){return null!==e&&"object"==typeof e&&"accessor"===e.type}function pe(e){return fe(e)&&"scale"in e}var ye=n(3693),ge=n(4717),me=n(6867),be=n(3326),ve=n(2112),we=n(7693),je=n(8569),xe=n(1435);class Le extends ye.Z{initializeState(){if(!function(e){return ke.some((t=>e instanceof t))}(this))return;const e=this,t=e.getAttributeManager();t&&t.addInstanced({pickingColors:{type:A.default.UNSIGNED_BYTE,size:3,accessor:(t,{index:n,data:r,target:i})=>{var a,o,s;if(j(r)&&Array.isArray(r.indices))return e.encodePickingColor(r.indices.indexOf(r.indices[n]),i);const l=null===(o=null===(a=null==t?void 0:t.__source)||void 0===a?void 0:a.parent)||void 0===o?void 0:o.props.data;return j(l)&&Array.isArray(l.indices)?e.encodePickingColor(l.indices.indexOf(l.indices[t.__source.index]),i):e.encodePickingColor(null!==(s=null==t?void 0:t.__source.index)&&void 0!==s?s:n,i)},shaderAttributes:{pickingColors:{divisor:0},instancePickingColors:{divisor:1}}}})}}const ke=[ge.Z,me.Z,be.Z,ve.Z,we.Z,je.Z,xe.Z];const Oe=v((function(e){const t=function(e){return Object.entries(e.geometry).filter((([,e])=>/MULTI/.test(e))).map((([e,t])=>({name:e,type:t})))}(e);return 0===t.length?e:t.reduce(x,e)})),Ce=v(ie),Se=v((function(e,t){const n=function({col:e,dataType:t},n){if("highlightColor"===n)switch(t){case"table":return function(e){return({index:t,layer:n})=>ie(n.props.data.frame[e][t])}(e);case"object":return function(e){return({object:t})=>ie(t[e])}(e);case"geojson":return function(e){return({object:t})=>ie(t.properties[e])}(e);default:throw TypeError(`${t} not supported`)}if(n.endsWith("Color"))switch(t){case"table":return function(e){return(t,{index:n,data:r,target:i})=>ie(r.frame[e][n],i)}(e);case"object":return function(e){return(t,{target:n})=>ie(t[e],n)}(e);case"geojson":return function(e){return(t,{target:n})=>ie(t.properties[e],n)}(e);default:throw TypeError(`${t} not supported`)}switch(t){case"table":return function(e){return(t,{index:n,data:r})=>r.frame[e][n]}(e);case"object":return function(e){return t=>t[e]}(e);case"geojson":return function(e){return t=>t.properties[e]}(e);default:throw TypeError(`${t} not supported`)}}(e,t);return{...e,getData:n}})),Pe=v((function(e,t){"palette"in e&&(e.range=e.palette.map((e=>ie(e))),e.unknown=ie(e.unknown));const n=function(e){switch(e.scale){case"linear":return(0,ae.Z)().domain(e.domain).range(e.range).unknown(e.unknown).clamp(!0);case"power":return(0,oe.ZP)().exponent(e.exponent).domain(e.domain).range(e.range).unknown(e.unknown).clamp(!0);case"log":return(0,se.Z)().base(e.base).domain(e.domain).range(e.range).unknown(e.unknown).clamp(!0);case"symlog":return(0,le.Z)().domain(e.domain).range(e.range).unknown(e.unknown).clamp(!0);case"identity":return(0,ce.Z)().unknown(e.unknown);case"threshold":case"quantile":return(0,ue.Z)().domain(e.domain).range(e.range).unknown(e.unknown);case"category":return(0,de.Z)().domain(e.domain).range(e.range).unknown(e.unknown);case"quantize":return(0,he.Z)().domain(e.domain).range(e.range).unknown(e.unknown);default:throw TypeError(`scale ${e.scale} not supported`)}}(e),r="highlightColor"===t?function({col:e,dataType:t},n){switch(t){case"table":return function(e,t){return({index:n,layer:r})=>t(r.props.data.frame[e][n])}(e,n);case"object":return function(e,t){return({object:n})=>t(n[e])}(e,n);case"geojson":return function(e,t){return({object:n})=>t(n.properties[e])}(e,n);default:throw TypeError(`${t} not supported`)}}(e,n):function({col:e,dataType:t},n){switch(t){case"table":return function(e,t){return(n,{index:r,data:i})=>t(i.frame[e][r])}(e,n);case"object":return function(e,t){return n=>t(n[e])}(e,n);case"geojson":return function(e,t){return n=>t(n.properties[e])}(e,n);default:throw TypeError(`${t} not supported`)}}(e,n);return{...e,name:t,getData:r,scaleData:n}}));class Ne{constructor({type:e,...t}){var n,r;Object.defineProperty(this,"type",{enumerable:!0,configurable:!0,writable:!0,value:void 0}),Object.defineProperty(this,"props",{enumerable:!0,configurable:!0,writable:!0,value:void 0}),Object.defineProperty(this,"scales",{enumerable:!0,configurable:!0,writable:!0,value:void 0});const i=Object.entries(t),a=function(e){const t=e.filter(Te).map((([e,t])=>[e,Ce(t)])),n=e.find((([e])=>"colorRange"===e));n&&t.push([n[0],n[1].map((e=>Ce(e)))]);return t}(i),o=function(e){return e.filter((([,e])=>fe(e))).map((([e,t])=>[e,pe(t)?Pe(t,e):Se(t,e)]))}(i);this.type=e;const s=Object.fromEntries([...i,...a,...o.map((([e,t])=>[e,t.getData])),..._e(i),["visible",null===(n=t.visible)||void 0===n||n],["updateTriggers",Me(o)],["parameters",(l=t.parameters,c=t.blendingMode,{...l,...D(c)})]]);var l,c;j(s.data)&&(s.data=Oe(s.data),s.extensions=[new Le,...null!==(r=s.extensions)&&void 0!==r?r:[]]),"TileLayer"===e&&(s.renderSubLayers=e=>{const{bbox:{west:t,south:n,east:r,north:i},x:a,y:o,z:s}=e.tile;return new te.Z({...e,data:[{z:s,x:a,y:o}],image:e.data,bounds:[t,n,r,i]})}),this.props=s,this.scales=o.filter((([,e])=>pe(e))).map((([,e])=>e)),"TextLayer"===e&&"fonts"in document&&document.fonts.load(`16px ${t.fontFamily}`)}static create(e){return new Ne(e)}renderLayer(e){if("TripsLayer"===this.type&&void 0!==e){const t=this.props,{loopLength:n,animationSpeed:r}=t,i=n/r,a=e/1e3%i/i;t.currentTime=a*n}return new r[this.type]({...this.props})}renderLegend(){const e=this.scales.filter((e=>e.legend));return{id:this.props.id,name:this.props.name,scales:e}}renderSelector(){var e;return{id:this.props.id,groupName:this.props.groupName,name:this.props.name,visible:null===(e=this.props.visible)||void 0===e||e}}}function Te([e,t]){return e.endsWith("Color")&&(Array.isArray(t)||"string"==typeof t)}function Me(e){const t=e=>{const{getData:t,scaleData:n,palette:r,...i}=e;return i},n=e.map((([e,n])=>[e,t(n)]));return Object.fromEntries(n)}function _e(e){return e.filter((([e])=>"getColorWeight"===e||"getElevationWeight"===e)).filter((([,e])=>null!==e&&"function"!=typeof e&&!fe(e))).map((([e,t])=>[e,()=>t]))}var Ee=n(6082),Ae=n(912),Ze=n(2372),De=n(8426);const Re="U44LhpKlV8r1Vu1ZoZA3",Fe="XF770nELUcE_0zxo_aOg",He="HYRhC2aw1PSMYGCz2bDb",We="YNou4FYlc3N3GhFp2BkO",Ue="f44NGqZZGn4de9S3oTHN",ze="xqKP289MUJ06Hgb3CjoW",Ie="XctZC_fZAMvRMiHPlt9G",Be="ly9kEH8MpXynhBX6Fhcj",Ge="iM2OiMQz6z_NtAQZZyPS",Ve="_8r8348KPS_nzNLR_CV_",$e="tzkFrkEU5cB_jY6zcuua",qe=Date.now();function Je({className:e,tooltip:t,onClick:n,children:r}){return(0,i.jsx)("button",{className:e,type:"button",onClick:n,title:t,children:r})}function Ye({layers:e,onVisibilityChange:t}){const n=g(e,(e=>{var t;return null!==(t=e.groupName)&&void 0!==t?t:`${e.name}-${qe}`})),r=(n,r,i)=>{if(i){const i=!e.filter((e=>!n.includes(e))).some((e=>e.visible));return t(e.map((e=>({...e,visible:n.includes(e)?r:i}))))}t(n.map((e=>({...e,visible:r}))))},[a,s]=(0,o.useState)(!1),l=()=>s((e=>!e));return a?(0,i.jsxs)("div",{className:Fe,children:[(0,i.jsx)("div",{className:He,children:(0,i.jsxs)(Je,{className:We,onClick:l,tooltip:"Close",children:[(0,i.jsx)(Ee.Z,{className:$e,fontSize:"small"}),(0,i.jsx)("span",{className:Ue,children:"Layers"})]})}),(0,i.jsx)("div",{className:ze,children:Array.from(n.entries(),(([e,t,[{groupName:n}]=t])=>(0,i.jsx)(Ke,{group:n,layers:t,onChange:r},e)))})]}):(0,i.jsx)(Je,{className:Re,tooltip:"Layer selector",onClick:l,children:(0,i.jsx)(Ee.Z,{className:$e,fontSize:"small"})})}function Ke({group:e,layers:t,onChange:n}){const r=Array.from(g(t,(e=>e.name)),(([e,t])=>(0,i.jsx)(Qe,{name:e,layers:t,onChange:n},e)));return e?(0,i.jsxs)(o.Fragment,{children:[(0,i.jsx)(Qe,{name:e,layers:t,onChange:n}),(0,i.jsx)("div",{className:Ie,children:r})]}):(0,i.jsx)(o.Fragment,{children:r})}function Qe({name:e,layers:t,onChange:n}){const r=function(e){let t=e[0].visible;for(const n of e)if(n.visible!==t)return null;return t}(t),a=null===r,s=(0,o.useRef)(null);(0,o.useEffect)((()=>{s.current&&(s.current.indeterminate=a)}),[a]);const l=(0,o.useRef)((()=>!1)),c=r?Ae.Z:a?Ze.Z:De.Z,u=m(Be,r||a?Ge:null);return(0,i.jsxs)("label",{className:u,children:[(0,i.jsx)("input",{ref:s,className:Ve,type:"checkbox",onChange:()=>{l.current()?n(t,!0,!0):l.current=Xe((()=>n(t,!r,!1)),200)},checked:null==r||r}),(0,i.jsx)(c,{fontSize:"small",className:$e}),(0,i.jsx)("span",{className:Ue,children:e})]})}const Xe=(e,t=200)=>{const n={current:0};let r=0;const i=a=>{if(r||(r=a),a-r>t)return n.current=0,void e();n.current=globalThis.requestAnimationFrame(i)};return n.current=globalThis.requestAnimationFrame(i),()=>0!==n.current&&(globalThis.cancelAnimationFrame(n.current),n.current=0,!0)},et="lWOwchFb6W2NpcWR4ZQS",tt="mIJjIoOSsjLZMp591rN0",nt="OULly07OGkLPRiEDgp00",rt="oxctK5Tcknb3syUfT7xg",it="KEbGPBIjLXnjAiUTu8eP",at="MBBFrOSR5F_grZcyOCp0",ot="l_4PaMO7BWOn4DcLN5Oh",st="aWzYqDozdq6Vl4QuIJ1y",lt="xaprV4ANDgRiE5ai1hUl",ct="f6SnauerJY75ZqNAuK56",ut=16;function dt({layers:e}){return 0===e.length?null:(0,i.jsx)("div",{className:et,children:e.map((e=>(0,i.jsx)(ht,{...e},e.id)))})}function ht({name:e,scales:t}){return 0===t.length?null:(0,i.jsxs)("div",{className:tt,children:[(0,i.jsx)("div",{className:nt,title:e,children:e}),t.map((e=>(0,i.jsx)(ft,{...e},e.name)))]})}function ft(e){var t;const n=e.name.replace(/^get/,"").replace(/([A-Z])/g," $1").toLowerCase();const r="palette"in e;const a=function(e){return"linear"===e.scale||"power"===e.scale||"log"===e.scale||"symlog"===e.scale}(e),o=function(e){return"threshold"===e.scale||"quantile"===e.scale||"quantize"===e.scale}(e);return(0,i.jsxs)("div",{className:rt,children:[(0,i.jsx)("div",{className:it,children:n}),(0,i.jsx)("span",{className:at,children:"by "}),(0,i.jsx)("span",{className:ot,title:e.col,children:null!==(t=e.scaleBy)&&void 0!==t?t:e.col}),r&&a&&(0,i.jsx)(pt,{...e}),r&&o&&(0,i.jsx)(yt,{...e}),r&&"category"===e.scale&&(0,i.jsx)(gt,{...e})]})}const pt=({ticks:e,scaleData:t})=>{const n=e.map(((e,t)=>t)).slice(1,-1),r=ut*(e.length-1),a=r+11+1;return(0,i.jsxs)("svg",{className:st,height:a,shapeRendering:"crispEdges",children:[(0,i.jsxs)("svg",{y:5,children:[(0,i.jsx)("image",{width:20,height:r,href:bt(t),preserveAspectRatio:"none"}),n.map((e=>(0,i.jsx)("line",{className:ct,x2:20,y1:ut*e,y2:ut*e},e)))]}),(0,i.jsx)(mt,{ticks:e,y:-2})]})},yt=({ticks:e,range:t})=>{const n=t.map(re),r=ut*(e.length-1)+11+1;return(0,i.jsxs)("svg",{className:st,height:r,shapeRendering:"crispEdges",children:[(0,i.jsx)("svg",{y:5,children:n.map(((e,t)=>(0,i.jsx)("rect",{width:20,height:ut,y:t*ut,fill:e},t)))}),(0,i.jsx)(mt,{ticks:e,y:-2})]})};function gt({ticks:e,range:t,unknownTick:n,unknown:r}){const a=n?[...t,r]:t,o=n?[...e,n]:e,s=a.map(re),l=ut*o.length;return(0,i.jsxs)("svg",{className:st,height:l,children:[(0,i.jsx)("svg",{children:s.map(((e,t)=>(0,i.jsx)("rect",{width:20,height:14,y:1+t*ut,fill:e},t)))}),(0,i.jsx)(mt,{ticks:o})]})}function mt({ticks:e,x:t=28,y:n=0}){return(0,i.jsx)("svg",{x:t,y:n,children:e.map(((e,t)=>(0,i.jsx)("text",{className:lt,y:ut*t,dy:11,children:String(e)},t)))})}function bt(e,t=200){const n=e.range().length,r=[...Array(n).keys()].map((e=>e/(n-1))),i=e.copy().range(r).invert,a=document.createElement("canvas"),o=a.getContext("2d");a.width=1,a.height=t;for(let n=0;n<t;n++)o.fillStyle=re(e(i(n/t))),o.fillRect(0,n,1,1);return a.toDataURL()}var vt=n(7046),wt=n(6533),jt=n(9292),xt=n(1610),Lt=n(904),kt=n(9702),Ot=n(2149),Ct=n(6761);const St="to6Bow31fUl46doyw8b_",Pt="P9ZycVbYWDR1ibd3uTK6",Nt="rN4ew14mQNJFSkFZhUIE",Tt="hGaqLLC_23x1jwFn5zxy",Mt="Pqg0By6gxq7W97bkvlUB",_t=()=>{};function Et({mode:e="view",geojson:t,setMode:n=_t,download:r=_t,upload:a=_t,deleteSelected:o=_t}){const s=0===t.features.length;return(0,i.jsxs)("div",{className:St,children:[(0,i.jsx)("div",{className:Pt,children:(0,i.jsx)(At,{name:"Pan",icon:Lt.Z,active:"view"===e,onClick:()=>n("view")})}),(0,i.jsxs)("div",{className:Pt,children:[(0,i.jsx)(At,{name:"Modify",icon:jt.Z,active:"modify"===e,disabled:s,onClick:()=>n("modify")}),(0,i.jsx)(At,{name:"Polygon",icon:wt.Z,active:"polygon"===e,onClick:()=>n("polygon")}),(0,i.jsx)(At,{name:"Lasso",icon:vt.Z,active:"lasso"===e,onClick:()=>n("lasso")})]}),(0,i.jsxs)("div",{className:Pt,children:[(0,i.jsx)(At,{name:"Download",icon:kt.Z,onClick:()=>r(t)}),(0,i.jsx)(At,{name:"Upload",icon:Ot.Z,onClick:()=>a(t)})]}),(0,i.jsx)("div",{className:Pt,children:(0,i.jsx)(At,{name:"Delete",icon:Ct.Z,disabled:s,onClick:()=>o([0])})})]})}function At({name:e,onClick:t=_t,disabled:n=!1,active:r=!1,icon:a,iconStyle:o}){const s=m(Nt,r?Tt:null);return(0,i.jsx)("button",{className:s,onClick:t,title:e,disabled:n,children:a&&(0,i.jsx)(xt.Z,{component:a,className:Mt,fontSize:"small",style:o})})}const Zt="rdeck",Dt="XTuYKSlBcC933W4sKWtC",Rt="kQnelQ4hkAJEJHLO0NJI",Ft="hQbOOdEZw0LO0llGKVqS",Ht="cSol54mlVTgAnRzj_GUM";function Wt({theme:e,deckgl:t,mapgl:n,layers:r,lazyLoad:a=!1,layerSelector:s=!1,onLayerVisibilityChange:l,editor:c}){var u;const d=null!==(u=null==r?void 0:r.map(Ne.create))&&void 0!==u?u:[],h=(0,o.useRef)(null),f=function(e,t){const[n,r]=(0,o.useState)(!1);return(0,o.useEffect)((()=>{if(t&&e.current){const t=new IntersectionObserver((e=>{r(e[0].isIntersecting)}),{threshold:0});return t.observe(e.current),()=>t.disconnect()}}),[t,e]),n}(h,a),p=!a||f;return(0,i.jsxs)("div",{ref:h,className:m(Zt,e),children:[(0,i.jsx)("div",{className:m(Dt,Rt),children:s&&(0,i.jsx)(Ye,{layers:d.filter((e=>e.props.visibilityToggle)).map((e=>e.renderSelector())).reverse(),onVisibilityChange:l})}),(0,i.jsx)("div",{className:m(Dt,Ft),children:(0,i.jsx)(dt,{layers:d.filter((e=>e.props.visible)).map((e=>e.renderLegend())).reverse()})}),(0,i.jsx)("div",{className:m(Dt,Ht),children:c&&(0,i.jsx)(Et,{...c})}),p&&(0,i.jsx)(q,{deckgl:t,mapgl:n,layers:d,editor:c})]})}var Ut=n(6935);function zt(e){const t=e instanceof Ut.Z?e:new Ut.Z(e),n=f(t,"longitude","latitude","zoom","bearing","pitch","altitude");return{bounds:t.getBounds(),viewState:{...n,center:t.unprojectFlat(t.center)}}}function It(e,t){function n(e,n,{value:r}){return Reflect.defineProperty(e,n,{enumerable:!0,get:()=>r,set(e){Object.is(e,r)||(r=e,null==t||t({[n]:e}))}})}const r=Object.entries(Object.getOwnPropertyDescriptors(e));for(const[t,i]of r)i.configurable&&i.writable&&n(e,t,i);return e}var Bt,Gt,Vt,$t,qt=function(e,t,n,r){if("a"===n&&!r)throw new TypeError("Private accessor was defined without a getter");if("function"==typeof t?e!==t||!r:!t.has(e))throw new TypeError("Cannot read private member from an object whose class did not declare it");return"m"===n?r:"a"===n?r.call(e):r?r.value:t.get(e)},Jt=function(e,t,n,r,i){if("m"===r)throw new TypeError("Private method is not writable");if("a"===r&&!i)throw new TypeError("Private accessor was defined without a setter");if("function"==typeof t?e!==t||!i:!t.has(e))throw new TypeError("Cannot write private member to an object whose class did not declare it");return"a"===r?i.call(e,n):i?i.value=n:t.set(e,n),n};const Yt={longitude:0,latitude:0,zoom:0,pitch:0,bearing:0};class Kt{constructor(e){Object.defineProperty(this,"useDevicePixels",{enumerable:!0,configurable:!0,writable:!0,value:void 0}),Object.defineProperty(this,"pickingRadius",{enumerable:!0,configurable:!0,writable:!0,value:void 0}),Object.defineProperty(this,"blendingMode",{enumerable:!0,configurable:!0,writable:!0,value:void 0}),Object.defineProperty(this,"effects",{enumerable:!0,configurable:!0,writable:!0,value:void 0}),Object.defineProperty(this,"controller",{enumerable:!0,configurable:!0,writable:!0,value:void 0}),Object.defineProperty(this,"initialViewState",{enumerable:!0,configurable:!0,writable:!0,value:Yt}),Object.defineProperty(this,"initialBounds",{enumerable:!0,configurable:!0,writable:!0,value:void 0}),Object.defineProperty(this,"onViewStateChange",{enumerable:!0,configurable:!0,writable:!0,value:void 0}),Object.defineProperty(this,"onClick",{enumerable:!0,configurable:!0,writable:!0,value:void 0}),Object.assign(this,e)}}class Qt{constructor(e){Object.defineProperty(this,"mapboxAccessToken",{enumerable:!0,configurable:!0,writable:!0,value:void 0}),Object.defineProperty(this,"mapStyle",{enumerable:!0,configurable:!0,writable:!0,value:void 0}),Object.defineProperty(this,"reuseMaps",{enumerable:!0,configurable:!0,writable:!0,value:!0}),Object.assign(this,e)}}const Xt=Object.freeze({type:"FeatureCollection",features:[]});class en{constructor(e){Object.defineProperty(this,"mode",{enumerable:!0,configurable:!0,writable:!0,value:"view"}),Object.defineProperty(this,"geojson",{enumerable:!0,configurable:!0,writable:!0,value:Xt}),Object.defineProperty(this,"upload",{enumerable:!0,configurable:!0,writable:!0,value:void 0}),Object.assign(this,e),this.setMode=this.setMode.bind(this),this.setGeoJson=this.setGeoJson.bind(this),this.deleteSelected=this.deleteSelected.bind(this),this.download=this.download.bind(this)}setMode(e){this.mode=e}setGeoJson(e){Object.assign(this,{mode:"addFeature"===e.editType?"modify":this.mode,geojson:e.updatedData})}deleteSelected(e=[0]){const t=this.geojson.features.filter(((t,n)=>!e.includes(n)));Object.assign(this,{mode:"view",geojson:{...this.geojson,features:t}})}download(e){const t=new Blob([JSON.stringify(e)],{type:"application/geo+json"}),n=document.createElement("a");n.href=URL.createObjectURL(t),n.download="rdeck.geojson",n.click()}}class tn{constructor({theme:e,deckgl:t,mapgl:n,layers:r,layerSelector:i,editor:a,lazyLoad:o}={},s){Object.defineProperty(this,"theme",{enumerable:!0,configurable:!0,writable:!0,value:"kepler"}),Bt.set(this,void 0),Gt.set(this,void 0),Object.defineProperty(this,"layers",{enumerable:!0,configurable:!0,writable:!0,value:[]}),Object.defineProperty(this,"layerSelector",{enumerable:!0,configurable:!0,writable:!0,value:!1}),Object.defineProperty(this,"lazyLoad",{enumerable:!0,configurable:!0,writable:!0,value:!1}),Vt.set(this,void 0),Object.defineProperty(this,"onChange",{enumerable:!0,configurable:!0,writable:!0,value:void 0}),$t.set(this,(()=>{var e;return null===(e=this.onChange)||void 0===e?void 0:e.call(this)})),this.theme=null!=e?e:"kepler",this.layerSelector=null!=i&&i,this.lazyLoad=null!=o&&o,this.layers=null!=r?r:[],Jt(this,Bt,It(new Kt(t),qt(this,$t,"f")),"f"),Jt(this,Gt,It(new Qt(n),qt(this,$t,"f")),"f"),Jt(this,Vt,It(new en(a),qt(this,$t,"f")),"f"),this.setLayerVisibility=this.setLayerVisibility.bind(this),Reflect.defineProperty(this,"onChange",{configurable:!1,enumerable:!1,writable:!0,value:s}),It(this,qt(this,$t,"f"))}get deckgl(){return qt(this,Bt,"f")}get mapgl(){return qt(this,Gt,"f")}get editor(){return qt(this,Vt,"f")}upsertLayer(e){var t,n,r;const i=this.layers.find((t=>t.id===e.id));if(null==i)return void(this.layers=[...this.layers,e]);const a={...i,...e,visible:null!==(t=e.visible)&&void 0!==t?t:null==i?void 0:i.visible,data:null!==(r=null!==(n=e.data)&&void 0!==n?n:null==i?void 0:i.data)&&void 0!==r?r:null};this.layers=this.layers.map((e=>e===i?a:e))}setLayerVisibility(e){if(0===e.length)return;this.layers=this.layers.map((t=>{const n=e.find((e=>((e,t)=>{const n=e.name===t.name,r=e.groupName===t.groupName;return n&&r||null==e.name&&null!=e.groupName&&r})(e,t)&&e.visible!==t.visible));return n?{...t,visible:n.visible}:t}))}}Bt=new WeakMap,Gt=new WeakMap,Vt=new WeakMap,$t=new WeakMap;var nn,rn,an,on,sn,ln,cn=function(e,t,n,r,i){if("m"===r)throw new TypeError("Private method is not writable");if("a"===r&&!i)throw new TypeError("Private accessor was defined without a setter");if("function"==typeof t?e!==t||!i:!t.has(e))throw new TypeError("Cannot write private member to an object whose class did not declare it");return"a"===r?i.call(e,n):i?i.value=n:t.set(e,n),n},un=function(e,t,n,r){if("a"===n&&!r)throw new TypeError("Private accessor was defined without a getter");if("function"==typeof t?e!==t||!r:!t.has(e))throw new TypeError("Cannot read private member from an object whose class did not declare it");return"m"===n?r:"a"===n?r.call(e):r?r.value:t.get(e)};class dn{constructor(e,t){nn.set(this,void 0),rn.set(this,void 0),an.set(this,void 0),on.set(this,((e,t)=>{var n,r,i;if(null===(r=(n=un(this,an,"f").deckgl).onClick)||void 0===r||r.call(n,e,t),HTMLWidgets.shinyMode){const t={coordinate:e.coordinate,...zt(e.viewport),layer:f(null===(i=e.layer)||void 0===i?void 0:i.props,"id","name","groupName"),object:S(e)};Shiny.setInputValue(`${this.element.id}_click`,t,{priority:"event"})}})),sn.set(this,(e=>{var t,n;if(null===(n=(t=un(this,an,"f").deckgl).onViewStateChange)||void 0===n||n.call(t,e),HTMLWidgets.shinyMode){const t=zt(e.viewState);Shiny.setInputValue(`${this.element.id}_viewstate`,t,{priority:"event"})}})),ln.set(this,(e=>{HTMLWidgets.shinyMode&&Shiny.setInputValue(`${this.element.id}_editedpolygon`,{polygon:JSON.stringify(e)})})),cn(this,rn,e,"f"),cn(this,nn,(0,a.s)(e),"f"),cn(this,an,new tn(t,(()=>this.render())),"f"),HTMLWidgets.shinyMode&&(Shiny.addCustomMessageHandler(`${e.id}:layer`,(e=>{this.state.upsertLayer(e)})),Shiny.addCustomMessageHandler(`${e.id}:deck`,(e=>{Object.assign(this.state.deckgl,e)})))}get element(){return un(this,rn,"f")}get state(){return un(this,an,"f")}render(){const{theme:e,mapgl:t,layers:n,layerSelector:r,lazyLoad:a}=un(this,an,"f"),s={...un(this,an,"f").deckgl,onClick:un(this,on,"f"),onViewStateChange:un(this,sn,"f")},l={...un(this,an,"f").editor,upload:un(this,ln,"f")};null!=s.initialBounds&&delete s.initialViewState,un(this,nn,"f").render((0,i.jsx)(o.StrictMode,{children:(0,i.jsx)(Wt,{theme:e,deckgl:s,mapgl:t,layers:n,layerSelector:r,onLayerVisibilityChange:this.state.setLayerVisibility,editor:l,lazyLoad:a})}))}setLayerVisibility(e){return un(this,an,"f").setLayerVisibility(e)}}nn=new WeakMap,rn=new WeakMap,an=new WeakMap,on=new WeakMap,sn=new WeakMap,ln=new WeakMap;const hn={name:"rdeck",type:"output",factory(e,t,n){let r=null;return{get instance(){return r},renderValue(t){r=new dn(e,t),r.render()},resize(){}}}};function fn(e){const t=document.getElementById(e);return t&&yn(t)}function pn(){return[...document.querySelectorAll(".rdeck.html-widget")].map((e=>yn(e))).filter((e=>e instanceof dn))}function yn(e){var t;return null===(t=null==e?void 0:e.htmlwidget_data_init_result)||void 0===t?void 0:t.instance}HTMLWidgets.widget(hn);const gn="0.4.0"},479:()=>{},9125:()=>{},9214:()=>{},7579:()=>{}},i={};function a(e){var t=i[e];if(void 0!==t)return t.exports;var n=i[e]={exports:{}};return r[e].call(n.exports,n,n.exports,a),n.exports}a.m=r,e=[],a.O=(t,n,r,i)=>{if(!n){var o=1/0;for(u=0;u<e.length;u++){for(var[n,r,i]=e[u],s=!0,l=0;l<n.length;l++)(!1&i||o>=i)&&Object.keys(a.O).every((e=>a.O[e](n[l])))?n.splice(l--,1):(s=!1,i<o&&(o=i));if(s){e.splice(u--,1);var c=r();void 0!==c&&(t=c)}}return t}i=i||0;for(var u=e.length;u>0&&e[u-1][2]>i;u--)e[u]=e[u-1];e[u]=[n,r,i]},a.n=e=>{var t=e&&e.__esModule?()=>e.default:()=>e;return a.d(t,{a:t}),t},n=Object.getPrototypeOf?e=>Object.getPrototypeOf(e):e=>e.__proto__,a.t=function(e,r){if(1&r&&(e=this(e)),8&r)return e;if("object"==typeof e&&e){if(4&r&&e.__esModule)return e;if(16&r&&"function"==typeof e.then)return e}var i=Object.create(null);a.r(i);var o={};t=t||[null,n({}),n([]),n(n)];for(var s=2&r&&e;"object"==typeof s&&!~t.indexOf(s);s=n(s))Object.getOwnPropertyNames(s).forEach((t=>o[t]=()=>e[t]));return o.default=()=>e,a.d(i,o),i},a.d=(e,t)=>{for(var n in t)a.o(t,n)&&!a.o(e,n)&&Object.defineProperty(e,n,{enumerable:!0,get:t[n]})},a.g=function(){if("object"==typeof globalThis)return globalThis;try{return this||new Function("return this")()}catch(e){if("object"==typeof window)return window}}(),a.o=(e,t)=>Object.prototype.hasOwnProperty.call(e,t),a.r=e=>{"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(e,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(e,"__esModule",{value:!0})},(()=>{var e={472:0};a.O.j=t=>0===e[t];var t=(t,n)=>{var r,i,[o,s,l]=n,c=0;if(o.some((t=>0!==e[t]))){for(r in s)a.o(s,r)&&(a.m[r]=s[r]);if(l)var u=l(a)}for(t&&t(n);c<o.length;c++)i=o[c],a.o(e,i)&&e[i]&&e[i][0](),e[i]=0;return a.O(u)},n=self.webpackChunkrdeck=self.webpackChunkrdeck||[];n.forEach(t.bind(null,0)),n.push=t.bind(null,n.push.bind(n))})();var o=a.O(void 0,[486,474,619,315,568,175,627,977,811,42,899,667,324,134,133,294,468,745,535,528,784,485,378,645,783,394,816,650,869,706,836,458,769,67,806,551,282,953,538,49,264,844,912,639,825,596],(()=>a(4453)));return o=a.O(o)})()));
//# sourceMappingURL=data:application/json;charset=utf-8;base64,