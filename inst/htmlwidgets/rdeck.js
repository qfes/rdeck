!function(e,t){"object"==typeof exports&&"object"==typeof module?module.exports=t():"function"==typeof define&&define.amd?define([],t):"object"==typeof exports?exports.rdeck=t():e.rdeck=t()}(self,(()=>(()=>{var e,t,n,r={5416:(e,t,n)=>{"use strict";n.r(t),n.d(t,{VERSION:()=>Vn,Widget:()=>In,binding:()=>Un,getWidgetById:()=>Hn,getWidgets:()=>Wn});var r={};n.r(r),n.d(r,{AGGREGATION_OPERATION:()=>ue.KM,ArcLayer:()=>ce.ArcLayer,BitmapLayer:()=>ce.BitmapLayer,CPUGridLayer:()=>ue.ab,ColumnLayer:()=>ce.ColumnLayer,ContourLayer:()=>ue.YY,GPUGridLayer:()=>ue.ML,GeoJsonLayer:()=>ce.GeoJsonLayer,GreatCircleLayer:()=>de.GreatCircleLayer,GridCellLayer:()=>ce.GridCellLayer,GridLayer:()=>ue.mU,H3ClusterLayer:()=>de.H3ClusterLayer,H3HexagonLayer:()=>de.H3HexagonLayer,HeatmapLayer:()=>ue.zP,HexagonLayer:()=>ue.dX,IconLayer:()=>ce.IconLayer,LineLayer:()=>ce.LineLayer,MVTLayer:()=>de.MVTLayer,PathLayer:()=>ce.PathLayer,PointCloudLayer:()=>ce.PointCloudLayer,PolygonLayer:()=>ce.PolygonLayer,QuadkeyLayer:()=>de.QuadkeyLayer,S2Layer:()=>de.S2Layer,ScatterplotLayer:()=>ce.ScatterplotLayer,ScenegraphLayer:()=>fe.ScenegraphLayer,ScreenGridLayer:()=>ue.p3,SimpleMeshLayer:()=>fe.SimpleMeshLayer,SolidPolygonLayer:()=>ce.SolidPolygonLayer,TerrainLayer:()=>de.TerrainLayer,TextLayer:()=>ce.TextLayer,Tile3DLayer:()=>de.Tile3DLayer,TileLayer:()=>de.TileLayer,TripsLayer:()=>de.TripsLayer,_AggregationLayer:()=>ue.Di,_BinSorter:()=>ue.l0,_CPUAggregator:()=>ue.oA,_GPUGridAggregator:()=>ue.Wc,_MultiIconLayer:()=>ce._MultiIconLayer,_TextBackgroundLayer:()=>ce._TextBackgroundLayer,_getURLFromTemplate:()=>de._getURLFromTemplate});n(8559);var i=n(5893),o=n(745),a=n(7294),s=(n(6158),n(2687),n(4009)),l=n(6024),c=n(3295),u=n(17),d=n(8289),f=n(7682);function h(e,...t){if(null==e)return null;const n=t.map((t=>[t,e[t]]));return Object.fromEntries(n)}function p(e){return e.clientHeight>0&&e.clientHeight>0?e:e.parentElement?p(e.parentElement):null}function g(e){const t=p(e);if(e===t||null==t)return{width:e.clientWidth,height:e.clientHeight};const{width:n,height:r}=getComputedStyle(e),i=document.createElement("div");Object.assign(i.style,{width:n,height:r,display:"hidden"}),t.appendChild(i);const o={width:i.clientWidth,height:i.clientHeight};return t.removeChild(i),o}function y(e,t){const n=new Map;for(const r of e){const e=t(r);n.has(e)?n.get(e).push(r):n.set(e,[r])}return n}function m(...e){return e.filter((e=>null!=e)).join(" ")}class b{constructor(){Object.defineProperty(this,"_val",{enumerable:!0,configurable:!0,writable:!0,value:new Map}),Object.defineProperty(this,"_ref",{enumerable:!0,configurable:!0,writable:!0,value:new WeakMap})}getStore(e){return"object"==typeof(t=e)&&null!==t||"function"==typeof t?this._ref:this._val;var t}has(e){return this.getStore(e).has(e)}get(e){return this.getStore(e).get(e)}set(e,t){return this.getStore(e).set(e,t),this}}function v(e){const t=new b;return(...n)=>{const r=n[0],i=n.slice(0,-1).reduceRight(((e,t)=>{if(e.has(t))return e.get(t);const n=new b;return e.set(t,n),n}),t);if(i.has(r))return i.get(r);const o=e(...n);return i.set(r,o),o}}class w extends d.Z{setProps(e){const t=e.initialBounds;if(null!=t&&(n=t,r=this.props.initialBounds,!(n===r||null==n&&null==r||null!=n&&null!=r&&(null==n?void 0:n.every(((e,t)=>e===(null==r?void 0:r[t]))))))){const[n,r,i,o]=t,a=[[Math.max(n,-180),Math.max(r,-85.051129)],[Math.min(i,180),Math.min(o,85.051129)]];this._setCanvasSize(e);const{width:s,height:l}=this._getMapSize();e={...e,initialViewState:{...(0,f.Xg)({height:l,width:s,bounds:a}),bearing:0,pitch:0}}}var n,r;super.setProps(e)}_getMapSize(){const e=this.canvas;if(null==e)return{width:this.width,height:this.height};if(0===e.clientWidth&&0===e.clientHeight){const t=e.closest(".rdeck.html-widget");if(null!=t)return g(t)}return{width:e.clientWidth,height:e.clientHeight}}}function j(e){return null!==e&&"object"==typeof e&&"frame"in e}function x(e,{name:t,type:n}){var r,i,o,a;const s=e.frame,l=Object.fromEntries(Object.entries(s).map((([e])=>[e,[]]))),c=Object.keys(e.frame).filter((e=>e!==t)),u=s[t],d=function(e){switch(e){case"MULTIPOINT":return k;case"MULTILINESTRING":return L;case"MULTIPOLYGON":return O;default:throw TypeError(`${e} not supported`)}}(n),f=e=>{for(const t of c)l[t].push(s[t][e])},h=[];for(let n=0;n<e.length;n++){const s=u[n];if(d(s)){l[t].push(...s);for(let t=0;t<s.length;t++)f(n),h.push(null!==(i=null===(r=e.indices)||void 0===r?void 0:r[n])&&void 0!==i?i:n)}else l[t].push(s),f(n),h.push(null!==(a=null===(o=e.indices)||void 0===o?void 0:o[n])&&void 0!==a?a:n)}return{length:l[t].length,geometry:{...e.geometry,[t]:n.replace("MULTI","")},indices:h,frame:l}}function k(e){return Array.isArray(null==e?void 0:e[0])}function L(e){var t;return Array.isArray(null===(t=null==e?void 0:e[0])||void 0===t?void 0:t[0])}function O(e){var t,n;return Array.isArray(null===(n=null===(t=null==e?void 0:e[0])||void 0===t?void 0:t[0])||void 0===n?void 0:n[0])}Object.defineProperty(w,"defaultProps",{enumerable:!0,configurable:!0,writable:!0,value:{...d.Z.defaultProps,initialBounds:null}});const S=".feature_id";function P(e,t=null){if(!e.picked)return null;null==t&&(t=function({object:e,layer:t}){return!j(t.props.data)||t instanceof c.Z?function(e){return"Feature"===(null==e?void 0:e.type)&&"geometry"in e&&"type"in e.geometry}(e)?"geojson":"object":"table"}(e));const n=function(e){switch(e){case"table":return(e,{index:t,data:n})=>{const r=Object.keys(n.geometry),i={};for(const[e,o]of Object.entries(n.frame))r.includes(e)||(i[e]=o[t]);return i};case"object":return e=>({...e});case"geojson":return e=>({[S]:null==e?void 0:e.id,...null==e?void 0:e.properties});default:throw TypeError(`${e} not supported`)}}(t),{object:r,index:i}=e;return n(r,{index:i,data:e.layer.props.data})}const C="cyWLt4_G7nk5vT9hPr0o",M="Z9hHHet2RXmL0iMel3Zt",T="jp658yEHLlesSRvwBwDl",N="t9I8kJyjeEJEOArvMD7j",_="vovHpTur01BROrMLmEFz";function E({info:e}){if(!e.picked||null==e.layer.props.tooltip)return null;const{x:t,y:n}=e,{name:r,tooltip:o}=e.layer.props,a=P(e,o.dataType);delete a[S];const s=!0===o.cols?Object.keys(a):o.cols;return(0,i.jsxs)("div",{className:C,style:{transform:`translate(${t}px, ${n}px)`},children:[(0,i.jsx)("div",{className:M,children:r}),(0,i.jsx)("table",{className:T,children:(0,i.jsx)("tbody",{children:s.map((e=>{var t;return(0,i.jsxs)("tr",{children:[(0,i.jsx)("td",{className:N,children:e}),(0,i.jsx)("td",{className:_,children:String(null!==(t=a[e])&&void 0!==t?t:null)})]},e)}))})})]})}var A=n(9757);const Z=Object.freeze({additive:{[A.default.BLEND]:!0,blendFunc:[A.default.SRC_ALPHA,A.default.DST_ALPHA],blendEquation:A.default.FUNC_ADD},subtractive:{[A.default.BLEND]:!0,blendFunc:[A.default.ONE,A.default.ONE_MINUS_DST_COLOR,A.default.SRC_ALPHA,A.default.DST_ALPHA],blendEquation:[A.default.FUNC_SUBTRACT,A.default.FUNC_ADD]},normal:{[A.default.BLEND]:!0,blendFunc:[A.default.SRC_ALPHA,A.default.ONE_MINUS_SRC_ALPHA,A.default.ONE,A.default.ONE_MINUS_SRC_ALPHA],blendEquation:[A.default.FUNC_ADD,A.default.FUNC_ADD]}});function F(e="normal"){var t;return null!==(t=Z[e])&&void 0!==t?t:Z.normal}var R=n(4329),D=n(7359),I=n(9900);function U(e){switch(e.type){case"Point":return 1;case"MultiPoint":case"LineString":return e.coordinates.length;case"MultiLineString":case"Polygon":return H(e.coordinates);case"MultiPolygon":return e.coordinates.reduce(((e,t)=>e+H(t)),0);case"GeometryCollection":return e.geometries.reduce(((e,t)=>e+U(t)),0);default:throw new TypeError(`Geomtry type ${e.type} not supported.`)}}function H(e){return e.reduce(((e,t)=>e+t.length),0)}const W=[3,169,244],G=[116,117,129],V=[...W,216.75],z=[...G,216.75],B=[...W,38.25],$=[...G,38.25],J=[0,0,0,0];function q(e){if(null==e)return null;const{geojson:t,selectedFeatureIndices:n,onSetGeoJson:r,onSelectFeatures:i}=e,o=function(e){var t;return null!==(t=ie[null!=e?e:"view"])&&void 0!==t?t:ie.view}(e.mode),a=!oe.includes(o);const s=new ne({data:t,selectedFeatureIndexes:n,mode:o,modeConfig:{screenSpace:!0,viewport:{}},onEdit:function({updatedData:e,editType:t,editContext:o}){var a,l,c;if("updateTentativeFeature"===t||"addTentativePosition"===t)return;if("selectFeature"===t)return void(null==i||i(null!==(a=o.selectedIndices)&&void 0!==a?a:[]));const u="addPosition"===t||"removePosition"===t?[{startRow:null!==(l=o.featureIndexes[0])&&void 0!==l?l:0,endRow:e.features.length}]:null===(c=null==o?void 0:o.featureIndexes)||void 0===c?void 0:c.map(K);s.props.data={...e,__diff:u},s.setChangeFlags({dataChanged:u}),s.setNeedsUpdate(),te.has(t)&&(null==r||r(e),"addFeature"===t&&(null==i||i([...n,...o.featureIndexes])))},pickable:o!==ie.view,pickingLineWidthExtraPixels:5,pickingDepth:0,getRadius:6,getLineWidth:1.5,getTentativeLineWidth:1.5,lineWidthScale:1,getFillColor:o===ie.view?J:Y,getLineColor:Q,getTentativeLineColor:V,getEditHandlePointOutlineColor:V,getTentativeFillColor:B,getEditHandlePointColor:J,getDashArray:a?[4,2]:[0,0],extensions:[new R.Z({dash:!0})],_subLayerProps:{geojson:{dataComparator:X},guides:{dataComparator:X,_dataDiff:ee}}});return s}function Y(e,t,n){return t?B:$}function Q(e,t,n){return t?V:z}function X(e,t){return Object.is(e.features,t.features)}function K(e){return{startRow:e,endRow:e+1}}function ee(e,t){if(e.__diff)return e.__diff;const n=e.features,r=t.features;if(n.length!==r.length)return"A new data container was supplied";const i=[],o=n.length;for(let e=0;e<o;++e){const t=n[e],a=r[e];if(t!==a){if(U(t.geometry)!==U(a.geometry)){i.push({startRow:e,endRow:o});break}i.push({startRow:e,endRow:e+1})}}return i}const te=Object.freeze(new Set(["addPosition","removePosition","addFeature","finishMovePosition","scaled","rotated","translated","extruded","split"]));class ne extends I.nk{onPointerMove(e){this.state.lastPointerMoveEvent=e;this.getActiveMode().handlePointerMove(e,this.getModeProps(this.props))}updateState(e){e.changeFlags.propsOrDataChanged&&super.updateState(e)}setState(e){if(this.props.mode===ie.modify)return super.setState(e);for(const t in e)if("cursor"!==t||e.cursor!==this.state.cursor)return super.setState(e)}}class re extends D.ViewMode{handlePointerMove(e,t){var n;const r=0!==(null===(n=null==e?void 0:e.picks)||void 0===n?void 0:n.length);t.onUpdateCursor(r?"pointer":null)}handleClick(e,t){var n;if(!(0!==(null==e?void 0:e.picks.length)))return;const r=new Set(t.selectedIndexes),i=new Set(e.picks.map((e=>e.index))),o=function(e,t){for(const n of t)if(!e.has(n))return!1;return!0}(r,i)?function(...e){const t=new Set(e[0]);for(const n of e.slice(1))for(const e of n)t.delete(e);return t}(r,i):function(...e){return new Set(e.flatMap((e=>[...e])))}(r,i);null===(n=t.onEdit)||void 0===n||n.call(t,{updatedData:t.data,editType:"selectFeature",editContext:{selectedIndices:[...o]}})}}D.utils.getEditHandlesForGeometry=v(D.utils.getEditHandlesForGeometry);const ie=Object.seal({view:D.ViewMode,select:re,modify:D.ModifyMode,transform:D.TransformMode,linestring:D.DrawLineStringMode,point:D.DrawPointMode,polygon:D.DrawPolygonMode,lasso:D.DrawPolygonByDraggingMode}),oe=[ie.view,ie.select];function ae({deckgl:e,mapgl:t,layers:n,editor:r}){const o=(0,a.useRef)(null),[c,d]=se();let{blendingMode:f,controller:h,onClick:p,...g}=e;const y={...e.parameters,...f&&F(f)},[m,b]=(0,a.useState)(0),v=n.some((e=>"TripsLayer"===e.type));le(v,(e=>b(e)));const j=n.map((e=>null!=e.type?e.renderLayer(m):null)),x=q(r),k=null!=r&&!["view","select"].includes(r.mode);return k&&h&&(h={...h,doubleClickZoom:!1}),(0,i.jsxs)(a.Fragment,{children:[(0,i.jsx)(l.Z,{Deck:w,ref:o,...{...g,parameters:y},layers:[...j,x],onHover:k?void 0:d,onClick:k?void 0:p,getCursor:null==x?void 0:x.getCursor.bind(x),children:(0,i.jsx)(s.Z,{id:"map",controller:h,repeat:!0,children:t.mapStyle&&(0,i.jsx)(u.D5,{...t})})}),c&&(0,i.jsx)(E,{info:c})]})}const se=()=>{const[e,t]=(0,a.useState)(null);return[e,(0,a.useCallback)((e=>{if(!e.picked||!e.layer.props.tooltip||e.layer instanceof c.Z)return t(null);t(e)}),[])]},le=(e,t)=>{const n=(0,a.useRef)(0),r=(0,a.useRef)(Date.now()),i=()=>{t(Date.now()-r.current),n.current=window.requestAnimationFrame(i)};(0,a.useEffect)((()=>{if(e)return n.current=window.requestAnimationFrame(i),()=>window.cancelAnimationFrame(n.current)}),[e])};var ce=n(7786),ue=n(9080),de=n(803),fe=n(1956),he=n(5395);const pe=[0,0,0,255];function ge([e,t,n,r=255]){return`rgba(${e}, ${t}, ${n}, ${r/255})`}function ye(e,t){return Array.isArray(e)?t||4!==e.length?((t=null!=t?t:[])[0]=e[0],t[1]=e[1],t[2]=e[2],t[3]=3===e.length?e[3]:255,t):e:"string"==typeof e?(function(e,t){if(7===e.length){const n=parseInt(e.substring(1),16);t[0]=Math.floor(n/65536),t[1]=Math.floor(n/256%256),t[2]=n%256,t[3]=255}else if(9===e.length){const n=parseInt(e.substring(1),16);t[0]=Math.floor(n/16777216),t[1]=Math.floor(n/65536%256),t[2]=Math.floor(n/256%256),t[3]=n%256}}(e,t=null!=t?t:[]),t):pe}var me=n(4634),be=n(4177),ve=n(458),we=n(5801),je=n(3613),xe=n(602),ke=n(8973),Le=n(2625);function Oe(e){return null!==e&&"object"==typeof e&&"accessor"===e.type}function Se(e){return Oe(e)&&"scale"in e}var Pe=n(3693),Ce=n(4717),Me=n(6867),Te=n(3326),Ne=n(2112),_e=n(7693),Ee=n(8569),Ae=n(1435);class Ze extends Pe.Z{initializeState(){if(!function(e){return Fe.some((t=>e instanceof t))}(this))return;const e=this,t=e.getAttributeManager();t&&t.addInstanced({pickingColors:{type:A.default.UNSIGNED_BYTE,size:3,accessor:(t,{index:n,data:r,target:i})=>{var o,a,s;if(j(r)&&Array.isArray(r.indices))return e.encodePickingColor(r.indices.indexOf(r.indices[n]),i);const l=null===(a=null===(o=null==t?void 0:t.__source)||void 0===o?void 0:o.parent)||void 0===a?void 0:a.props.data;return j(l)&&Array.isArray(l.indices)?e.encodePickingColor(l.indices.indexOf(l.indices[t.__source.index]),i):e.encodePickingColor(null!==(s=null==t?void 0:t.__source.index)&&void 0!==s?s:n,i)},shaderAttributes:{pickingColors:{divisor:0},instancePickingColors:{divisor:1}}}})}}const Fe=[Ce.Z,Me.Z,Te.Z,Ne.Z,_e.Z,Ee.Z,Ae.Z];const Re=v((function(e){const t=function(e){return Object.entries(e.geometry).filter((([,e])=>/MULTI/.test(e))).map((([e,t])=>({name:e,type:t})))}(e);return 0===t.length?e:t.reduce(x,e)})),De=v(ye),Ie=v((function(e,t){const n=function({col:e,dataType:t},n){if("highlightColor"===n)switch(t){case"table":return function(e){return({index:t,layer:n})=>ye(n.props.data.frame[e][t])}(e);case"object":return function(e){return({object:t})=>ye(t[e])}(e);case"geojson":return function(e){return({object:t})=>ye(t.properties[e])}(e);default:throw TypeError(`${t} not supported`)}if(n.endsWith("Color"))switch(t){case"table":return function(e){return(t,{index:n,data:r,target:i})=>ye(r.frame[e][n],i)}(e);case"object":return function(e){return(t,{target:n})=>ye(t[e],n)}(e);case"geojson":return function(e){return(t,{target:n})=>ye(t.properties[e],n)}(e);default:throw TypeError(`${t} not supported`)}switch(t){case"table":return function(e){return(t,{index:n,data:r})=>r.frame[e][n]}(e);case"object":return function(e){return t=>t[e]}(e);case"geojson":return function(e){return t=>t.properties[e]}(e);default:throw TypeError(`${t} not supported`)}}(e,t);return{...e,getData:n}})),Ue=v((function(e,t){"palette"in e&&(e.range=e.palette.map((e=>ye(e))),e.unknown=ye(e.unknown));const n=function(e){switch(e.scale){case"linear":return(0,me.Z)().domain(e.domain).range(e.range).unknown(e.unknown).clamp(!0);case"power":return(0,be.ZP)().exponent(e.exponent).domain(e.domain).range(e.range).unknown(e.unknown).clamp(!0);case"log":return(0,ve.Z)().base(e.base).domain(e.domain).range(e.range).unknown(e.unknown).clamp(!0);case"symlog":return(0,we.Z)().domain(e.domain).range(e.range).unknown(e.unknown).clamp(!0);case"identity":return(0,je.Z)().unknown(e.unknown);case"threshold":case"quantile":return(0,xe.Z)().domain(e.domain).range(e.range).unknown(e.unknown);case"category":return(0,ke.Z)().domain(e.domain).range(e.range).unknown(e.unknown);case"quantize":return(0,Le.Z)().domain(e.domain).range(e.range).unknown(e.unknown);default:throw TypeError(`scale ${e.scale} not supported`)}}(e),r="highlightColor"===t?function({col:e,dataType:t},n){switch(t){case"table":return function(e,t){return({index:n,layer:r})=>t(r.props.data.frame[e][n])}(e,n);case"object":return function(e,t){return({object:n})=>t(n[e])}(e,n);case"geojson":return function(e,t){return({object:n})=>t(n.properties[e])}(e,n);default:throw TypeError(`${t} not supported`)}}(e,n):function({col:e,dataType:t},n){switch(t){case"table":return function(e,t){return(n,{index:r,data:i})=>t(i.frame[e][r])}(e,n);case"object":return function(e,t){return n=>t(n[e])}(e,n);case"geojson":return function(e,t){return n=>t(n.properties[e])}(e,n);default:throw TypeError(`${t} not supported`)}}(e,n);return{...e,name:t,getData:r,scaleData:n}}));class He{constructor({type:e,...t}){var n,r;Object.defineProperty(this,"type",{enumerable:!0,configurable:!0,writable:!0,value:void 0}),Object.defineProperty(this,"props",{enumerable:!0,configurable:!0,writable:!0,value:void 0}),Object.defineProperty(this,"scales",{enumerable:!0,configurable:!0,writable:!0,value:void 0});const i=Object.entries(t),o=function(e){const t=e.filter(We).map((([e,t])=>[e,De(t)])),n=e.find((([e])=>"colorRange"===e));n&&t.push([n[0],n[1].map((e=>De(e)))]);return t}(i),a=function(e){return e.filter((([,e])=>Oe(e))).map((([e,t])=>[e,Se(t)?Ue(t,e):Ie(t,e)]))}(i);this.type=e;const s=Object.fromEntries([...i,...o,...a.map((([e,t])=>[e,t.getData])),...Ve(i),["visible",null===(n=t.visible)||void 0===n||n],["updateTriggers",Ge(a)],["parameters",(l=t.parameters,c=t.blendingMode,{...l,...F(c)})]]);var l,c;j(s.data)&&(s.data=Re(s.data),s.extensions=[new Ze,...null!==(r=s.extensions)&&void 0!==r?r:[]]),"TileLayer"===e&&(s.renderSubLayers=e=>{const{bbox:{west:t,south:n,east:r,north:i},x:o,y:a,z:s}=e.tile;return new he.Z({...e,data:[{z:s,x:o,y:a}],image:e.data,bounds:[t,n,r,i]})}),this.props=s,this.scales=a.filter((([,e])=>Se(e))).map((([,e])=>e)),"TextLayer"===e&&"fonts"in document&&document.fonts.load(`16px ${t.fontFamily}`)}static create(e){return new He(e)}renderLayer(e){if("TripsLayer"===this.type&&void 0!==e){const t=this.props,{loopLength:n,animationSpeed:r}=t,i=n/r,o=e/1e3%i/i;t.currentTime=o*n}return new r[this.type]({...this.props})}renderLegend(){const e=this.scales.filter((e=>e.legend));return{id:this.props.id,name:this.props.name,scales:e}}renderSelector(){var e;return{id:this.props.id,groupName:this.props.groupName,name:this.props.name,visible:null===(e=this.props.visible)||void 0===e||e}}}function We([e,t]){return e.endsWith("Color")&&(Array.isArray(t)||"string"==typeof t)}function Ge(e){const t=e=>{const{getData:t,scaleData:n,palette:r,...i}=e;return i},n=e.map((([e,n])=>[e,t(n)]));return Object.fromEntries(n)}function Ve(e){return e.filter((([e])=>"getColorWeight"===e||"getElevationWeight"===e)).filter((([,e])=>null!==e&&"function"!=typeof e&&!Oe(e))).map((([e,t])=>[e,()=>t]))}var ze=n(6082),Be=n(912),$e=n(2372),Je=n(8426);const qe="U44LhpKlV8r1Vu1ZoZA3",Ye="XF770nELUcE_0zxo_aOg",Qe="HYRhC2aw1PSMYGCz2bDb",Xe="YNou4FYlc3N3GhFp2BkO",Ke="f44NGqZZGn4de9S3oTHN",et="xqKP289MUJ06Hgb3CjoW",tt="XctZC_fZAMvRMiHPlt9G",nt="ly9kEH8MpXynhBX6Fhcj",rt="iM2OiMQz6z_NtAQZZyPS",it="_8r8348KPS_nzNLR_CV_",ot="tzkFrkEU5cB_jY6zcuua",at=Date.now();function st({className:e,tooltip:t,onClick:n,children:r}){return(0,i.jsx)("button",{className:e,type:"button",onClick:n,title:t,children:r})}function lt({layers:e,onVisibilityChange:t}){const n=y(e,(e=>{var t;return null!==(t=e.groupName)&&void 0!==t?t:`${e.name}-${at}`})),r=(n,r,i)=>{if(i){const i=!e.filter((e=>!n.includes(e))).some((e=>e.visible));return t(e.map((e=>({...e,visible:n.includes(e)?r:i}))))}t(n.map((e=>({...e,visible:r}))))},[o,s]=(0,a.useState)(!1),l=()=>s((e=>!e));return o?(0,i.jsxs)("div",{className:Ye,children:[(0,i.jsx)("div",{className:Qe,children:(0,i.jsxs)(st,{className:Xe,onClick:l,tooltip:"Close",children:[(0,i.jsx)(ze.Z,{className:ot,fontSize:"small"}),(0,i.jsx)("span",{className:Ke,children:"Layers"})]})}),(0,i.jsx)("div",{className:et,children:Array.from(n.entries(),(([e,t,[{groupName:n}]=t])=>(0,i.jsx)(ct,{group:n,layers:t,onChange:r},e)))})]}):(0,i.jsx)(st,{className:qe,tooltip:"Layer selector",onClick:l,children:(0,i.jsx)(ze.Z,{className:ot,fontSize:"small"})})}function ct({group:e,layers:t,onChange:n}){const r=Array.from(y(t,(e=>e.name)),(([e,t])=>(0,i.jsx)(ut,{name:e,layers:t,onChange:n},e)));return e?(0,i.jsxs)(a.Fragment,{children:[(0,i.jsx)(ut,{name:e,layers:t,onChange:n}),(0,i.jsx)("div",{className:tt,children:r})]}):(0,i.jsx)(a.Fragment,{children:r})}function ut({name:e,layers:t,onChange:n}){const r=function(e){let t=e[0].visible;for(const n of e)if(n.visible!==t)return null;return t}(t),o=null===r,s=(0,a.useRef)(null);(0,a.useEffect)((()=>{s.current&&(s.current.indeterminate=o)}),[o]);const l=(0,a.useRef)((()=>!1)),c=r?Be.Z:o?$e.Z:Je.Z,u=m(nt,r||o?rt:null);return(0,i.jsxs)("label",{className:u,children:[(0,i.jsx)("input",{ref:s,className:it,type:"checkbox",onChange:()=>{l.current()?n(t,!0,!0):l.current=dt((()=>n(t,!r,!1)),200)},checked:null==r||r}),(0,i.jsx)(c,{fontSize:"small",className:ot}),(0,i.jsx)("span",{className:Ke,children:e})]})}const dt=(e,t=200)=>{const n={current:0};let r=0;const i=o=>{if(r||(r=o),o-r>t)return n.current=0,void e();n.current=globalThis.requestAnimationFrame(i)};return n.current=globalThis.requestAnimationFrame(i),()=>0!==n.current&&(globalThis.cancelAnimationFrame(n.current),n.current=0,!0)},ft="lWOwchFb6W2NpcWR4ZQS",ht="mIJjIoOSsjLZMp591rN0",pt="OULly07OGkLPRiEDgp00",gt="oxctK5Tcknb3syUfT7xg",yt="KEbGPBIjLXnjAiUTu8eP",mt="MBBFrOSR5F_grZcyOCp0",bt="l_4PaMO7BWOn4DcLN5Oh",vt="aWzYqDozdq6Vl4QuIJ1y",wt="xaprV4ANDgRiE5ai1hUl",jt="f6SnauerJY75ZqNAuK56",xt=16;function kt({layers:e}){return 0===e.length?null:(0,i.jsx)("div",{className:ft,children:e.map((e=>(0,i.jsx)(Lt,{...e},e.id)))})}function Lt({name:e,scales:t}){return 0===t.length?null:(0,i.jsxs)("div",{className:ht,children:[(0,i.jsx)("div",{className:pt,title:e,children:e}),t.map((e=>(0,i.jsx)(Ot,{...e},e.name)))]})}function Ot(e){var t;const n=e.name.replace(/^get/,"").replace(/([A-Z])/g," $1").toLowerCase();const r="palette"in e;const o=function(e){return"linear"===e.scale||"power"===e.scale||"log"===e.scale||"symlog"===e.scale}(e),a=function(e){return"threshold"===e.scale||"quantile"===e.scale||"quantize"===e.scale}(e);return(0,i.jsxs)("div",{className:gt,children:[(0,i.jsx)("div",{className:yt,children:n}),(0,i.jsx)("span",{className:mt,children:"by "}),(0,i.jsx)("span",{className:bt,title:e.col,children:null!==(t=e.scaleBy)&&void 0!==t?t:e.col}),r&&o&&(0,i.jsx)(St,{...e}),r&&a&&(0,i.jsx)(Pt,{...e}),r&&"category"===e.scale&&(0,i.jsx)(Ct,{...e})]})}const St=({ticks:e,scaleData:t})=>{const n=e.map(((e,t)=>t)).slice(1,-1),r=xt*(e.length-1),o=r+11+1;return(0,i.jsxs)("svg",{className:vt,height:o,shapeRendering:"crispEdges",children:[(0,i.jsxs)("svg",{y:5,children:[(0,i.jsx)("image",{width:20,height:r,href:Tt(t),preserveAspectRatio:"none"}),n.map((e=>(0,i.jsx)("line",{className:jt,x2:20,y1:xt*e,y2:xt*e},e)))]}),(0,i.jsx)(Mt,{ticks:e,y:-2})]})},Pt=({ticks:e,range:t})=>{const n=t.map(ge),r=xt*(e.length-1)+11+1;return(0,i.jsxs)("svg",{className:vt,height:r,shapeRendering:"crispEdges",children:[(0,i.jsx)("svg",{y:5,children:n.map(((e,t)=>(0,i.jsx)("rect",{width:20,height:xt,y:t*xt,fill:e},t)))}),(0,i.jsx)(Mt,{ticks:e,y:-2})]})};function Ct({ticks:e,range:t,unknownTick:n,unknown:r}){const o=n?[...t,r]:t,a=n?[...e,n]:e,s=o.map(ge),l=xt*a.length;return(0,i.jsxs)("svg",{className:vt,height:l,children:[(0,i.jsx)("svg",{children:s.map(((e,t)=>(0,i.jsx)("rect",{width:20,height:14,y:1+t*xt,fill:e},t)))}),(0,i.jsx)(Mt,{ticks:a})]})}function Mt({ticks:e,x:t=28,y:n=0}){return(0,i.jsx)("svg",{x:t,y:n,children:e.map(((e,t)=>(0,i.jsx)("text",{className:wt,y:xt*t,dy:11,children:String(e)},t)))})}function Tt(e,t=200){const n=e.range().length,r=[...Array(n).keys()].map((e=>e/(n-1))),i=e.copy().range(r).invert,o=document.createElement("canvas"),a=o.getContext("2d");o.width=1,o.height=t;for(let n=0;n<t;n++)a.fillStyle=ge(e(i(n/t))),a.fillRect(0,n,1,1);return o.toDataURL()}var Nt=n(7046),_t=n(6533),Et=n(9292),At=n(9744),Zt=n(9758),Ft=n(7089),Rt=n(1610),Dt=n(904),It=n(5482),Ut=n(7226),Ht=n(5579),Wt=n(9702),Gt=n(2149),Vt=n(6761);const zt="S_Jw5xlS4ysjLfEnG1_V",Bt="ulA2RQmkQhSnak9JlXnZ",$t="aIE33mXFqOBosVEFBrb8",Jt="llmi5hyDHtcHqa2r__su",qt="ilhkc5o5ZlSd4IaGytLF",Yt=()=>{};function Qt({mode:e,geojson:t,selectedFeatureIndices:n,onSetMode:r=Yt,onDownload:o=Yt,onUpload:a=Yt,onDeleteSelected:s=Yt,canUndo:l,canRedo:c,onUndo:u=Yt,onRedo:d=Yt}){const f=(null==n?void 0:n.length)>0,h=(null==t?void 0:t.features.length)>0;return(0,i.jsxs)("div",{className:zt,children:[(0,i.jsxs)("div",{className:Bt,children:[(0,i.jsx)(Xt,{name:"View",icon:Dt.Z,iconStyle:{transform:"scale(0.9)"},active:"view"===e,onClick:()=>r("view")}),(0,i.jsx)(Xt,{name:"Select",icon:It.Z,active:"select"===e,disabled:!h,onClick:()=>r("select")})]}),(0,i.jsxs)("div",{className:Bt,children:[(0,i.jsx)(Xt,{name:"Modify",icon:Et.Z,active:"modify"===e,disabled:!f,onClick:()=>r("modify")}),(0,i.jsx)(Xt,{name:"Transform",icon:Ut.Z,active:"transform"===e,disabled:!f,onClick:()=>r("transform")}),(0,i.jsx)(Xt,{name:"Point",icon:Ht.Z,active:"point"===e,onClick:()=>r("point")}),(0,i.jsx)(Xt,{name:"LineString",icon:At.Z,active:"linestring"===e,onClick:()=>r("linestring")}),(0,i.jsx)(Xt,{name:"Polygon",icon:_t.Z,active:"polygon"===e,onClick:()=>r("polygon")}),(0,i.jsx)(Xt,{name:"Lasso",icon:Nt.Z,active:"lasso"===e,onClick:()=>r("lasso")})]}),(0,i.jsxs)("div",{className:Bt,children:[(0,i.jsx)(Xt,{name:"Download",icon:Wt.Z,disabled:!h,onClick:()=>o(t)}),(0,i.jsx)(Xt,{name:"Upload",icon:Gt.Z,disabled:!h,onClick:()=>a(t)})]}),(0,i.jsxs)("div",{className:Bt,children:[(0,i.jsx)(Xt,{name:"Undo",icon:Zt.Z,disabled:!l,onClick:u}),(0,i.jsx)(Xt,{name:"Redo",icon:Ft.Z,disabled:!c,onClick:d})]}),(0,i.jsx)("div",{className:Bt,children:(0,i.jsx)(Xt,{name:"Delete",icon:Vt.Z,disabled:!f,onClick:()=>s(n)})})]})}function Xt({name:e,onClick:t=Yt,disabled:n=!1,active:r=!1,icon:o,iconStyle:a}){const s=m($t,r?Jt:null);return(0,i.jsx)("button",{className:s,onClick:t,title:e,disabled:n,children:o&&(0,i.jsx)(Rt.Z,{component:o,className:qt,fontSize:"small",style:a})})}const Kt="rdeck",en="XTuYKSlBcC933W4sKWtC",tn="kQnelQ4hkAJEJHLO0NJI",nn="hQbOOdEZw0LO0llGKVqS",rn="cSol54mlVTgAnRzj_GUM";function on({theme:e,deckgl:t,mapgl:n,layers:r,lazyLoad:o=!1,layerSelector:s=!1,onLayerVisibilityChange:l,editor:c}){var u;const d=null!==(u=null==r?void 0:r.map(He.create))&&void 0!==u?u:[],f=(0,a.useRef)(null),h=function(e,t){const[n,r]=(0,a.useState)(!1);return(0,a.useEffect)((()=>{if(t&&e.current){const t=new IntersectionObserver((e=>{r(e[0].isIntersecting)}),{threshold:0});return t.observe(e.current),()=>t.disconnect()}}),[t,e]),n}(f,o),p=!o||h;return(0,i.jsxs)("div",{ref:f,className:m(Kt,e),children:[(0,i.jsx)("div",{className:m(en,tn),children:s&&(0,i.jsx)(lt,{layers:d.filter((e=>e.props.visibilityToggle)).map((e=>e.renderSelector())).reverse(),onVisibilityChange:l})}),(0,i.jsx)("div",{className:m(en,nn),children:(0,i.jsx)(kt,{layers:d.filter((e=>e.props.visible)).map((e=>e.renderLegend())).reverse()})}),(0,i.jsx)("div",{className:m(en,rn),children:c&&(0,i.jsx)(Qt,{...c})}),p&&(0,i.jsx)(ae,{deckgl:t,mapgl:n,layers:d,editor:c})]})}var an=n(6935);function sn(e){const t=e instanceof an.Z?e:new an.Z(e),n=h(t,"longitude","latitude","zoom","bearing","pitch","altitude");return{bounds:t.getBounds(),viewState:{...n,center:t.unprojectFlat(t.center)}}}function ln(e,t){const n=cn(e);for(const[r,i]of n)i.configurable&&(i.writable?un(e,r,i,t):"function"==typeof i.set&&dn(e,r,i,t));if(Object.getPrototypeOf({})===Object.getPrototypeOf(e))return e;const r=cn(Object.getPrototypeOf(e));for(const[n,i]of r)i.configurable&&"function"==typeof i.set&&dn(e,n,i,t);return e}function cn(e){return Object.entries(Object.getOwnPropertyDescriptors(e))}function un(e,t,{value:n},r){return Reflect.defineProperty(e,t,{get:()=>n,set(e){Object.is(e,n)||(n=e,null==r||r({[t]:e}))}})}function dn(e,t,n,r){return Reflect.defineProperty(e,t,{...n,set(i){var o,a;const s=null===(o=n.get)||void 0===o?void 0:o.call(e);Object.is(i,s)||(null===(a=n.set)||void 0===a||a.call(e,i),null==r||r({[t]:i}))}})}const fn={longitude:0,latitude:0,zoom:0,pitch:0,bearing:0};class hn{constructor(e){Object.defineProperty(this,"useDevicePixels",{enumerable:!0,configurable:!0,writable:!0,value:void 0}),Object.defineProperty(this,"pickingRadius",{enumerable:!0,configurable:!0,writable:!0,value:void 0}),Object.defineProperty(this,"blendingMode",{enumerable:!0,configurable:!0,writable:!0,value:void 0}),Object.defineProperty(this,"effects",{enumerable:!0,configurable:!0,writable:!0,value:void 0}),Object.defineProperty(this,"controller",{enumerable:!0,configurable:!0,writable:!0,value:void 0}),Object.defineProperty(this,"initialViewState",{enumerable:!0,configurable:!0,writable:!0,value:fn}),Object.defineProperty(this,"initialBounds",{enumerable:!0,configurable:!0,writable:!0,value:void 0}),Object.defineProperty(this,"onViewStateChange",{enumerable:!0,configurable:!0,writable:!0,value:void 0}),Object.defineProperty(this,"onClick",{enumerable:!0,configurable:!0,writable:!0,value:void 0}),Object.assign(this,e)}}var pn,gn,yn,mn,bn=function(e,t,n,r){if("a"===n&&!r)throw new TypeError("Private accessor was defined without a getter");if("function"==typeof t?e!==t||!r:!t.has(e))throw new TypeError("Cannot read private member from an object whose class did not declare it");return"m"===n?r:"a"===n?r.call(e):r?r.value:t.get(e)},vn=function(e,t,n,r,i){if("m"===r)throw new TypeError("Private method is not writable");if("a"===r&&!i)throw new TypeError("Private accessor was defined without a setter");if("function"==typeof t?e!==t||!i:!t.has(e))throw new TypeError("Cannot write private member to an object whose class did not declare it");return"a"===r?i.call(e,n):i?i.value=n:t.set(e,n),n};const wn=Object.freeze({type:"FeatureCollection",features:[]});class jn extends class{constructor(e){Object.defineProperty(this,"mode",{enumerable:!0,configurable:!0,writable:!0,value:"view"}),Object.defineProperty(this,"geojson",{enumerable:!0,configurable:!0,writable:!0,value:wn}),Object.defineProperty(this,"selectedFeatureIndices",{enumerable:!0,configurable:!0,writable:!0,value:[]}),Object.defineProperty(this,"onSetMode",{enumerable:!0,configurable:!0,writable:!0,value:e=>this.setMode(e)}),Object.defineProperty(this,"onSelectFeatures",{enumerable:!0,configurable:!0,writable:!0,value:e=>this.selectFeatures(e)}),Object.defineProperty(this,"onSetGeoJson",{enumerable:!0,configurable:!0,writable:!0,value:e=>this.setGeoJson(e)}),Object.defineProperty(this,"onDeleteSelected",{enumerable:!0,configurable:!0,writable:!0,value:e=>this.deleteSelected(e)}),Object.defineProperty(this,"onUpload",{enumerable:!0,configurable:!0,writable:!0,value:e=>{}}),Object.defineProperty(this,"onDownload",{enumerable:!0,configurable:!0,writable:!0,value:e=>this.download(e)}),Object.defineProperty(this,"upload",{enumerable:!0,configurable:!0,writable:!0,value:void 0}),Object.assign(this,e)}setState(e={}){Object.assign(this,e)}setMode(e){var t,n;switch(e){case"modify":this.mode=(null===(t=this.selectedFeatureIndices)||void 0===t?void 0:t.length)?"modify":"view";break;case"select":this.mode=(null===(n=this.geojson)||void 0===n?void 0:n.features.length)?"select":"view";break;default:this.mode=e}}selectFeatures(e){this.selectedFeatureIndices=e}setGeoJson(e){this.geojson=e}deleteSelected(e){const t=this.geojson.features.filter(((t,n)=>!e.includes(n)));Object.assign(this,{mode:["modify","transform"].includes(this.mode)?"view":this.mode,selectedFeatureIndices:[],geojson:{...this.geojson,features:t}})}download(e){const t=new Blob([JSON.stringify(e)],{type:"application/geo+json"}),n=document.createElement("a");n.href=URL.createObjectURL(t),n.download="rdeck.geojson",n.click(),this.setMode("view")}}{constructor(e){super(e),pn.add(this),gn.set(this,-1),yn.set(this,[]),Object.defineProperty(this,"onUndo",{enumerable:!0,configurable:!0,writable:!0,value:()=>this.undo()}),Object.defineProperty(this,"onRedo",{enumerable:!0,configurable:!0,writable:!0,value:()=>this.redo()}),bn(this,pn,"m",mn).call(this)}get canUndo(){return bn(this,gn,"f")>0}get canRedo(){return bn(this,gn,"f")<bn(this,yn,"f").length-1}undo(){this.canUndo&&(vn(this,gn,bn(this,gn,"f")-1,"f"),Object.assign(this,bn(this,yn,"f")[bn(this,gn,"f")]))}redo(){this.canRedo&&(vn(this,gn,bn(this,gn,"f")+1,"f"),Object.assign(this,bn(this,yn,"f")[bn(this,gn,"f")]))}setState(e){super.setState(e),bn(this,yn,"f")[bn(this,gn,"f")]=xn(this)}setMode(e){super.setMode(e),bn(this,pn,"m",mn).call(this)}selectFeatures(e){super.selectFeatures(e),bn(this,pn,"m",mn).call(this)}setGeoJson(e){super.setGeoJson(e),bn(this,pn,"m",mn).call(this)}deleteSelected(e){super.deleteSelected(e),bn(this,pn,"m",mn).call(this)}}function xn({mode:e,geojson:t,selectedFeatureIndices:n}){return{mode:e,geojson:t,selectedFeatureIndices:n}}gn=new WeakMap,yn=new WeakMap,pn=new WeakSet,mn=function(e=this){const t=xn(e);(function(e,t){if(Object.is(e,t))return!0;if(null==e||null==t)return!1;const n=Object.keys(e);if(n.length!==Object.keys(t).length)return!1;for(const r of n)if(!Object.is(e[r],t[r])||t.hasOwnProperty(r))return!1;return!0})(t,bn(this,yn,"f")[bn(this,gn,"f")])||(bn(this,yn,"f").length=bn(this,gn,"f")+1,vn(this,gn,bn(this,yn,"f").push(t)-1,"f"))};class kn{constructor(e){Object.defineProperty(this,"mapboxAccessToken",{enumerable:!0,configurable:!0,writable:!0,value:void 0}),Object.defineProperty(this,"mapStyle",{enumerable:!0,configurable:!0,writable:!0,value:void 0}),Object.defineProperty(this,"reuseMaps",{enumerable:!0,configurable:!0,writable:!0,value:!0}),Object.assign(this,e)}}var Ln,On,Sn,Pn,Cn=function(e,t,n,r){if("a"===n&&!r)throw new TypeError("Private accessor was defined without a getter");if("function"==typeof t?e!==t||!r:!t.has(e))throw new TypeError("Cannot read private member from an object whose class did not declare it");return"m"===n?r:"a"===n?r.call(e):r?r.value:t.get(e)},Mn=function(e,t,n,r,i){if("m"===r)throw new TypeError("Private method is not writable");if("a"===r&&!i)throw new TypeError("Private accessor was defined without a setter");if("function"==typeof t?e!==t||!i:!t.has(e))throw new TypeError("Cannot write private member to an object whose class did not declare it");return"a"===r?i.call(e,n):i?i.value=n:t.set(e,n),n};class Tn{constructor(e={},t){Object.defineProperty(this,"theme",{enumerable:!0,configurable:!0,writable:!0,value:"kepler"}),Ln.set(this,new hn),On.set(this,new kn),Object.defineProperty(this,"layers",{enumerable:!0,configurable:!0,writable:!0,value:[]}),Object.defineProperty(this,"layerSelector",{enumerable:!0,configurable:!0,writable:!0,value:!1}),Object.defineProperty(this,"lazyLoad",{enumerable:!0,configurable:!0,writable:!0,value:!1}),Sn.set(this,null),Object.defineProperty(this,"onChange",{enumerable:!0,configurable:!0,writable:!0,value:void 0}),Pn.set(this,(()=>{var e;return null===(e=this.onChange)||void 0===e?void 0:e.call(this)})),this.setState(e),Reflect.defineProperty(this,"onChange",{configurable:!1,enumerable:!1,value:t,writable:!0}),this.setLayerVisibility=this.setLayerVisibility.bind(this),ln(this,Cn(this,Pn,"f"))}get deckgl(){return Cn(this,Ln,"f")}set deckgl(e){Mn(this,Ln,ln(new hn(e),Cn(this,Pn,"f")),"f")}get mapgl(){return Cn(this,On,"f")}set mapgl(e){Mn(this,On,ln(new kn(e),Cn(this,Pn,"f")),"f")}get editor(){return Cn(this,Sn,"f")}set editor(e){null==e?Mn(this,Sn,null,"f"):null==Cn(this,Sn,"f")?Mn(this,Sn,ln(new jn(e),Cn(this,Pn,"f")),"f"):Cn(this,Sn,"f").setState(e)}setState({deckgl:e,mapgl:t,editor:n,...r}={}){Object.assign(this,{...r,deckgl:{...this.deckgl,...e},mapgl:{...this.mapgl,...t}}),void 0!==n&&(this.editor=null!=n?{...this.editor,...n}:null)}upsertLayer(e){var t,n,r;const i=this.layers.find((t=>t.id===e.id));if(null==i)return void(this.layers=[...this.layers,e]);const o={...i,...e,visible:null!==(t=e.visible)&&void 0!==t?t:null==i?void 0:i.visible,data:null!==(r=null!==(n=e.data)&&void 0!==n?n:null==i?void 0:i.data)&&void 0!==r?r:null};this.layers=this.layers.map((e=>e===i?o:e))}setLayerVisibility(e){if(0===e.length)return;this.layers=this.layers.map((t=>{const n=e.find((e=>((e,t)=>{const n=e.name===t.name,r=e.groupName===t.groupName;return n&&r||null==e.name&&null!=e.groupName&&r})(e,t)&&e.visible!==t.visible));return n?{...t,visible:n.visible}:t}))}}Ln=new WeakMap,On=new WeakMap,Sn=new WeakMap,Pn=new WeakMap;var Nn,_n,En,An,Zn,Fn,Rn=function(e,t,n,r,i){if("m"===r)throw new TypeError("Private method is not writable");if("a"===r&&!i)throw new TypeError("Private accessor was defined without a setter");if("function"==typeof t?e!==t||!i:!t.has(e))throw new TypeError("Cannot write private member to an object whose class did not declare it");return"a"===r?i.call(e,n):i?i.value=n:t.set(e,n),n},Dn=function(e,t,n,r){if("a"===n&&!r)throw new TypeError("Private accessor was defined without a getter");if("function"==typeof t?e!==t||!r:!t.has(e))throw new TypeError("Cannot read private member from an object whose class did not declare it");return"m"===n?r:"a"===n?r.call(e):r?r.value:t.get(e)};class In{constructor(e,t){Nn.set(this,void 0),_n.set(this,void 0),En.set(this,void 0),An.set(this,((e,t)=>{var n,r,i;if(null===(r=(n=Dn(this,En,"f").deckgl).onClick)||void 0===r||r.call(n,e,t),HTMLWidgets.shinyMode){const t={coordinate:e.coordinate,...sn(e.viewport),layer:h(null===(i=e.layer)||void 0===i?void 0:i.props,"id","name","groupName"),object:P(e)};Shiny.setInputValue(`${this.element.id}_click`,t,{priority:"event"})}})),Zn.set(this,(e=>{var t,n;if(null===(n=(t=Dn(this,En,"f").deckgl).onViewStateChange)||void 0===n||n.call(t,e),HTMLWidgets.shinyMode){const t=sn(e.viewState);Shiny.setInputValue(`${this.element.id}_viewstate`,t,{priority:"event"})}})),Fn.set(this,(e=>{HTMLWidgets.shinyMode&&Shiny.setInputValue(`${this.element.id}_editorupload`,{geojson:JSON.stringify(e)})})),Rn(this,_n,e,"f"),Rn(this,Nn,(0,o.s)(e),"f"),Rn(this,En,new Tn(t,(()=>this.render())),"f"),HTMLWidgets.shinyMode&&(Shiny.addCustomMessageHandler(`${e.id}:layer`,(e=>{this.state.upsertLayer(e)})),Shiny.addCustomMessageHandler(`${e.id}:deck`,(e=>{this.state.setState(e)})))}get element(){return Dn(this,_n,"f")}get state(){return Dn(this,En,"f")}render(){let{deckgl:e,mapgl:t,editor:n,...r}=Dn(this,En,"f");e={...e,onClick:Dn(this,An,"f"),onViewStateChange:Dn(this,Zn,"f")},null!=n&&(n={...n,canUndo:n.canUndo,canRedo:n.canRedo,onUpload:e=>{Dn(this,Fn,"f").call(this,e),null==n||n.setMode("view")}}),null!=e.initialBounds&&delete e.initialViewState,Dn(this,Nn,"f").render((0,i.jsx)(a.StrictMode,{children:(0,i.jsx)(on,{...{...r,deckgl:e,mapgl:t,editor:n,onLayerVisibilityChange:this.state.setLayerVisibility}})}))}setLayerVisibility(e){return Dn(this,En,"f").setLayerVisibility(e)}}Nn=new WeakMap,_n=new WeakMap,En=new WeakMap,An=new WeakMap,Zn=new WeakMap,Fn=new WeakMap;const Un={name:"rdeck",type:"output",factory(e,t,n){let r=null;return{get instance(){return r},renderValue(t){r=new In(e,t),r.render()},resize(){}}}};function Hn(e){const t=document.getElementById(e);return t&&Gn(t)}function Wn(){return[...document.querySelectorAll(".rdeck.html-widget")].map((e=>Gn(e))).filter((e=>e instanceof In))}function Gn(e){var t;return null===(t=null==e?void 0:e.htmlwidget_data_init_result)||void 0===t?void 0:t.instance}HTMLWidgets.widget(Un);const Vn="0.4.0"},479:()=>{},9125:()=>{},9214:()=>{}},i={};function o(e){var t=i[e];if(void 0!==t)return t.exports;var n=i[e]={exports:{}};return r[e].call(n.exports,n,n.exports,o),n.exports}o.m=r,e=[],o.O=(t,n,r,i)=>{if(!n){var a=1/0;for(u=0;u<e.length;u++){for(var[n,r,i]=e[u],s=!0,l=0;l<n.length;l++)(!1&i||a>=i)&&Object.keys(o.O).every((e=>o.O[e](n[l])))?n.splice(l--,1):(s=!1,i<a&&(a=i));if(s){e.splice(u--,1);var c=r();void 0!==c&&(t=c)}}return t}i=i||0;for(var u=e.length;u>0&&e[u-1][2]>i;u--)e[u]=e[u-1];e[u]=[n,r,i]},o.n=e=>{var t=e&&e.__esModule?()=>e.default:()=>e;return o.d(t,{a:t}),t},n=Object.getPrototypeOf?e=>Object.getPrototypeOf(e):e=>e.__proto__,o.t=function(e,r){if(1&r&&(e=this(e)),8&r)return e;if("object"==typeof e&&e){if(4&r&&e.__esModule)return e;if(16&r&&"function"==typeof e.then)return e}var i=Object.create(null);o.r(i);var a={};t=t||[null,n({}),n([]),n(n)];for(var s=2&r&&e;"object"==typeof s&&!~t.indexOf(s);s=n(s))Object.getOwnPropertyNames(s).forEach((t=>a[t]=()=>e[t]));return a.default=()=>e,o.d(i,a),i},o.d=(e,t)=>{for(var n in t)o.o(t,n)&&!o.o(e,n)&&Object.defineProperty(e,n,{enumerable:!0,get:t[n]})},o.g=function(){if("object"==typeof globalThis)return globalThis;try{return this||new Function("return this")()}catch(e){if("object"==typeof window)return window}}(),o.o=(e,t)=>Object.prototype.hasOwnProperty.call(e,t),o.r=e=>{"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(e,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(e,"__esModule",{value:!0})},(()=>{var e={472:0};o.O.j=t=>0===e[t];var t=(t,n)=>{var r,i,[a,s,l]=n,c=0;if(a.some((t=>0!==e[t]))){for(r in s)o.o(s,r)&&(o.m[r]=s[r]);if(l)var u=l(o)}for(t&&t(n);c<a.length;c++)i=a[c],o.o(e,i)&&e[i]&&e[i][0](),e[i]=0;return o.O(u)},n=self.webpackChunkrdeck=self.webpackChunkrdeck||[];n.forEach(t.bind(null,0)),n.push=t.bind(null,n.push.bind(n))})();var a=o.O(void 0,[486,474,619,315,568,175,627,977,811,42,899,667,324,134,133,468,745,783,535,528,784,485,378,645,394,816,650,869,706,836,458,769,67,806,551,282,953,538,49,844,639,825,596],(()=>o(5416)));return a=o.O(a)})()));
//# sourceMappingURL=data:application/json;charset=utf-8;base64,