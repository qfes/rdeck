!function(e,t){"object"==typeof exports&&"object"==typeof module?module.exports=t():"function"==typeof define&&define.amd?define([],t):"object"==typeof exports?exports.rdeck=t():e.rdeck=t()}(self,(()=>(()=>{var e,t,n,r={5171:(e,t,n)=>{"use strict";n.r(t),n.d(t,{VERSION:()=>Xn,Widget:()=>$n,binding:()=>Jn,getWidgetById:()=>qn,getWidgets:()=>Yn});var r={};n.r(r),n.d(r,{AGGREGATION_OPERATION:()=>me.KM,ArcLayer:()=>ge.ArcLayer,BitmapLayer:()=>ge.BitmapLayer,CPUGridLayer:()=>me.ab,ColumnLayer:()=>ge.ColumnLayer,ContourLayer:()=>me.YY,GPUGridLayer:()=>me.ML,GeoJsonLayer:()=>ge.GeoJsonLayer,GreatCircleLayer:()=>ye.GreatCircleLayer,GridCellLayer:()=>ge.GridCellLayer,GridLayer:()=>me.mU,H3ClusterLayer:()=>ye.H3ClusterLayer,H3HexagonLayer:()=>ye.H3HexagonLayer,HeatmapLayer:()=>me.zP,HexagonLayer:()=>me.dX,IconLayer:()=>ge.IconLayer,LineLayer:()=>ge.LineLayer,MVTLayer:()=>ye.MVTLayer,PathLayer:()=>ge.PathLayer,PointCloudLayer:()=>ge.PointCloudLayer,PolygonLayer:()=>ge.PolygonLayer,QuadkeyLayer:()=>ye.QuadkeyLayer,S2Layer:()=>ye.S2Layer,ScatterplotLayer:()=>ge.ScatterplotLayer,ScenegraphLayer:()=>be.ScenegraphLayer,ScreenGridLayer:()=>me.p3,SimpleMeshLayer:()=>be.SimpleMeshLayer,SolidPolygonLayer:()=>ge.SolidPolygonLayer,TerrainLayer:()=>ye.TerrainLayer,TextLayer:()=>ge.TextLayer,Tile3DLayer:()=>ye.Tile3DLayer,TileLayer:()=>ye.TileLayer,TripsLayer:()=>ye.TripsLayer,_AggregationLayer:()=>me.Di,_BinSorter:()=>me.l0,_CPUAggregator:()=>me.oA,_GPUGridAggregator:()=>me.Wc,_MultiIconLayer:()=>ge._MultiIconLayer,_TextBackgroundLayer:()=>ge._TextBackgroundLayer,_getURLFromTemplate:()=>ye._getURLFromTemplate});n(8559),n(5837);var i=n(5893),o=n(745),a=n(7294),s=(n(6158),n(2687),n(4009)),l=n(6024),c=n(3295),u=n(17),d=n(8289),f=n(7013);function h(e,...t){if(null==e)return null;const n=t.map((t=>[t,e[t]]));return Object.fromEntries(n)}function p(e){return e.clientHeight>0&&e.clientHeight>0?e:e.parentElement?p(e.parentElement):null}function g(e){const t=p(e);if(e===t||null==t)return{width:e.clientWidth,height:e.clientHeight};const{width:n,height:r}=getComputedStyle(e),i=document.createElement("div");Object.assign(i.style,{width:n,height:r,display:"hidden"}),t.appendChild(i);const o={width:i.clientWidth,height:i.clientHeight};return t.removeChild(i),o}function m(e,t){const n=new Map;for(const r of e){const e=t(r);n.has(e)?n.get(e).push(r):n.set(e,[r])}return n}function y(...e){return e.filter((e=>null!=e)).join(" ")}class b{constructor(){Object.defineProperty(this,"_val",{enumerable:!0,configurable:!0,writable:!0,value:new Map}),Object.defineProperty(this,"_ref",{enumerable:!0,configurable:!0,writable:!0,value:new WeakMap})}getStore(e){return"object"==typeof(t=e)&&null!==t||"function"==typeof t?this._ref:this._val;var t}has(e){return this.getStore(e).has(e)}get(e){return this.getStore(e).get(e)}set(e,t){return this.getStore(e).set(e,t),this}}function v(e){const t=new b;return(...n)=>{const r=n[0],i=n.slice(0,-1).reduceRight(((e,t)=>{if(e.has(t))return e.get(t);const n=new b;return e.set(t,n),n}),t);if(i.has(r))return i.get(r);const o=e(...n);return i.set(r,o),o}}class w extends d.Z{setProps(e){const t=e.initialBounds;if(null!=t&&(n=t,r=this.props.initialBounds,!(n===r||null==n&&null==r||null!=n&&null!=r&&(null==n?void 0:n.every(((e,t)=>e===(null==r?void 0:r[t]))))))){const[n,r,i,o]=t,a=[[Math.max(n,-180),Math.max(r,-85.051129)],[Math.min(i,180),Math.min(o,85.051129)]];this._setCanvasSize(e);const{width:s,height:l}=this._getMapSize();e={...e,initialViewState:{...(0,f.Xg)({height:l,width:s,bounds:a}),bearing:0,pitch:0}}}var n,r;super.setProps(e)}_getMapSize(){const e=this.canvas;if(null==e)return{width:this.width,height:this.height};if(0===e.clientWidth&&0===e.clientHeight){const t=e.closest(".rdeck.html-widget");if(null!=t)return g(t)}return{width:e.clientWidth,height:e.clientHeight}}}function j(e){return null!==e&&"object"==typeof e&&"frame"in e}function x(e,{name:t,type:n}){var r,i,o,a;const s=e.frame,l=Object.fromEntries(Object.entries(s).map((([e])=>[e,[]]))),c=Object.keys(e.frame).filter((e=>e!==t)),u=s[t],d=function(e){switch(e){case"MULTIPOINT":return k;case"MULTILINESTRING":return L;case"MULTIPOLYGON":return O;default:throw TypeError(`${e} not supported`)}}(n),f=e=>{for(const t of c)l[t].push(s[t][e])},h=[];for(let n=0;n<e.length;n++){const s=u[n];if(d(s)){l[t].push(...s);for(let t=0;t<s.length;t++)f(n),h.push(null!==(i=null===(r=e.indices)||void 0===r?void 0:r[n])&&void 0!==i?i:n)}else l[t].push(s),f(n),h.push(null!==(a=null===(o=e.indices)||void 0===o?void 0:o[n])&&void 0!==a?a:n)}return{length:l[t].length,geometry:{...e.geometry,[t]:n.replace("MULTI","")},indices:h,frame:l}}function k(e){return Array.isArray(null==e?void 0:e[0])}function L(e){var t;return Array.isArray(null===(t=null==e?void 0:e[0])||void 0===t?void 0:t[0])}function O(e){var t,n;return Array.isArray(null===(n=null===(t=null==e?void 0:e[0])||void 0===t?void 0:t[0])||void 0===n?void 0:n[0])}Object.defineProperty(w,"defaultProps",{enumerable:!0,configurable:!0,writable:!0,value:{...d.Z.defaultProps,initialBounds:null}});const P=".feature_id";function S(e,t=null){if(!e.picked)return null;null==t&&(t=function({object:e,layer:t}){return!j(t.props.data)||t instanceof c.Z?function(e){return"Feature"===(null==e?void 0:e.type)&&"geometry"in e&&"type"in e.geometry}(e)?"geojson":"object":"table"}(e));const n=function(e){switch(e){case"table":return(e,{index:t,data:n})=>{const r=Object.keys(n.geometry),i={};for(const[e,o]of Object.entries(n.frame))r.includes(e)||(i[e]=o[t]);return i};case"object":return e=>({...e});case"geojson":return e=>({[P]:null==e?void 0:e.id,...null==e?void 0:e.properties});default:throw TypeError(`${e} not supported`)}}(t),{object:r,index:i}=e;return n(r,{index:i,data:e.layer.props.data})}const C="cyWLt4_G7nk5vT9hPr0o",M="Z9hHHet2RXmL0iMel3Zt",T="jp658yEHLlesSRvwBwDl",N="t9I8kJyjeEJEOArvMD7j",_="vovHpTur01BROrMLmEFz";function E({info:e}){if(!e.picked||null==e.layer.props.tooltip)return null;const{x:t,y:n}=e,{name:r,tooltip:o}=e.layer.props,a=S(e,o.dataType);delete a[P];const s=!0===o.cols?Object.keys(a):o.cols;return(0,i.jsxs)("div",{className:C,style:{transform:`translate(${t}px, ${n}px)`},children:[(0,i.jsx)("div",{className:M,children:r}),(0,i.jsx)("table",{className:T,children:(0,i.jsx)("tbody",{children:s.map((e=>{var t;return(0,i.jsxs)("tr",{children:[(0,i.jsx)("td",{className:N,children:e}),(0,i.jsx)("td",{className:_,children:String(null!==(t=a[e])&&void 0!==t?t:null)})]},e)}))})})]})}var A=n(9757);const R=Object.freeze({additive:{[A.default.BLEND]:!0,blendFunc:[A.default.SRC_ALPHA,A.default.DST_ALPHA],blendEquation:A.default.FUNC_ADD},subtractive:{[A.default.BLEND]:!0,blendFunc:[A.default.ONE,A.default.ONE_MINUS_DST_COLOR,A.default.SRC_ALPHA,A.default.DST_ALPHA],blendEquation:[A.default.FUNC_SUBTRACT,A.default.FUNC_ADD]},normal:{[A.default.BLEND]:!0,blendFunc:[A.default.SRC_ALPHA,A.default.ONE_MINUS_SRC_ALPHA,A.default.ONE,A.default.ONE_MINUS_SRC_ALPHA],blendEquation:[A.default.FUNC_ADD,A.default.FUNC_ADD]}});function Z(e="normal"){var t;return null!==(t=R[e])&&void 0!==t?t:R.normal}var F=n(4329),I=n(7359),D=n(9900);function U(e){switch(e.type){case"Point":return 1;case"MultiPoint":case"LineString":return e.coordinates.length;case"MultiLineString":case"Polygon":return H(e.coordinates);case"MultiPolygon":return e.coordinates.reduce(((e,t)=>e+H(t)),0);case"GeometryCollection":return e.geometries.reduce(((e,t)=>e+U(t)),0);default:throw new TypeError(`Geomtry type ${e.type} not supported.`)}}function H(e){return e.reduce(((e,t)=>e+t.length),0)}const W=[3,169,244],G=[116,117,129],B=[...W,216.75],z=[...G,216.75],V=[...W,38.25],$=[...G,38.25],J=[0,0,0,0];function q(e){if(null==e)return null;const{geojson:t,selectedFeatureIndices:n,onSetGeoJson:r,onSelectFeatures:i}=e,o=function(e){var t;return null!==(t=ae[null!=e?e:"view"])&&void 0!==t?t:ae.view}(e.mode),a=!se.includes(o);const s=new ie({data:t,selectedFeatureIndexes:n,mode:o,modeConfig:{screenSpace:!0,viewport:{}},onEdit:function({updatedData:e,editType:t,editContext:o}){var a,l;if(ne.includes(t))return;if("selectFeature"===t)return void(null==i||i(null!==(a=o.selectedIndices)&&void 0!==a?a:[]));const c=!!re.includes(t)||(null===(l=null==o?void 0:o.selectedIndices)||void 0===l?void 0:l.map(K));s.props.data={...e,__diff:c},s.setChangeFlags({dataChanged:c}),s.setNeedsUpdate(),te.has(t)&&(null==r||r(e),"addFeature"===t&&(null==i||i([...n,...o.featureIndexes])))},pickable:o!==ae.view,pickingLineWidthExtraPixels:5,pickingDepth:0,getRadius:6,getLineWidth:1.5,getTentativeLineWidth:1.5,lineWidthScale:1,getFillColor:o===ae.view?J:Y,getLineColor:Q,getTentativeLineColor:B,getEditHandlePointOutlineColor:B,getTentativeFillColor:V,getEditHandlePointColor:J,getDashArray:a?[4,2]:[0,0],extensions:[new F.Z({dash:!0})],_subLayerProps:{geojson:{dataComparator:X},guides:{dataComparator:X,_dataDiff:ee}}});return s}function Y(e,t,n){return t?V:$}function Q(e,t,n){return t?B:z}function X(e,t){return Object.is(e.features,t.features)}function K(e){return{startRow:e,endRow:e+1}}function ee(e,t){if(e.__diff)return e.__diff;const n=e.features,r=t.features;if(n.length!==r.length)return"A new data container was supplied";const i=[],o=n.length;for(let e=0;e<o;++e){const t=n[e],a=r[e];if(t!==a){if(U(t.geometry)!==U(a.geometry)){i.push({startRow:e,endRow:o});break}i.push({startRow:e,endRow:e+1})}}return i}const te=Object.freeze(new Set(["addPosition","removePosition","addFeature","finishMovePosition","scaled","rotated","translated","extruded","split"])),ne=Object.freeze(["updateTentativeFeature","addTentativePosition"]),re=Object.freeze(["addPosition","removePosition","addFeature"]);class ie extends D.nk{onPointerMove(e){this.state.lastPointerMoveEvent=e;this.getActiveMode().handlePointerMove(e,this.getModeProps(this.props))}updateState(e){e.changeFlags.propsOrDataChanged&&super.updateState(e)}setState(e){if(this.props.mode===ae.modify)return super.setState(e);for(const t in e)if("cursor"!==t||e.cursor!==this.state.cursor)return super.setState(e)}}class oe extends I.ViewMode{handlePointerMove(e,t){var n;const r=0!==(null===(n=null==e?void 0:e.picks)||void 0===n?void 0:n.length);t.onUpdateCursor(r?"pointer":null)}handleClick(e,t){var n;if(!(0!==(null==e?void 0:e.picks.length)))return;const r=new Set(t.selectedIndexes),i=new Set(e.picks.map((e=>e.index))),o=function(e,t){for(const n of t)if(!e.has(n))return!1;return!0}(r,i)?function(...e){const t=new Set(e[0]);for(const n of e.slice(1))for(const e of n)t.delete(e);return t}(r,i):function(...e){return new Set(e.flatMap((e=>[...e])))}(r,i);null===(n=t.onEdit)||void 0===n||n.call(t,{updatedData:t.data,editType:"selectFeature",editContext:{selectedIndices:[...o]}})}}I.utils.getEditHandlesForGeometry=v(I.utils.getEditHandlesForGeometry);const ae=Object.seal({view:I.ViewMode,select:oe,modify:I.ModifyMode,transform:I.TransformMode,linestring:I.DrawLineStringMode,point:I.DrawPointMode,polygon:I.DrawPolygonMode,lasso:I.DrawPolygonByDraggingMode}),se=[ae.view,ae.select];function le(e,t){const n=document.createElement("a"),r=URL.createObjectURL(e);n.href=r,n.download=t,n.click(),URL.revokeObjectURL(r)}async function ce(e){return new Promise(((t,n)=>{const{onAfterRender:r}=e.props;e.setProps({onAfterRender:({gl:n})=>{e.setProps({onAfterRender:r}),t(createImageBitmap(n.canvas))}}),e.redraw(!0)}))}async function ue(e){return new Promise(((t,n)=>{e.once("render",(({target:e})=>{const n=e.getCanvas();t(createImageBitmap(n))})),e.triggerRepaint()}))}async function de(e){const t=document.createElement("canvas");t.width=e.width,t.height=e.height;const n=t.getContext("2d");return null==n||n.drawImage(e,0,0),async function(e){return new Promise(((t,n)=>{e.toBlob((e=>t(e)))}))}(t)}const fe=(0,a.forwardRef)((({deckgl:e,mapgl:t,layers:n,editor:r},o)=>{const c=(0,a.useRef)(null),d=(0,a.useRef)(null);(0,a.useImperativeHandle)(o,(()=>({async getImage(){var e,t;const n=null===(e=c.current)||void 0===e?void 0:e.deck;if(null==n)return null;return async function(e,t){if(null==t)return ce(e);const n=await Promise.all([ue(t),ce(e)]),r=document.createElement("canvas");r.width=n[0].width,r.height=n[0].height;const i=r.getContext("2d");for(const e of n)null==i||i.drawImage(e,0,0),e.close();return createImageBitmap(r)}(n,null===(t=d.current)||void 0===t?void 0:t.getMap())}})),[]);const[f,h]=he();let{blendingMode:p,controller:g,onClick:m,...y}=e;const b={...e.parameters,...p&&Z(p)},[v,j]=(0,a.useState)(0),x=n.some((e=>"TripsLayer"===e.type));pe(x,(e=>j(e)));const k=n.map((e=>null!=e.type?e.renderLayer(v):null)),L=q(r),O=null!=r&&!["view","select"].includes(r.mode);return O&&g&&(g={...g,doubleClickZoom:!1}),(0,i.jsxs)(a.Fragment,{children:[(0,i.jsx)(l.Z,{Deck:w,ref:c,...{...y,parameters:b},layers:[...k,L],onHover:O?void 0:h,onClick:O?void 0:m,getCursor:null==L?void 0:L.getCursor.bind(L),children:(0,i.jsx)(s.Z,{id:"map",controller:g,repeat:!0,children:t.mapStyle&&(0,i.jsx)(u.D5,{ref:d,...t})})}),f&&(0,i.jsx)(E,{info:f})]})}));fe.displayName="Map";const he=()=>{const[e,t]=(0,a.useState)(null);return[e,(0,a.useCallback)((e=>{if(!e.picked||!e.layer.props.tooltip||e.layer instanceof c.Z)return t(null);t(e)}),[])]},pe=(e,t)=>{const n=(0,a.useRef)(0),r=(0,a.useRef)(Date.now()),i=()=>{t(Date.now()-r.current),n.current=window.requestAnimationFrame(i)};(0,a.useEffect)((()=>{if(e)return n.current=window.requestAnimationFrame(i),()=>window.cancelAnimationFrame(n.current)}),[e])};var ge=n(7786),me=n(9080),ye=n(803),be=n(1956),ve=n(5395);const we=[0,0,0,255];function je([e,t,n,r=255]){return`rgba(${e}, ${t}, ${n}, ${r/255})`}function xe(e,t){return Array.isArray(e)?t||4!==e.length?((t=null!=t?t:[])[0]=e[0],t[1]=e[1],t[2]=e[2],t[3]=3===e.length?e[3]:255,t):e:"string"==typeof e?(function(e,t){if(7===e.length){const n=parseInt(e.substring(1),16);t[0]=Math.floor(n/65536),t[1]=Math.floor(n/256%256),t[2]=n%256,t[3]=255}else if(9===e.length){const n=parseInt(e.substring(1),16);t[0]=Math.floor(n/16777216),t[1]=Math.floor(n/65536%256),t[2]=Math.floor(n/256%256),t[3]=n%256}}(e,t=null!=t?t:[]),t):we}var ke=n(4634),Le=n(4177),Oe=n(458),Pe=n(5801),Se=n(3613),Ce=n(602),Me=n(8973),Te=n(2625);function Ne(e){return null!==e&&"object"==typeof e&&"accessor"===e.type}function _e(e){return Ne(e)&&"scale"in e}var Ee=n(3693),Ae=n(4717),Re=n(6867),Ze=n(3326),Fe=n(2112),Ie=n(7693),De=n(8569),Ue=n(1435);class He extends Ee.Z{initializeState(){if(!function(e){return We.some((t=>e instanceof t))}(this))return;const e=this,t=e.getAttributeManager();t&&t.addInstanced({pickingColors:{type:A.default.UNSIGNED_BYTE,size:3,accessor:(t,{index:n,data:r,target:i})=>{var o,a,s;if(j(r)&&Array.isArray(r.indices))return e.encodePickingColor(r.indices.indexOf(r.indices[n]),i);const l=null===(a=null===(o=null==t?void 0:t.__source)||void 0===o?void 0:o.parent)||void 0===a?void 0:a.props.data;return j(l)&&Array.isArray(l.indices)?e.encodePickingColor(l.indices.indexOf(l.indices[t.__source.index]),i):e.encodePickingColor(null!==(s=null==t?void 0:t.__source.index)&&void 0!==s?s:n,i)},shaderAttributes:{pickingColors:{divisor:0},instancePickingColors:{divisor:1}}}})}}const We=[Ae.Z,Re.Z,Ze.Z,Fe.Z,Ie.Z,De.Z,Ue.Z];const Ge=v((function(e){const t=function(e){return Object.entries(e.geometry).filter((([,e])=>/MULTI/.test(e))).map((([e,t])=>({name:e,type:t})))}(e);return 0===t.length?e:t.reduce(x,e)})),Be=v(xe),ze=v((function(e,t){const n=function({col:e,dataType:t},n){if("highlightColor"===n)switch(t){case"table":return function(e){return({index:t,layer:n})=>xe(n.props.data.frame[e][t])}(e);case"object":return function(e){return({object:t})=>xe(t[e])}(e);case"geojson":return function(e){return({object:t})=>xe(t.properties[e])}(e);default:throw TypeError(`${t} not supported`)}if(n.endsWith("Color"))switch(t){case"table":return function(e){return(t,{index:n,data:r,target:i})=>xe(r.frame[e][n],i)}(e);case"object":return function(e){return(t,{target:n})=>xe(t[e],n)}(e);case"geojson":return function(e){return(t,{target:n})=>xe(t.properties[e],n)}(e);default:throw TypeError(`${t} not supported`)}switch(t){case"table":return function(e){return(t,{index:n,data:r})=>r.frame[e][n]}(e);case"object":return function(e){return t=>t[e]}(e);case"geojson":return function(e){return t=>t.properties[e]}(e);default:throw TypeError(`${t} not supported`)}}(e,t);return{...e,getData:n}})),Ve=v((function(e,t){"palette"in e&&(e.range=e.palette.map((e=>xe(e))),e.unknown=xe(e.unknown));const n=function(e){switch(e.scale){case"linear":return(0,ke.Z)().domain(e.domain).range(e.range).unknown(e.unknown).clamp(!0);case"power":return(0,Le.ZP)().exponent(e.exponent).domain(e.domain).range(e.range).unknown(e.unknown).clamp(!0);case"log":return(0,Oe.Z)().base(e.base).domain(e.domain).range(e.range).unknown(e.unknown).clamp(!0);case"symlog":return(0,Pe.Z)().domain(e.domain).range(e.range).unknown(e.unknown).clamp(!0);case"identity":return(0,Se.Z)().unknown(e.unknown);case"threshold":case"quantile":return(0,Ce.Z)().domain(e.domain).range(e.range).unknown(e.unknown);case"category":return(0,Me.Z)().domain(e.domain).range(e.range).unknown(e.unknown);case"quantize":return(0,Te.Z)().domain(e.domain).range(e.range).unknown(e.unknown);default:throw TypeError(`scale ${e.scale} not supported`)}}(e),r="highlightColor"===t?function({col:e,dataType:t},n){switch(t){case"table":return function(e,t){return({index:n,layer:r})=>t(r.props.data.frame[e][n])}(e,n);case"object":return function(e,t){return({object:n})=>t(n[e])}(e,n);case"geojson":return function(e,t){return({object:n})=>t(n.properties[e])}(e,n);default:throw TypeError(`${t} not supported`)}}(e,n):function({col:e,dataType:t},n){switch(t){case"table":return function(e,t){return(n,{index:r,data:i})=>t(i.frame[e][r])}(e,n);case"object":return function(e,t){return n=>t(n[e])}(e,n);case"geojson":return function(e,t){return n=>t(n.properties[e])}(e,n);default:throw TypeError(`${t} not supported`)}}(e,n);return{...e,name:t,getData:r,scaleData:n}}));class $e{constructor({type:e,...t}){var n,r;Object.defineProperty(this,"type",{enumerable:!0,configurable:!0,writable:!0,value:void 0}),Object.defineProperty(this,"props",{enumerable:!0,configurable:!0,writable:!0,value:void 0}),Object.defineProperty(this,"scales",{enumerable:!0,configurable:!0,writable:!0,value:void 0});const i=Object.entries(t),o=function(e){const t=e.filter(Je).map((([e,t])=>[e,Be(t)])),n=e.find((([e])=>"colorRange"===e));n&&t.push([n[0],n[1].map((e=>Be(e)))]);return t}(i),a=function(e){return e.filter((([,e])=>Ne(e))).map((([e,t])=>[e,_e(t)?Ve(t,e):ze(t,e)]))}(i);this.type=e;const s=Object.fromEntries([...i,...o,...a.map((([e,t])=>[e,t.getData])),...Ye(i),["visible",null===(n=t.visible)||void 0===n||n],["updateTriggers",qe(a)],["parameters",(l=t.parameters,c=t.blendingMode,{...l,...Z(c)})]]);var l,c;j(s.data)&&(s.data=Ge(s.data),s.extensions=[new He,...null!==(r=s.extensions)&&void 0!==r?r:[]]),"TileLayer"===e&&(s.renderSubLayers=e=>{const{bbox:{west:t,south:n,east:r,north:i},x:o,y:a,z:s}=e.tile;return new ve.Z({...e,data:[{z:s,x:o,y:a}],image:e.data,bounds:[t,n,r,i]})}),this.props=s,this.scales=a.filter((([,e])=>_e(e))).map((([,e])=>e)),"TextLayer"===e&&"fonts"in document&&document.fonts.load(`16px ${t.fontFamily}`)}static create(e){return new $e(e)}renderLayer(e){if("TripsLayer"===this.type&&void 0!==e){const t=this.props,{loopLength:n,animationSpeed:r}=t,i=n/r,o=e/1e3%i/i;t.currentTime=o*n}return new r[this.type]({...this.props})}renderLegend(){const e=this.scales.filter((e=>e.legend));return{id:this.props.id,name:this.props.name,scales:e}}renderSelector(){var e;return{id:this.props.id,groupName:this.props.groupName,name:this.props.name,visible:null===(e=this.props.visible)||void 0===e||e}}}function Je([e,t]){return e.endsWith("Color")&&(Array.isArray(t)||"string"==typeof t)}function qe(e){const t=e=>{const{getData:t,scaleData:n,palette:r,...i}=e;return i},n=e.map((([e,n])=>[e,t(n)]));return Object.fromEntries(n)}function Ye(e){return e.filter((([e])=>"getColorWeight"===e||"getElevationWeight"===e)).filter((([,e])=>null!==e&&"function"!=typeof e&&!Ne(e))).map((([e,t])=>[e,()=>t]))}var Qe=n(6082),Xe=n(912),Ke=n(2372),et=n(8426);const tt="U44LhpKlV8r1Vu1ZoZA3",nt="XF770nELUcE_0zxo_aOg",rt="HYRhC2aw1PSMYGCz2bDb",it="YNou4FYlc3N3GhFp2BkO",ot="f44NGqZZGn4de9S3oTHN",at="xqKP289MUJ06Hgb3CjoW",st="XctZC_fZAMvRMiHPlt9G",lt="ly9kEH8MpXynhBX6Fhcj",ct="iM2OiMQz6z_NtAQZZyPS",ut="_8r8348KPS_nzNLR_CV_",dt="tzkFrkEU5cB_jY6zcuua",ft=Date.now();function ht({className:e,tooltip:t,onClick:n,children:r}){return(0,i.jsx)("button",{className:e,type:"button",onClick:n,title:t,children:r})}function pt({layers:e,onVisibilityChange:t}){const n=m(e,(e=>{var t;return null!==(t=e.groupName)&&void 0!==t?t:`${e.name}-${ft}`})),r=(n,r,i)=>{if(i){const i=!e.filter((e=>!n.includes(e))).some((e=>e.visible));return t(e.map((e=>({...e,visible:n.includes(e)?r:i}))))}t(n.map((e=>({...e,visible:r}))))},[o,s]=(0,a.useState)(!1),l=()=>s((e=>!e));return o?(0,i.jsxs)("div",{className:nt,children:[(0,i.jsx)("div",{className:rt,children:(0,i.jsxs)(ht,{className:it,onClick:l,tooltip:"Close",children:[(0,i.jsx)(Qe.Z,{className:dt,fontSize:"small"}),(0,i.jsx)("span",{className:ot,children:"Layers"})]})}),(0,i.jsx)("div",{className:at,children:Array.from(n.entries(),(([e,t,[{groupName:n}]=t])=>(0,i.jsx)(gt,{group:n,layers:t,onChange:r},e)))})]}):(0,i.jsx)(ht,{className:tt,tooltip:"Layer selector",onClick:l,children:(0,i.jsx)(Qe.Z,{className:dt,fontSize:"small"})})}function gt({group:e,layers:t,onChange:n}){const r=Array.from(m(t,(e=>e.name)),(([e,t])=>(0,i.jsx)(mt,{name:e,layers:t,onChange:n},e)));return e?(0,i.jsxs)(a.Fragment,{children:[(0,i.jsx)(mt,{name:e,layers:t,onChange:n}),(0,i.jsx)("div",{className:st,children:r})]}):(0,i.jsx)(a.Fragment,{children:r})}function mt({name:e,layers:t,onChange:n}){const r=function(e){let t=e[0].visible;for(const n of e)if(n.visible!==t)return null;return t}(t),o=null===r,s=(0,a.useRef)(null);(0,a.useEffect)((()=>{s.current&&(s.current.indeterminate=o)}),[o]);const l=(0,a.useRef)((()=>!1)),c=r?Xe.Z:o?Ke.Z:et.Z,u=y(lt,r||o?ct:null);return(0,i.jsxs)("label",{className:u,children:[(0,i.jsx)("input",{ref:s,className:ut,type:"checkbox",onChange:()=>{l.current()?n(t,!0,!0):l.current=yt((()=>n(t,!r,!1)),200)},checked:null==r||r}),(0,i.jsx)(c,{fontSize:"small",className:dt}),(0,i.jsx)("span",{className:ot,children:e})]})}const yt=(e,t=200)=>{const n={current:0};let r=0;const i=o=>{if(r||(r=o),o-r>t)return n.current=0,void e();n.current=globalThis.requestAnimationFrame(i)};return n.current=globalThis.requestAnimationFrame(i),()=>0!==n.current&&(globalThis.cancelAnimationFrame(n.current),n.current=0,!0)},bt="lWOwchFb6W2NpcWR4ZQS",vt="mIJjIoOSsjLZMp591rN0",wt="OULly07OGkLPRiEDgp00",jt="oxctK5Tcknb3syUfT7xg",xt="KEbGPBIjLXnjAiUTu8eP",kt="MBBFrOSR5F_grZcyOCp0",Lt="l_4PaMO7BWOn4DcLN5Oh",Ot="aWzYqDozdq6Vl4QuIJ1y",Pt="xaprV4ANDgRiE5ai1hUl",St="f6SnauerJY75ZqNAuK56",Ct=16;function Mt({layers:e}){return 0===e.length?null:(0,i.jsx)("div",{className:bt,children:e.map((e=>(0,i.jsx)(Tt,{...e},e.id)))})}function Tt({name:e,scales:t}){return 0===t.length?null:(0,i.jsxs)("div",{className:vt,children:[(0,i.jsx)("div",{className:wt,title:e,children:e}),t.map((e=>(0,i.jsx)(Nt,{...e},e.name)))]})}function Nt(e){var t;const n=e.name.replace(/^get/,"").replace(/([A-Z])/g," $1").toLowerCase();const r="palette"in e;const o=function(e){return"linear"===e.scale||"power"===e.scale||"log"===e.scale||"symlog"===e.scale}(e),a=function(e){return"threshold"===e.scale||"quantile"===e.scale||"quantize"===e.scale}(e);return(0,i.jsxs)("div",{className:jt,children:[(0,i.jsx)("div",{className:xt,children:n}),(0,i.jsx)("span",{className:kt,children:"by "}),(0,i.jsx)("span",{className:Lt,title:e.col,children:null!==(t=e.scaleBy)&&void 0!==t?t:e.col}),r&&o&&(0,i.jsx)(_t,{...e}),r&&a&&(0,i.jsx)(Et,{...e}),r&&"category"===e.scale&&(0,i.jsx)(At,{...e})]})}const _t=({ticks:e,scaleData:t})=>{const n=e.map(((e,t)=>t)).slice(1,-1),r=Ct*(e.length-1),o=r+11+1;return(0,i.jsxs)("svg",{className:Ot,height:o,shapeRendering:"crispEdges",children:[(0,i.jsxs)("svg",{y:5,children:[(0,i.jsx)("image",{width:20,height:r,href:Zt(t),preserveAspectRatio:"none"}),n.map((e=>(0,i.jsx)("line",{className:St,x2:20,y1:Ct*e,y2:Ct*e},e)))]}),(0,i.jsx)(Rt,{ticks:e,y:-2})]})},Et=({ticks:e,range:t})=>{const n=t.map(je),r=Ct*(e.length-1)+11+1;return(0,i.jsxs)("svg",{className:Ot,height:r,shapeRendering:"crispEdges",children:[(0,i.jsx)("svg",{y:5,children:n.map(((e,t)=>(0,i.jsx)("rect",{width:20,height:Ct,y:t*Ct,fill:e},t)))}),(0,i.jsx)(Rt,{ticks:e,y:-2})]})};function At({ticks:e,range:t,unknownTick:n,unknown:r}){const o=n?[...t,r]:t,a=n?[...e,n]:e,s=o.map(je),l=Ct*a.length;return(0,i.jsxs)("svg",{className:Ot,height:l,children:[(0,i.jsx)("svg",{children:s.map(((e,t)=>(0,i.jsx)("rect",{width:20,height:14,y:1+t*Ct,fill:e},t)))}),(0,i.jsx)(Rt,{ticks:a})]})}function Rt({ticks:e,x:t=28,y:n=0}){return(0,i.jsx)("svg",{x:t,y:n,children:e.map(((e,t)=>(0,i.jsx)("text",{className:Pt,y:Ct*t,dy:11,children:String(e)},t)))})}function Zt(e,t=200){const n=e.range().length,r=[...Array(n).keys()].map((e=>e/(n-1))),i=e.copy().range(r).invert,o=document.createElement("canvas"),a=o.getContext("2d");o.width=1,o.height=t;for(let n=0;n<t;n++)a.fillStyle=je(e(i(n/t))),a.fillRect(0,n,1,1);return o.toDataURL()}var Ft=n(7046),It=n(6533),Dt=n(9292),Ut=n(9744),Ht=n(9758),Wt=n(7089),Gt=n(6138),Bt=n(904),zt=n(5482),Vt=n(7226),$t=n(5579),Jt=n(9702),qt=n(2149),Yt=n(6761);const Qt="S_Jw5xlS4ysjLfEnG1_V",Xt="ulA2RQmkQhSnak9JlXnZ",Kt="aIE33mXFqOBosVEFBrb8",en="llmi5hyDHtcHqa2r__su",tn="ilhkc5o5ZlSd4IaGytLF",nn=()=>{};function rn({mode:e,geojson:t,selectedFeatureIndices:n,onSetMode:r=nn,onDownload:o=nn,onUpload:a=nn,onDeleteSelected:s=nn,canUndo:l,canRedo:c,onUndo:u=nn,onRedo:d=nn}){const f=(null==n?void 0:n.length)>0,h=(null==t?void 0:t.features.length)>0;return(0,i.jsxs)("div",{className:Qt,children:[(0,i.jsxs)("div",{className:Xt,children:[(0,i.jsx)(on,{name:"View",icon:Bt.Z,iconStyle:{transform:"scale(0.9)"},active:"view"===e,onClick:()=>r("view")}),(0,i.jsx)(on,{name:"Select",icon:zt.Z,active:"select"===e,disabled:!h,onClick:()=>r("select")})]}),(0,i.jsxs)("div",{className:Xt,children:[(0,i.jsx)(on,{name:"Modify",icon:Dt.Z,active:"modify"===e,disabled:!f,onClick:()=>r("modify")}),(0,i.jsx)(on,{name:"Transform",icon:Vt.Z,active:"transform"===e,disabled:!f,onClick:()=>r("transform")}),(0,i.jsx)(on,{name:"Point",icon:$t.Z,active:"point"===e,onClick:()=>r("point")}),(0,i.jsx)(on,{name:"LineString",icon:Ut.Z,active:"linestring"===e,onClick:()=>r("linestring")}),(0,i.jsx)(on,{name:"Polygon",icon:It.Z,active:"polygon"===e,onClick:()=>r("polygon")}),(0,i.jsx)(on,{name:"Lasso",icon:Ft.Z,active:"lasso"===e,onClick:()=>r("lasso")})]}),(0,i.jsxs)("div",{className:Xt,children:[(0,i.jsx)(on,{name:"Download",icon:Jt.Z,disabled:!h,onClick:()=>o(t)}),(0,i.jsx)(on,{name:"Upload",icon:qt.Z,disabled:!h,onClick:()=>a(t)})]}),(0,i.jsxs)("div",{className:Xt,children:[(0,i.jsx)(on,{name:"Undo",icon:Ht.Z,disabled:!l,onClick:u}),(0,i.jsx)(on,{name:"Redo",icon:Wt.Z,disabled:!c,onClick:d})]}),(0,i.jsx)("div",{className:Xt,children:(0,i.jsx)(on,{name:"Delete",icon:Yt.Z,disabled:!f,onClick:()=>s(n)})})]})}function on({name:e,onClick:t=nn,disabled:n=!1,active:r=!1,icon:o,iconStyle:a}){const s=y(Kt,r?en:null);return(0,i.jsx)("button",{className:s,onClick:t,title:e,disabled:n,children:o&&(0,i.jsx)(Gt.Z,{component:o,className:tn,fontSize:"small",style:a})})}const an="rdeck",sn="XTuYKSlBcC933W4sKWtC",ln="kQnelQ4hkAJEJHLO0NJI",cn="hQbOOdEZw0LO0llGKVqS",un="cSol54mlVTgAnRzj_GUM",dn=(0,a.forwardRef)((({theme:e,deckgl:t,mapgl:n,layers:r,lazyLoad:o=!1,layerSelector:s=!1,onLayerVisibilityChange:l,editor:c},u)=>{var d;const f=(0,a.useRef)(null);(0,a.useImperativeHandle)(u,(()=>({async getImage(){const e=f.current,t=await(null==e?void 0:e.getImage());return null!=t?de(t):null}})),[]);const h=null!==(d=null==r?void 0:r.map($e.create))&&void 0!==d?d:[],p=(0,a.useRef)(null),g=function(e,t){const[n,r]=(0,a.useState)(!1);return(0,a.useEffect)((()=>{if(t&&e.current){const t=new IntersectionObserver((e=>{r(e[0].isIntersecting)}),{threshold:0});return t.observe(e.current),()=>t.disconnect()}}),[t,e]),n}(p,o),m=!o||g;return(0,i.jsxs)("div",{ref:p,className:y(an,e),children:[(0,i.jsx)("div",{className:y(sn,ln),children:s&&(0,i.jsx)(pt,{layers:h.filter((e=>e.props.visibilityToggle)).map((e=>e.renderSelector())).reverse(),onVisibilityChange:l})}),(0,i.jsx)("div",{className:y(sn,cn),children:(0,i.jsx)(Mt,{layers:h.filter((e=>e.props.visible)).map((e=>e.renderLegend())).reverse()})}),(0,i.jsx)("div",{className:y(sn,un),children:c&&(0,i.jsx)(rn,{...c})}),m&&(0,i.jsx)(fe,{ref:f,deckgl:t,mapgl:n,layers:h,editor:c})]})}));dn.displayName="RDeck";var fn=n(6935);function hn(e){const t=e instanceof fn.Z?e:new fn.Z(e),n=h(t,"longitude","latitude","zoom","bearing","pitch","altitude");return{bounds:t.getBounds(),viewState:{...n,center:t.unprojectFlat(t.center)}}}function pn(e,t){const n=gn(e);for(const[r,i]of n)i.configurable&&(i.writable?mn(e,r,i,t):"function"==typeof i.set&&yn(e,r,i,t));if(Object.getPrototypeOf({})===Object.getPrototypeOf(e))return e;const r=gn(Object.getPrototypeOf(e));for(const[n,i]of r)i.configurable&&"function"==typeof i.set&&yn(e,n,i,t);return e}function gn(e){return Object.entries(Object.getOwnPropertyDescriptors(e))}function mn(e,t,{value:n},r){return Reflect.defineProperty(e,t,{get:()=>n,set(e){Object.is(e,n)||(n=e,null==r||r({[t]:e}))}})}function yn(e,t,n,r){return Reflect.defineProperty(e,t,{...n,set(i){var o,a;const s=null===(o=n.get)||void 0===o?void 0:o.call(e);Object.is(i,s)||(null===(a=n.set)||void 0===a||a.call(e,i),null==r||r({[t]:i}))}})}const bn={longitude:0,latitude:0,zoom:0,pitch:0,bearing:0};class vn{constructor(e){Object.defineProperty(this,"useDevicePixels",{enumerable:!0,configurable:!0,writable:!0,value:void 0}),Object.defineProperty(this,"pickingRadius",{enumerable:!0,configurable:!0,writable:!0,value:void 0}),Object.defineProperty(this,"blendingMode",{enumerable:!0,configurable:!0,writable:!0,value:void 0}),Object.defineProperty(this,"effects",{enumerable:!0,configurable:!0,writable:!0,value:void 0}),Object.defineProperty(this,"controller",{enumerable:!0,configurable:!0,writable:!0,value:void 0}),Object.defineProperty(this,"initialViewState",{enumerable:!0,configurable:!0,writable:!0,value:bn}),Object.defineProperty(this,"initialBounds",{enumerable:!0,configurable:!0,writable:!0,value:void 0}),Object.defineProperty(this,"onViewStateChange",{enumerable:!0,configurable:!0,writable:!0,value:void 0}),Object.defineProperty(this,"onClick",{enumerable:!0,configurable:!0,writable:!0,value:void 0}),Object.assign(this,e)}}var wn,jn,xn,kn,Ln,On=function(e,t,n,r){if("a"===n&&!r)throw new TypeError("Private accessor was defined without a getter");if("function"==typeof t?e!==t||!r:!t.has(e))throw new TypeError("Cannot read private member from an object whose class did not declare it");return"m"===n?r:"a"===n?r.call(e):r?r.value:t.get(e)},Pn=function(e,t,n,r,i){if("m"===r)throw new TypeError("Private method is not writable");if("a"===r&&!i)throw new TypeError("Private accessor was defined without a setter");if("function"==typeof t?e!==t||!i:!t.has(e))throw new TypeError("Cannot write private member to an object whose class did not declare it");return"a"===r?i.call(e,n):i?i.value=n:t.set(e,n),n};const Sn=Object.freeze({type:"FeatureCollection",features:[]});class Cn extends class{constructor(e){Object.defineProperty(this,"mode",{enumerable:!0,configurable:!0,writable:!0,value:"view"}),Object.defineProperty(this,"geojson",{enumerable:!0,configurable:!0,writable:!0,value:Sn}),Object.defineProperty(this,"selectedFeatureIndices",{enumerable:!0,configurable:!0,writable:!0,value:[]}),Object.defineProperty(this,"onSetMode",{enumerable:!0,configurable:!0,writable:!0,value:e=>this.setMode(e)}),Object.defineProperty(this,"onSelectFeatures",{enumerable:!0,configurable:!0,writable:!0,value:e=>this.selectFeatures(e)}),Object.defineProperty(this,"onSetGeoJson",{enumerable:!0,configurable:!0,writable:!0,value:e=>this.setGeoJson(e)}),Object.defineProperty(this,"onDeleteSelected",{enumerable:!0,configurable:!0,writable:!0,value:e=>this.deleteSelected(e)}),Object.defineProperty(this,"onUpload",{enumerable:!0,configurable:!0,writable:!0,value:e=>{}}),Object.defineProperty(this,"onDownload",{enumerable:!0,configurable:!0,writable:!0,value:e=>this.download(e)}),Object.defineProperty(this,"upload",{enumerable:!0,configurable:!0,writable:!0,value:void 0}),Object.assign(this,e)}setState(e={}){Object.assign(this,e)}setMode(e){var t,n;switch(e){case"modify":this.mode=(null===(t=this.selectedFeatureIndices)||void 0===t?void 0:t.length)?"modify":"view";break;case"select":this.mode=(null===(n=this.geojson)||void 0===n?void 0:n.features.length)?"select":"view";break;default:this.mode=e}}selectFeatures(e){this.selectedFeatureIndices=e}setGeoJson(e){this.geojson=e}deleteSelected(e){const t=this.geojson.features.filter(((t,n)=>!e.includes(n)));Object.assign(this,{mode:["modify","transform"].includes(this.mode)?"view":this.mode,selectedFeatureIndices:[],geojson:{...this.geojson,features:t}})}download(e){le(new Blob([JSON.stringify(e)],{type:"application/geo+json"}),"rdeck.geojson"),this.setMode("view")}}{constructor(e){super(e),wn.add(this),jn.set(this,-1),xn.set(this,[]),Object.defineProperty(this,"onUndo",{enumerable:!0,configurable:!0,writable:!0,value:()=>this.undo()}),Object.defineProperty(this,"onRedo",{enumerable:!0,configurable:!0,writable:!0,value:()=>this.redo()}),On(this,wn,"m",kn).call(this)}get canUndo(){return On(this,jn,"f")>0}get canRedo(){return On(this,jn,"f")<On(this,xn,"f").length-1}undo(){this.canUndo&&(Pn(this,jn,On(this,jn,"f")-1,"f"),Object.assign(this,On(this,xn,"f")[On(this,jn,"f")]))}redo(){this.canRedo&&(Pn(this,jn,On(this,jn,"f")+1,"f"),Object.assign(this,On(this,xn,"f")[On(this,jn,"f")]))}setState(e){super.setState(e),On(this,wn,"m",Ln).call(this)}setMode(e){super.setMode(e),On(this,wn,"m",Ln).call(this)}selectFeatures(e){super.selectFeatures(e),On(this,wn,"m",Ln).call(this)}setGeoJson(e){super.setGeoJson(e),On(this,wn,"m",kn).call(this)}deleteSelected(e){super.deleteSelected(e),On(this,wn,"m",kn).call(this)}}function Mn({mode:e,geojson:t,selectedFeatureIndices:n}){return{mode:e,geojson:t,selectedFeatureIndices:n}}jn=new WeakMap,xn=new WeakMap,wn=new WeakSet,kn=function(e=this){const t=Mn(e);(function(e,t){if(Object.is(e,t))return!0;if(null==e||null==t)return!1;const n=Object.keys(e);if(n.length!==Object.keys(t).length)return!1;for(const r of n)if(!Object.is(e[r],t[r])||t.hasOwnProperty(r))return!1;return!0})(t,On(this,xn,"f")[On(this,jn,"f")])||(On(this,xn,"f").length=On(this,jn,"f")+1,Pn(this,jn,On(this,xn,"f").push(t)-1,"f"))},Ln=function(e=this){On(this,xn,"f")[On(this,jn,"f")]=Mn(e)};class Tn{constructor(e){Object.defineProperty(this,"mapboxAccessToken",{enumerable:!0,configurable:!0,writable:!0,value:void 0}),Object.defineProperty(this,"mapStyle",{enumerable:!0,configurable:!0,writable:!0,value:void 0}),Object.defineProperty(this,"reuseMaps",{enumerable:!0,configurable:!0,writable:!0,value:!0}),Object.assign(this,e)}}var Nn,_n,En,An,Rn=function(e,t,n,r){if("a"===n&&!r)throw new TypeError("Private accessor was defined without a getter");if("function"==typeof t?e!==t||!r:!t.has(e))throw new TypeError("Cannot read private member from an object whose class did not declare it");return"m"===n?r:"a"===n?r.call(e):r?r.value:t.get(e)},Zn=function(e,t,n,r,i){if("m"===r)throw new TypeError("Private method is not writable");if("a"===r&&!i)throw new TypeError("Private accessor was defined without a setter");if("function"==typeof t?e!==t||!i:!t.has(e))throw new TypeError("Cannot write private member to an object whose class did not declare it");return"a"===r?i.call(e,n):i?i.value=n:t.set(e,n),n};class Fn{constructor(e={},t){Object.defineProperty(this,"theme",{enumerable:!0,configurable:!0,writable:!0,value:"kepler"}),Nn.set(this,new vn),_n.set(this,new Tn),Object.defineProperty(this,"layers",{enumerable:!0,configurable:!0,writable:!0,value:[]}),Object.defineProperty(this,"layerSelector",{enumerable:!0,configurable:!0,writable:!0,value:!1}),Object.defineProperty(this,"lazyLoad",{enumerable:!0,configurable:!0,writable:!0,value:!1}),En.set(this,null),Object.defineProperty(this,"onChange",{enumerable:!0,configurable:!0,writable:!0,value:void 0}),An.set(this,(()=>{var e;return null===(e=this.onChange)||void 0===e?void 0:e.call(this)})),this.setState(e),Reflect.defineProperty(this,"onChange",{configurable:!1,enumerable:!1,value:t,writable:!0}),this.setLayerVisibility=this.setLayerVisibility.bind(this),pn(this,Rn(this,An,"f"))}get deckgl(){return Rn(this,Nn,"f")}set deckgl(e){Zn(this,Nn,pn(new vn(e),Rn(this,An,"f")),"f")}get mapgl(){return Rn(this,_n,"f")}set mapgl(e){Zn(this,_n,pn(new Tn(e),Rn(this,An,"f")),"f")}get editor(){return Rn(this,En,"f")}set editor(e){null==e?Zn(this,En,null,"f"):null==Rn(this,En,"f")?Zn(this,En,pn(new Cn(e),Rn(this,An,"f")),"f"):Rn(this,En,"f").setState(e)}setState({deckgl:e,mapgl:t,editor:n,...r}={}){Object.assign(this,{...r,deckgl:{...this.deckgl,...e},mapgl:{...this.mapgl,...t}}),void 0!==n&&(this.editor=null!=n?{...this.editor,...n}:null)}upsertLayer(e){var t,n,r;const i=this.layers.find((t=>t.id===e.id));if(null==i)return void(this.layers=[...this.layers,e]);const o={...i,...e,visible:null!==(t=e.visible)&&void 0!==t?t:null==i?void 0:i.visible,data:null!==(r=null!==(n=e.data)&&void 0!==n?n:null==i?void 0:i.data)&&void 0!==r?r:null};this.layers=this.layers.map((e=>e===i?o:e))}setLayerVisibility(e){if(0===e.length)return;this.layers=this.layers.map((t=>{const n=e.find((e=>((e,t)=>{const n=e.name===t.name,r=e.groupName===t.groupName;return n&&r||null==e.name&&null!=e.groupName&&r})(e,t)&&e.visible!==t.visible));return n?{...t,visible:n.visible}:t}))}}Nn=new WeakMap,_n=new WeakMap,En=new WeakMap,An=new WeakMap;var In,Dn,Un,Hn,Wn,Gn,Bn,zn=function(e,t,n,r,i){if("m"===r)throw new TypeError("Private method is not writable");if("a"===r&&!i)throw new TypeError("Private accessor was defined without a setter");if("function"==typeof t?e!==t||!i:!t.has(e))throw new TypeError("Cannot write private member to an object whose class did not declare it");return"a"===r?i.call(e,n):i?i.value=n:t.set(e,n),n},Vn=function(e,t,n,r){if("a"===n&&!r)throw new TypeError("Private accessor was defined without a getter");if("function"==typeof t?e!==t||!r:!t.has(e))throw new TypeError("Cannot read private member from an object whose class did not declare it");return"m"===n?r:"a"===n?r.call(e):r?r.value:t.get(e)};class $n{constructor(e,t){In.set(this,void 0),Dn.set(this,void 0),Un.set(this,(0,a.createRef)()),Hn.set(this,void 0),Wn.set(this,((e,t)=>{var n,r,i;if(null===(r=(n=Vn(this,Hn,"f").deckgl).onClick)||void 0===r||r.call(n,e,t),HTMLWidgets.shinyMode){const t={coordinate:e.coordinate,...hn(e.viewport),layer:h(null===(i=e.layer)||void 0===i?void 0:i.props,"id","name","groupName"),object:S(e)};Shiny.setInputValue(`${this.element.id}_click`,t,{priority:"event"})}})),Gn.set(this,(e=>{var t,n;if(null===(n=(t=Vn(this,Hn,"f").deckgl).onViewStateChange)||void 0===n||n.call(t,e),HTMLWidgets.shinyMode){const t=hn(e.viewState);Shiny.setInputValue(`${this.element.id}_viewstate`,t,{priority:"event"})}})),Bn.set(this,(e=>{HTMLWidgets.shinyMode&&Shiny.setInputValue(`${this.element.id}_editorupload`,{geojson:JSON.stringify(e)})})),zn(this,Dn,e,"f"),zn(this,In,(0,o.s)(e),"f"),zn(this,Hn,new Fn(t,(()=>this.render())),"f"),HTMLWidgets.shinyMode&&(Shiny.addCustomMessageHandler(`${e.id}:layer`,(e=>{this.state.upsertLayer(e)})),Shiny.addCustomMessageHandler(`${e.id}:deck`,(e=>{this.state.setState(e)})))}get element(){return Vn(this,Dn,"f")}get state(){return Vn(this,Hn,"f")}render(){let{deckgl:e,mapgl:t,editor:n,...r}=Vn(this,Hn,"f");e={...e,onClick:Vn(this,Wn,"f"),onViewStateChange:Vn(this,Gn,"f")};let o=null;null!=n&&(o={...n,canUndo:n.canUndo,canRedo:n.canRedo,onUpload:e=>{Vn(this,Bn,"f").call(this,e),n.setMode("view")}}),null!=e.initialBounds&&delete e.initialViewState,Vn(this,In,"f").render((0,i.jsx)(a.StrictMode,{children:(0,i.jsx)(dn,{ref:Vn(this,Un,"f"),...{...r,deckgl:e,mapgl:t,editor:o,onLayerVisibilityChange:this.state.setLayerVisibility}})}))}setLayerVisibility(e){return Vn(this,Hn,"f").setLayerVisibility(e)}async snapshot(e="rdeck.png"){const t=Vn(this,Un,"f").current,n=await(null==t?void 0:t.getImage());null!=n&&le(n,e)}}In=new WeakMap,Dn=new WeakMap,Un=new WeakMap,Hn=new WeakMap,Wn=new WeakMap,Gn=new WeakMap,Bn=new WeakMap;const Jn={name:"rdeck",type:"output",factory(e,t,n){let r=null;return{get instance(){return r},renderValue(t){r=new $n(e,t),r.render()},resize(){}}}};function qn(e){const t=document.getElementById(e);return t&&Qn(t)}function Yn(){return[...document.querySelectorAll(".rdeck.html-widget")].map((e=>Qn(e))).filter((e=>e instanceof $n))}function Qn(e){var t;return null===(t=null==e?void 0:e.htmlwidget_data_init_result)||void 0===t?void 0:t.instance}HTMLWidgets.widget(Jn);const Xn="0.4.0"},479:()=>{},9125:()=>{},9214:()=>{}},i={};function o(e){var t=i[e];if(void 0!==t)return t.exports;var n=i[e]={exports:{}};return r[e].call(n.exports,n,n.exports,o),n.exports}o.m=r,e=[],o.O=(t,n,r,i)=>{if(!n){var a=1/0;for(u=0;u<e.length;u++){for(var[n,r,i]=e[u],s=!0,l=0;l<n.length;l++)(!1&i||a>=i)&&Object.keys(o.O).every((e=>o.O[e](n[l])))?n.splice(l--,1):(s=!1,i<a&&(a=i));if(s){e.splice(u--,1);var c=r();void 0!==c&&(t=c)}}return t}i=i||0;for(var u=e.length;u>0&&e[u-1][2]>i;u--)e[u]=e[u-1];e[u]=[n,r,i]},o.n=e=>{var t=e&&e.__esModule?()=>e.default:()=>e;return o.d(t,{a:t}),t},n=Object.getPrototypeOf?e=>Object.getPrototypeOf(e):e=>e.__proto__,o.t=function(e,r){if(1&r&&(e=this(e)),8&r)return e;if("object"==typeof e&&e){if(4&r&&e.__esModule)return e;if(16&r&&"function"==typeof e.then)return e}var i=Object.create(null);o.r(i);var a={};t=t||[null,n({}),n([]),n(n)];for(var s=2&r&&e;"object"==typeof s&&!~t.indexOf(s);s=n(s))Object.getOwnPropertyNames(s).forEach((t=>a[t]=()=>e[t]));return a.default=()=>e,o.d(i,a),i},o.d=(e,t)=>{for(var n in t)o.o(t,n)&&!o.o(e,n)&&Object.defineProperty(e,n,{enumerable:!0,get:t[n]})},o.g=function(){if("object"==typeof globalThis)return globalThis;try{return this||new Function("return this")()}catch(e){if("object"==typeof window)return window}}(),o.o=(e,t)=>Object.prototype.hasOwnProperty.call(e,t),o.r=e=>{"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(e,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(e,"__esModule",{value:!0})},(()=>{var e={472:0};o.O.j=t=>0===e[t];var t=(t,n)=>{var r,i,[a,s,l]=n,c=0;if(a.some((t=>0!==e[t]))){for(r in s)o.o(s,r)&&(o.m[r]=s[r]);if(l)var u=l(o)}for(t&&t(n);c<a.length;c++)i=a[c],o.o(e,i)&&e[i]&&e[i][0](),e[i]=0;return o.O(u)},n=self.webpackChunkrdeck=self.webpackChunkrdeck||[];n.forEach(t.bind(null,0)),n.push=t.bind(null,n.push.bind(n))})();var a=o.O(void 0,[486,474,619,315,568,175,977,627,811,42,899,667,324,134,133,468,535,745,783,528,784,485,378,645,394,816,650,869,706,836,458,769,67,806,551,282,953,538,49,844,639,825,596],(()=>o(5171)));return a=o.O(a)})()));
//# sourceMappingURL=data:application/json;charset=utf-8;base64,