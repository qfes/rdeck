!function(e,t){"object"==typeof exports&&"object"==typeof module?module.exports=t():"function"==typeof define&&define.amd?define([],t):"object"==typeof exports?exports.rdeck=t():e.rdeck=t()}(self,(()=>(()=>{var e,t,n,r={8322:(e,t,n)=>{"use strict";n.r(t),n.d(t,{VERSION:()=>rr,Widget:()=>Yn,binding:()=>Qn,getWidgetById:()=>er,getWidgets:()=>tr});var r={};n.r(r),n.d(r,{AGGREGATION_OPERATION:()=>Oe.KM,ArcLayer:()=>ke.ArcLayer,BitmapLayer:()=>ke.BitmapLayer,CPUGridLayer:()=>Oe.ab,ColumnLayer:()=>ke.ColumnLayer,ContourLayer:()=>Oe.YY,GPUGridLayer:()=>Oe.ML,GeoJsonLayer:()=>ke.GeoJsonLayer,GeohashLayer:()=>Se.GeohashLayer,GreatCircleLayer:()=>Se.GreatCircleLayer,GridCellLayer:()=>ke.GridCellLayer,GridLayer:()=>Oe.mU,H3ClusterLayer:()=>Se.H3ClusterLayer,H3HexagonLayer:()=>Se.H3HexagonLayer,HeatmapLayer:()=>Oe.zP,HexagonLayer:()=>Oe.dX,IconLayer:()=>ke.IconLayer,LineLayer:()=>ke.LineLayer,MVTLayer:()=>Se.MVTLayer,PathLayer:()=>ke.PathLayer,PointCloudLayer:()=>ke.PointCloudLayer,PolygonLayer:()=>ke.PolygonLayer,QuadkeyLayer:()=>Se.QuadkeyLayer,S2Layer:()=>Se.S2Layer,ScatterplotLayer:()=>ke.ScatterplotLayer,ScenegraphLayer:()=>Pe.ScenegraphLayer,ScreenGridLayer:()=>Oe.p3,SimpleMeshLayer:()=>Pe.SimpleMeshLayer,SolidPolygonLayer:()=>ke.SolidPolygonLayer,TerrainLayer:()=>Se.TerrainLayer,TextLayer:()=>ke.TextLayer,Tile3DLayer:()=>Se.Tile3DLayer,TileLayer:()=>Se.TileLayer,TripsLayer:()=>Se.TripsLayer,_AggregationLayer:()=>Oe.Di,_BinSorter:()=>Oe.l0,_CPUAggregator:()=>Oe.oA,_GPUGridAggregator:()=>Oe.Wc,_GeoCellLayer:()=>Se._GeoCellLayer,_MultiIconLayer:()=>ke._MultiIconLayer,_TextBackgroundLayer:()=>ke._TextBackgroundLayer,_Tile2DHeader:()=>Se._Tile2DHeader,_Tileset2D:()=>Se._Tileset2D,_getURLFromTemplate:()=>Se._getURLFromTemplate});n(8559),n(5837);var i=n(5893),o=n(745),a=n(7294),s=(n(6158),n(2687),n(4009)),l=n(6024),c=n(3295),u=n(17),d=n(8289),h=n(7013);function f(e,...t){if(null==e)return null;const n=t.map((t=>[t,e[t]]));return Object.fromEntries(n)}function p(e){return e.clientHeight>0&&e.clientHeight>0?e:e.parentElement?p(e.parentElement):null}function g(e){const t=p(e);if(e===t||null==t)return{width:e.clientWidth,height:e.clientHeight};const{width:n,height:r}=getComputedStyle(e),i=document.createElement("div");Object.assign(i.style,{width:n,height:r,display:"hidden"}),t.appendChild(i);const o={width:i.clientWidth,height:i.clientHeight};return t.removeChild(i),o}function m(e,t){const n=new Map;for(const r of e){const e=t(r);n.has(e)?n.get(e).push(r):n.set(e,[r])}return n}function y(...e){return e.filter((e=>null!=e)).join(" ")}class b{constructor(){Object.defineProperty(this,"_val",{enumerable:!0,configurable:!0,writable:!0,value:new Map}),Object.defineProperty(this,"_ref",{enumerable:!0,configurable:!0,writable:!0,value:new WeakMap})}getStore(e){return"object"==typeof(t=e)&&null!==t||"function"==typeof t?this._ref:this._val;var t}has(e){return this.getStore(e).has(e)}get(e){return this.getStore(e).get(e)}set(e,t){return this.getStore(e).set(e,t),this}}function v(e){const t=new b;return(...n)=>{const r=n[0],i=n.slice(0,-1).reduceRight(((e,t)=>{if(e.has(t))return e.get(t);const n=new b;return e.set(t,n),n}),t);if(i.has(r))return i.get(r);const o=e(...n);return i.set(r,o),o}}class w extends d.Z{setProps(e){const t=e.initialBounds;if(null!=t&&(n=t,r=this.props.initialBounds,!(n===r||null==n&&null==r||null!=n&&null!=r&&(null==n?void 0:n.every(((e,t)=>e===(null==r?void 0:r[t]))))))){const[n,r,i,o]=t,a=[[Math.max(n,-180),Math.max(r,-85.051129)],[Math.min(i,180),Math.min(o,85.051129)]];this._setCanvasSize(e);const{width:s,height:l}=this._getMapSize();e={...e,initialViewState:{...(0,h.Xg)({height:l,width:s,bounds:a}),bearing:0,pitch:0}}}var n,r;super.setProps(e)}_getMapSize(){const e=this.canvas;if(null==e)return{width:this.width,height:this.height};if(0===e.clientWidth&&0===e.clientHeight){const t=e.closest(".rdeck.html-widget");if(null!=t)return g(t)}return{width:e.clientWidth,height:e.clientHeight}}}function j(e){return null!==e&&"object"==typeof e&&"frame"in e}function x(e,{name:t,type:n}){var r,i,o,a;const s=e.frame,l=Object.fromEntries(Object.entries(s).map((([e])=>[e,[]]))),c=Object.keys(e.frame).filter((e=>e!==t)),u=s[t],d=function(e){switch(e){case"MULTIPOINT":return L;case"MULTILINESTRING":return k;case"MULTIPOLYGON":return O;default:throw TypeError(`${e} not supported`)}}(n),h=e=>{for(const t of c)l[t].push(s[t][e])},f=[];for(let n=0;n<e.length;n++){const s=u[n];if(d(s)){l[t].push(...s);for(let t=0;t<s.length;t++)h(n),f.push(null!==(i=null===(r=e.indices)||void 0===r?void 0:r[n])&&void 0!==i?i:n)}else l[t].push(s),h(n),f.push(null!==(a=null===(o=e.indices)||void 0===o?void 0:o[n])&&void 0!==a?a:n)}return{length:l[t].length,geometry:{...e.geometry,[t]:n.replace("MULTI","")},indices:f,frame:l}}function L(e){return Array.isArray(null==e?void 0:e[0])}function k(e){var t;return Array.isArray(null===(t=null==e?void 0:e[0])||void 0===t?void 0:t[0])}function O(e){var t,n;return Array.isArray(null===(n=null===(t=null==e?void 0:e[0])||void 0===t?void 0:t[0])||void 0===n?void 0:n[0])}Object.defineProperty(w,"defaultProps",{enumerable:!0,configurable:!0,writable:!0,value:{...d.Z.defaultProps,initialBounds:null}});const S=".feature_id";function P(e,t=null){if(!e.picked)return null;null==t&&(t=function({object:e,layer:t}){const n=t.props.data;return!j(n)||t instanceof c.Z?function(e){return"Feature"===(null==e?void 0:e.type)&&"geometry"in e&&"type"in e.geometry}(e)?"geojson":"object":"table"}(e));const n=function(e){switch(e){case"table":return(e,{index:t,data:n})=>{const r=Object.keys(n.geometry),i={};for(const[e,o]of Object.entries(n.frame))r.includes(e)||(i[e]=o[t]);return i};case"object":return e=>({...e});case"geojson":return e=>({[S]:null==e?void 0:e.id,...null==e?void 0:e.properties});default:throw TypeError(`${e} not supported`)}}(t),{object:r,index:i}=e;return n(r,{index:i,data:e.layer.props.data})}const C="cyWLt4_G7nk5vT9hPr0o",M="Z9hHHet2RXmL0iMel3Zt",T="jp658yEHLlesSRvwBwDl",N="t9I8kJyjeEJEOArvMD7j",E="vovHpTur01BROrMLmEFz";function _({info:e}){if(!e.picked||null==e.layer.props.tooltip)return null;const{x:t,y:n}=e,{name:r,tooltip:o}=e.layer.props,a=P(e,o.dataType);delete a[S];const s=!0===o.cols?Object.keys(a):o.cols;return(0,i.jsxs)("div",{className:C,style:{transform:`translate(${t}px, ${n}px)`},children:[(0,i.jsx)("div",{className:M,children:r}),(0,i.jsx)("table",{className:T,children:(0,i.jsx)("tbody",{children:s.map((e=>{var t;return(0,i.jsxs)("tr",{children:[(0,i.jsx)("td",{className:N,children:e}),(0,i.jsx)("td",{className:E,children:String(null!==(t=a[e])&&void 0!==t?t:null)})]},e)}))})})]})}var A=n(9757);const R=Object.freeze({additive:{[A.default.BLEND]:!0,blendFunc:[A.default.SRC_ALPHA,A.default.DST_ALPHA],blendEquation:A.default.FUNC_ADD},subtractive:{[A.default.BLEND]:!0,blendFunc:[A.default.ONE,A.default.ONE_MINUS_DST_COLOR,A.default.SRC_ALPHA,A.default.DST_ALPHA],blendEquation:[A.default.FUNC_SUBTRACT,A.default.FUNC_ADD]},normal:{[A.default.BLEND]:!0,blendFunc:[A.default.SRC_ALPHA,A.default.ONE_MINUS_SRC_ALPHA,A.default.ONE,A.default.ONE_MINUS_SRC_ALPHA],blendEquation:[A.default.FUNC_ADD,A.default.FUNC_ADD]}});function D(e="normal"){var t;return null!==(t=R[e])&&void 0!==t?t:R.normal}var Z,F,I=n(4329),H=n(7359),U=n(9900);function W(e,t){const n=document.createElement("a"),r=URL.createObjectURL(e);n.href=r,n.download=t,n.click(),URL.revokeObjectURL(r)}function G(e){switch(e.type){case"Point":return 1;case"MultiPoint":case"LineString":return e.coordinates.length;case"MultiLineString":case"Polygon":return z(e.coordinates);case"MultiPolygon":return e.coordinates.reduce(((e,t)=>e+z(t)),0);case"GeometryCollection":return e.geometries.reduce(((e,t)=>e+G(t)),0);default:throw new TypeError(`Geomtry type ${e.type} not supported.`)}}function z(e){return e.reduce(((e,t)=>e+t.length),0)}function V(e,t){const n=B(e);for(const[r,i]of n)i.configurable&&(i.writable?$(e,r,i,t):"function"==typeof i.set&&J(e,r,i,t));if(Object.getPrototypeOf({})===Object.getPrototypeOf(e))return e;const r=B(Object.getPrototypeOf(e));for(const[n,i]of r)i.configurable&&"function"==typeof i.set&&J(e,n,i,t);return e}function B(e){return Object.entries(Object.getOwnPropertyDescriptors(e))}function $(e,t,{value:n},r){return Reflect.defineProperty(e,t,{get:()=>n,set(e){Object.is(e,n)||(n=e,null==r||r({[t]:e}))}})}function J(e,t,n,r){return Reflect.defineProperty(e,t,{...n,set(i){var o,a;const s=null===(o=n.get)||void 0===o?void 0:o.call(e);Object.is(i,s)||(null===(a=n.set)||void 0===a||a.call(e,i),null==r||r({[t]:i}))}})}const q=/(mac ?os)|(macintosh)/i.test(null!==(F=null===(Z=navigator.userAgentData)||void 0===Z?void 0:Z.platform)&&void 0!==F?F:navigator.userAgent);function K(e){const t=e.cloneNode(!0);X(e,t);const{width:n,height:r}=t.style;return Object.assign(t.style,{position:"relative",inset:"0",minWidth:n,minHeight:r}),t}function X(e,t){const n=globalThis.getComputedStyle(e);for(const e of n)t.style.setProperty(e,n.getPropertyValue(e),n.getPropertyPriority(e));const r=[...e.children],i=[...t.children];return r.forEach(((e,t)=>X(r[t],i[t]))),t}async function Y(e,t){const n=document.createElement("canvas"),r=n.getContext("2d");return n.width=e.width,n.height=e.height,null!=t&&await async function(e,t){return new Promise(((n,r)=>{t.once("render",(({target:t})=>{const r=t.getCanvas();n(e.drawImage(r,0,0))})),t.triggerRepaint()}))}(r,t),await async function(e,t){return new Promise(((n,r)=>{const{onAfterRender:i}=t.props;t.setProps({onAfterRender:({gl:r})=>{t.setProps({onAfterRender:i}),n(e.drawImage(r.canvas,0,0))}}),t.redraw(!0)}))}(r,e),n}async function Q(e){const t=K(e),{clientWidth:n,clientHeight:r}=e,i=function({width:e,height:t},...n){const r="http://www.w3.org/2000/svg",i=document.createElementNS(r,"svg");i.setAttribute("width",`${e}`),i.setAttribute("height",`${t}`),i.setAttribute("viewBox",`0 0 ${e} ${t}`);const o=document.createElementNS(r,"foreignObject");return o.setAttribute("width","100%"),o.setAttribute("height","100%"),i.appendChild(o),n.forEach((e=>o.appendChild(e))),i}({width:n,height:r},t),o=(new XMLSerializer).serializeToString(i);return function(e){return new Promise(((t,n)=>{const r=document.createElement("img");r.addEventListener("load",(()=>t(r)),{once:!0}),r.crossOrigin="anonymous",r.src=e}))}("data:image/svg+xml;charset=utf-8,"+encodeURIComponent(o))}const ee=[3,169,244],te=[116,117,129],ne=[...ee,216.75],re=[...te,216.75],ie=[...ee,38.25],oe=[...te,38.25],ae=[0,0,0,0];function se(e){if(null==e)return null;const{geojson:t,selectedFeatureIndices:n,onSetGeoJson:r,onSelectFeatures:i}=e,o=function(e){var t;return null!==(t=be[null!=e?e:"view"])&&void 0!==t?t:be.view}(e.mode),a=!ve.includes(o);const s=new me({data:t,selectedFeatureIndexes:n,mode:o,modeConfig:{screenSpace:!0,viewport:{}},onEdit:function({updatedData:e,editType:t,editContext:o}){var a,l;if(pe.includes(t))return;if("selectFeature"===t)return void(null==i||i(null!==(a=o.selectedIndices)&&void 0!==a?a:[]));const c=!!ge.includes(t)||(null===(l=null==o?void 0:o.selectedIndices)||void 0===l?void 0:l.map(de));s.props.data={...e,__diff:c},s.setChangeFlags({dataChanged:c}),s.setNeedsUpdate(),fe.has(t)&&(null==r||r(e),"addFeature"===t&&(null==i||i([...n,...o.featureIndexes])))},pickable:o!==be.view,pickingLineWidthExtraPixels:5,pickingDepth:0,getRadius:6,getLineWidth:1.5,getTentativeLineWidth:1.5,lineWidthScale:1,getFillColor:o===be.view?ae:le,getLineColor:ce,getTentativeLineColor:ne,getEditHandlePointOutlineColor:ne,getTentativeFillColor:ie,getEditHandlePointColor:ae,getDashArray:a?[4,2]:[0,0],extensions:[new I.Z({dash:!0})],_subLayerProps:{geojson:{dataComparator:ue},guides:{dataComparator:ue,_dataDiff:he}}});return s}function le(e,t,n){return t?ie:oe}function ce(e,t,n){return t?ne:re}function ue(e,t){return Object.is(e.features,t.features)}function de(e){return{startRow:e,endRow:e+1}}function he(e,t){if(e.__diff)return e.__diff;const n=e.features,r=t.features;if(n.length!==r.length)return"A new data container was supplied";const i=[],o=n.length;for(let e=0;e<o;++e){const t=n[e],a=r[e];if(t!==a){if(G(t.geometry)!==G(a.geometry)){i.push({startRow:e,endRow:o});break}i.push({startRow:e,endRow:e+1})}}return i}const fe=Object.freeze(new Set(["addPosition","removePosition","addFeature","finishMovePosition","scaled","rotated","translated","extruded","split"])),pe=Object.freeze(["updateTentativeFeature","addTentativePosition"]),ge=Object.freeze(["addPosition","removePosition","addFeature"]);class me extends U.nk{onPointerMove(e){this.state.lastPointerMoveEvent=e;this.getActiveMode().handlePointerMove(e,this.getModeProps(this.props))}updateState(e){e.changeFlags.propsOrDataChanged&&super.updateState(e)}setState(e){if(this.props.mode===be.modify)return super.setState(e);for(const t in e)if("cursor"!==t||e.cursor!==this.state.cursor)return super.setState(e)}}class ye extends H.ViewMode{handlePointerMove(e,t){var n;const r=0!==(null===(n=null==e?void 0:e.picks)||void 0===n?void 0:n.length);t.onUpdateCursor(r?"pointer":null)}handleClick(e,t){var n;if(!(0!==(null==e?void 0:e.picks.length)))return;const r=new Set(t.selectedIndexes),i=new Set(e.picks.map((e=>e.index))),o=function(e,t){for(const n of t)if(!e.has(n))return!1;return!0}(r,i)?function(...e){const t=new Set(e[0]);for(const n of e.slice(1))for(const e of n)t.delete(e);return t}(r,i):function(...e){return new Set(e.flatMap((e=>[...e])))}(r,i);null===(n=t.onEdit)||void 0===n||n.call(t,{updatedData:t.data,editType:"selectFeature",editContext:{selectedIndices:[...o]}})}}H.utils.getEditHandlesForGeometry=v(H.utils.getEditHandlesForGeometry);const be=Object.seal({view:H.ViewMode,select:ye,modify:H.ModifyMode,transform:H.TransformMode,linestring:H.DrawLineStringMode,point:H.DrawPointMode,polygon:H.DrawPolygonMode,lasso:H.DrawPolygonByDraggingMode}),ve=[be.view,be.select];const we=(0,a.forwardRef)((({deckgl:e,mapgl:t,layers:n,editor:r},o)=>{const c=(0,a.useRef)(null),d=(0,a.useRef)(null);(0,a.useImperativeHandle)(o,(()=>({async getImage(){var e,t;const n=null===(e=c.current)||void 0===e?void 0:e.deck;if(null==n)return null;const r=null===(t=d.current)||void 0===t?void 0:t.getMap();return Y(n,null!=r?r:null)}})),[]);const[h,f]=je();let{blendingMode:p,controller:g,onClick:m,...y}=e;const b={...e.parameters,...p&&D(p)},[v,j]=(0,a.useState)(0),x=n.some((e=>"TripsLayer"===e.type));xe(x,(e=>j(e)));const L=n.map((e=>null!=e.type?e.renderLayer(v):null)),k=se(r),O=null!=r&&!["view","select"].includes(r.mode);return O&&g&&(g={...g,doubleClickZoom:!1}),(0,i.jsxs)(a.Fragment,{children:[(0,i.jsx)(l.Z,{Deck:w,ref:c,...{...y,parameters:b},layers:[...L,k],onHover:O?void 0:f,onClick:O?void 0:m,getCursor:null==k?void 0:k.getCursor.bind(k),children:(0,i.jsx)(s.Z,{id:"map",controller:g,repeat:!0,children:t.mapStyle&&(0,i.jsx)(u.D5,{ref:d,...t})})}),h&&(0,i.jsx)(_,{info:h})]})}));we.displayName="Map";const je=()=>{const[e,t]=(0,a.useState)(null);return[e,(0,a.useCallback)((e=>{if(!e.picked||!e.layer.props.tooltip||e.layer instanceof c.Z)return t(null);t(e)}),[])]},xe=(e,t)=>{const n=(0,a.useRef)(0),r=(0,a.useRef)(Date.now()),i=()=>{t(Date.now()-r.current),n.current=window.requestAnimationFrame(i)};(0,a.useEffect)((()=>{if(e)return n.current=window.requestAnimationFrame(i),()=>window.cancelAnimationFrame(n.current)}),[e])};var Le=n(5395),ke=n(7786),Oe=n(9080),Se=n(1362),Pe=n(1956);const Ce=[0,0,0,255];function Me([e,t,n,r=255]){return`rgba(${e}, ${t}, ${n}, ${r/255})`}function Te(e,t){return Array.isArray(e)?t||4!==e.length?((t=null!=t?t:[])[0]=e[0],t[1]=e[1],t[2]=e[2],t[3]=3===e.length?e[3]:255,t):e:"string"==typeof e?(function(e,t){if(7===e.length){const n=parseInt(e.substring(1),16);t[0]=Math.floor(n/65536),t[1]=Math.floor(n/256%256),t[2]=n%256,t[3]=255}else if(9===e.length){const n=parseInt(e.substring(1),16);t[0]=Math.floor(n/16777216),t[1]=Math.floor(n/65536%256),t[2]=Math.floor(n/256%256),t[3]=n%256}}(e,t=null!=t?t:[]),t):Ce}var Ne=n(4634),Ee=n(4177),_e=n(458),Ae=n(5801),Re=n(3613),De=n(602),Ze=n(8973),Fe=n(2625);function Ie(e){return null!==e&&"object"==typeof e&&"accessor"===e.type}function He(e){return Ie(e)&&"scale"in e}var Ue=n(3693),We=n(4717),Ge=n(6867),ze=n(3326),Ve=n(2112),Be=n(7693),$e=n(8569),Je=n(1435);class qe extends Ue.Z{initializeState(){if(!function(e){return Ke.some((t=>e instanceof t))}(this))return;const e=this,t=e.getAttributeManager();t&&t.addInstanced({pickingColors:{type:A.default.UNSIGNED_BYTE,size:3,accessor:(t,{index:n,data:r,target:i})=>{var o,a,s;if(j(r)&&Array.isArray(r.indices))return e.encodePickingColor(r.indices.indexOf(r.indices[n]),i);const l=null===(a=null===(o=null==t?void 0:t.__source)||void 0===o?void 0:o.parent)||void 0===a?void 0:a.props.data;return j(l)&&Array.isArray(l.indices)?e.encodePickingColor(l.indices.indexOf(l.indices[t.__source.index]),i):e.encodePickingColor(null!==(s=null==t?void 0:t.__source.index)&&void 0!==s?s:n,i)},shaderAttributes:{pickingColors:{divisor:0},instancePickingColors:{divisor:1}}}})}}const Ke=[We.Z,Ge.Z,ze.Z,Ve.Z,Be.Z,$e.Z,Je.Z];const Xe=v((function(e){const t=function(e){return Object.entries(e.geometry).filter((([,e])=>/MULTI/.test(e))).map((([e,t])=>({name:e,type:t})))}(e);return 0===t.length?e:t.reduce(x,e)})),Ye=v(Te),Qe=v((function(e,t){const n=function({col:e,dataType:t},n){if("highlightColor"===n)switch(t){case"table":return function(e){return({index:t,layer:n})=>Te(n.props.data.frame[e][t])}(e);case"object":return function(e){return({object:t})=>Te(t[e])}(e);case"geojson":return function(e){return({object:t})=>Te(t.properties[e])}(e);default:throw TypeError(`${t} not supported`)}if(n.endsWith("Color"))switch(t){case"table":return function(e){return(t,{index:n,data:r,target:i})=>Te(r.frame[e][n],i)}(e);case"object":return function(e){return(t,{target:n})=>Te(t[e],n)}(e);case"geojson":return function(e){return(t,{target:n})=>Te(t.properties[e],n)}(e);default:throw TypeError(`${t} not supported`)}switch(t){case"table":return function(e){return(t,{index:n,data:r})=>r.frame[e][n]}(e);case"object":return function(e){return t=>t[e]}(e);case"geojson":return function(e){return t=>t.properties[e]}(e);default:throw TypeError(`${t} not supported`)}}(e,t);return{...e,getData:n}})),et=v((function(e,t){"palette"in e&&(e.range=e.palette.map((e=>Te(e))),e.unknown=Te(e.unknown));const n=function(e){switch(e.scale){case"linear":return(0,Ne.Z)().domain(e.domain).range(e.range).unknown(e.unknown).clamp(!0);case"power":return(0,Ee.ZP)().exponent(e.exponent).domain(e.domain).range(e.range).unknown(e.unknown).clamp(!0);case"log":return(0,_e.Z)().base(e.base).domain(e.domain).range(e.range).unknown(e.unknown).clamp(!0);case"symlog":return(0,Ae.Z)().domain(e.domain).range(e.range).unknown(e.unknown).clamp(!0);case"identity":return(0,Re.Z)().unknown(e.unknown);case"threshold":case"quantile":return(0,De.Z)().domain(e.domain).range(e.range).unknown(e.unknown);case"category":return(0,Ze.Z)().domain(e.domain).range(e.range).unknown(e.unknown);case"quantize":return(0,Fe.Z)().domain(e.domain).range(e.range).unknown(e.unknown);default:throw TypeError(`scale ${e.scale} not supported`)}}(e),r="highlightColor"===t?function({col:e,dataType:t},n){switch(t){case"table":return function(e,t){return({index:n,layer:r})=>t(r.props.data.frame[e][n])}(e,n);case"object":return function(e,t){return({object:n})=>t(n[e])}(e,n);case"geojson":return function(e,t){return({object:n})=>t(n.properties[e])}(e,n);default:throw TypeError(`${t} not supported`)}}(e,n):function({col:e,dataType:t},n){switch(t){case"table":return function(e,t){return(n,{index:r,data:i})=>t(i.frame[e][r])}(e,n);case"object":return function(e,t){return n=>t(n[e])}(e,n);case"geojson":return function(e,t){return n=>t(n.properties[e])}(e,n);default:throw TypeError(`${t} not supported`)}}(e,n);return{...e,name:t,getData:r,scaleData:n}}));class tt{get isVisible(){var e;return null!==(e=this.props.visible)&&void 0!==e&&e||!("visible"in this.props)}constructor({type:e,...t}){var n;Object.defineProperty(this,"type",{enumerable:!0,configurable:!0,writable:!0,value:void 0}),Object.defineProperty(this,"props",{enumerable:!0,configurable:!0,writable:!0,value:void 0}),Object.defineProperty(this,"scales",{enumerable:!0,configurable:!0,writable:!0,value:void 0});const r=Object.entries(t),i=function(e){const t=e.filter(nt).map((([e,t])=>[e,Ye(t)])),n=e.find((([e])=>"colorRange"===e));n&&t.push([n[0],n[1].map((e=>Ye(e)))]);return t}(r),o=function(e){return e.filter((([,e])=>Ie(e))).map((([e,t])=>[e,He(t)?et(t,e):Qe(t,e)]))}(r);this.type=e;const a=Object.fromEntries([...r,...i,...o.map((([e,t])=>[e,t.getData])),...it(r),["updateTriggers",rt(o)],["parameters",(s=t.parameters,l=t.blendingMode,{...s,...D(l)})]]);var s,l;j(a.data)&&(a.data=Xe(a.data),a.extensions=[new qe,...null!==(n=a.extensions)&&void 0!==n?n:[]]),"TileLayer"===e&&(a.renderSubLayers=e=>{const{bbox:{west:t,south:n,east:r,north:i},x:o,y:a,z:s}=e.tile;return new Le.Z({...e,data:[{z:s,x:o,y:a}],image:e.data,bounds:[t,n,r,i]})}),this.props=a,this.scales=o.filter((([,e])=>He(e))).map((([,e])=>e)),"TextLayer"===e&&"fonts"in document&&document.fonts.load(`16px ${t.fontFamily}`)}static create(e){return new tt(e)}renderLayer(e){if("TripsLayer"===this.type&&void 0!==e){const t=this.props,{loopLength:n,animationSpeed:r}=t,i=n/r,o=e/1e3%i/i;t.currentTime=o*n}return new r[this.type]({...this.props})}renderLegend(){const e=this.scales.filter((e=>e.legend));return{id:this.props.id,name:this.props.name,scales:e}}renderSelector(){return{id:this.props.id,groupName:this.props.groupName,name:this.props.name,visible:this.isVisible}}}function nt([e,t]){return e.endsWith("Color")&&(Array.isArray(t)||"string"==typeof t)}function rt(e){const t=e=>{const{getData:t,scaleData:n,palette:r,...i}=e;return i},n=e.map((([e,n])=>[e,t(n)]));return Object.fromEntries(n)}function it(e){return e.filter((([e])=>"getColorWeight"===e||"getElevationWeight"===e)).filter((([,e])=>null!==e&&"function"!=typeof e&&!Ie(e))).map((([e,t])=>[e,()=>t]))}var ot=n(6082),at=n(912),st=n(2372),lt=n(8426);const ct="U44LhpKlV8r1Vu1ZoZA3",ut="XF770nELUcE_0zxo_aOg",dt="HYRhC2aw1PSMYGCz2bDb",ht="YNou4FYlc3N3GhFp2BkO",ft="f44NGqZZGn4de9S3oTHN",pt="xqKP289MUJ06Hgb3CjoW",gt="XctZC_fZAMvRMiHPlt9G",mt="ly9kEH8MpXynhBX6Fhcj",yt="iM2OiMQz6z_NtAQZZyPS",bt="_8r8348KPS_nzNLR_CV_",vt="tzkFrkEU5cB_jY6zcuua",wt=Date.now();function jt({className:e,tooltip:t,onClick:n,children:r}){return(0,i.jsx)("button",{className:e,type:"button",onClick:n,title:t,children:r})}function xt({layers:e,onVisibilityChange:t}){const n=m(e,(e=>{var t;return null!==(t=e.groupName)&&void 0!==t?t:`${e.name}-${wt}`})),r=(n,r,i)=>{if(i){const i=!e.filter((e=>!n.includes(e))).some((e=>e.visible));return t(e.map((e=>({...e,visible:n.includes(e)?r:i}))))}t(n.map((e=>({...e,visible:r}))))},[o,s]=(0,a.useState)(!1),l=()=>s((e=>!e));return o?(0,i.jsxs)("div",{className:ut,children:[(0,i.jsx)("div",{className:dt,children:(0,i.jsxs)(jt,{className:ht,onClick:l,tooltip:"Close",children:[(0,i.jsx)(ot.Z,{className:vt,fontSize:"small"}),(0,i.jsx)("span",{className:ft,children:"Layers"})]})}),(0,i.jsx)("div",{className:pt,children:Array.from(n.entries(),(([e,t,[{groupName:n}]=t])=>(0,i.jsx)(Lt,{group:n,layers:t,onChange:r},e)))})]}):(0,i.jsx)(jt,{className:ct,tooltip:"Layer selector",onClick:l,children:(0,i.jsx)(ot.Z,{className:vt,fontSize:"small"})})}function Lt({group:e,layers:t,onChange:n}){const r=Array.from(m(t,(e=>e.name)),(([e,t])=>(0,i.jsx)(kt,{name:e,layers:t,onChange:n},e)));return e?(0,i.jsxs)(a.Fragment,{children:[(0,i.jsx)(kt,{name:e,layers:t,onChange:n}),(0,i.jsx)("div",{className:gt,children:r})]}):(0,i.jsx)(a.Fragment,{children:r})}function kt({name:e,layers:t,onChange:n}){const r=function(e){let t=e[0].visible;for(const n of e)if(n.visible!==t)return null;return t}(t),o=null===r,s=(0,a.useRef)(null);(0,a.useEffect)((()=>{s.current&&(s.current.indeterminate=o)}),[o]);const l=(0,a.useRef)((()=>!1)),c=r?at.Z:o?st.Z:lt.Z,u=y(mt,r||o?yt:null);return(0,i.jsxs)("label",{className:u,children:[(0,i.jsx)("input",{ref:s,className:bt,type:"checkbox",onChange:()=>{l.current()?n(t,!0,!0):l.current=Ot((()=>n(t,!r,!1)),200)},checked:null==r||r}),(0,i.jsx)(c,{fontSize:"small",className:vt}),(0,i.jsx)("span",{className:ft,children:e})]})}const Ot=(e,t=200)=>{const n={current:0};let r=0;const i=o=>{if(r||(r=o),o-r>t)return n.current=0,void e();n.current=globalThis.requestAnimationFrame(i)};return n.current=globalThis.requestAnimationFrame(i),()=>0!==n.current&&(globalThis.cancelAnimationFrame(n.current),n.current=0,!0)},St="lWOwchFb6W2NpcWR4ZQS",Pt="mIJjIoOSsjLZMp591rN0",Ct="OULly07OGkLPRiEDgp00",Mt="oxctK5Tcknb3syUfT7xg",Tt="KEbGPBIjLXnjAiUTu8eP",Nt="MBBFrOSR5F_grZcyOCp0",Et="l_4PaMO7BWOn4DcLN5Oh",_t="aWzYqDozdq6Vl4QuIJ1y",At="xaprV4ANDgRiE5ai1hUl",Rt="f6SnauerJY75ZqNAuK56",Dt=16,Zt=(0,a.forwardRef)((({layers:e},t)=>{const n=(0,a.useRef)(null);return(0,a.useImperativeHandle)(t,(()=>({getImage:async()=>null==n.current?null:Q(n.current)})),[]),0===e.length?null:(0,i.jsx)("div",{ref:n,className:St,children:e.map((e=>(0,i.jsx)(Ft,{...e},e.id)))})}));function Ft({name:e,scales:t}){return 0===t.length?null:(0,i.jsxs)("div",{className:Pt,children:[(0,i.jsx)("div",{className:Ct,title:e,children:e}),t.map((e=>(0,i.jsx)(It,{...e},e.name)))]})}function It(e){var t;const n=e.name.replace(/^get/,"").replace(/([A-Z])/g," $1").toLowerCase();const r="palette"in e;const o=function(e){return"linear"===e.scale||"power"===e.scale||"log"===e.scale||"symlog"===e.scale}(e),a=function(e){return"threshold"===e.scale||"quantile"===e.scale||"quantize"===e.scale}(e);return(0,i.jsxs)("div",{className:Mt,children:[(0,i.jsx)("div",{className:Tt,children:n}),(0,i.jsx)("span",{className:Nt,children:"by "}),(0,i.jsx)("span",{className:Et,title:e.col,children:null!==(t=e.scaleBy)&&void 0!==t?t:e.col}),r&&o&&(0,i.jsx)(Ht,{...e}),r&&a&&(0,i.jsx)(Ut,{...e}),r&&"category"===e.scale&&(0,i.jsx)(Wt,{...e})]})}Zt.displayName="Legend";const Ht=({ticks:e,scaleData:t})=>{const n=e.map(((e,t)=>t)).slice(1,-1),r=Dt*(e.length-1),o=r+11+1;return(0,i.jsxs)("svg",{className:_t,height:o,shapeRendering:"crispEdges",children:[(0,i.jsxs)("svg",{y:5,children:[(0,i.jsx)("image",{width:20,height:r,href:zt(t),preserveAspectRatio:"none"}),n.map((e=>(0,i.jsx)("line",{className:Rt,x2:20,y1:Dt*e,y2:Dt*e},e)))]}),(0,i.jsx)(Gt,{ticks:e,y:-2})]})},Ut=({ticks:e,range:t})=>{const n=t.map(Me),r=Dt*(e.length-1)+11+1;return(0,i.jsxs)("svg",{className:_t,height:r,shapeRendering:"crispEdges",children:[(0,i.jsx)("svg",{y:5,children:n.map(((e,t)=>(0,i.jsx)("rect",{width:20,height:Dt,y:t*Dt,fill:e},t)))}),(0,i.jsx)(Gt,{ticks:e,y:-2})]})};function Wt({ticks:e,range:t,unknownTick:n,unknown:r}){const o=n?[...t,r]:t,a=n?[...e,n]:e,s=o.map(Me),l=Dt*a.length;return(0,i.jsxs)("svg",{className:_t,height:l,children:[(0,i.jsx)("svg",{children:s.map(((e,t)=>(0,i.jsx)("rect",{width:20,height:14,y:1+t*Dt,fill:e},t)))}),(0,i.jsx)(Gt,{ticks:a})]})}function Gt({ticks:e,x:t=28,y:n=0}){return(0,i.jsx)("svg",{x:t,y:n,children:e.map(((e,t)=>(0,i.jsx)("text",{className:At,y:Dt*t,dy:11,children:String(e)},t)))})}function zt(e,t=200){const n=e.range().length,r=[...Array(n).keys()].map((e=>e/(n-1))),i=e.copy().range(r).invert,o=document.createElement("canvas"),a=o.getContext("2d");o.width=1,o.height=t;for(let n=0;n<t;n++)a.fillStyle=Me(e(i(n/t))),a.fillRect(0,n,1,1);return o.toDataURL()}var Vt=n(7046),Bt=n(6533),$t=n(9292),Jt=n(9744),qt=n(9758),Kt=n(7089),Xt=n(4392),Yt=n(904),Qt=n(5482),en=n(7226),tn=n(5579),nn=n(9702),rn=n(2149),on=n(6761);const an="S_Jw5xlS4ysjLfEnG1_V",sn="ulA2RQmkQhSnak9JlXnZ",ln="aIE33mXFqOBosVEFBrb8",cn="llmi5hyDHtcHqa2r__su",un="ilhkc5o5ZlSd4IaGytLF",dn=()=>{};function hn({mode:e,geojson:t,selectedFeatureIndices:n,onSetMode:r=dn,onDownload:o=dn,onUpload:a=dn,onDeleteSelected:s=dn,canUndo:l,canRedo:c,onUndo:u=dn,onRedo:d=dn}){const h=(null==n?void 0:n.length)>0,f=(null==t?void 0:t.features.length)>0;return(0,i.jsxs)("div",{className:an,children:[(0,i.jsxs)("div",{className:sn,children:[(0,i.jsx)(fn,{name:"View",icon:Yt.Z,iconStyle:{transform:"scale(0.9)"},active:"view"===e,onClick:()=>r("view")}),(0,i.jsx)(fn,{name:"Select",icon:Qt.Z,active:"select"===e,disabled:!f,onClick:()=>r("select")})]}),(0,i.jsxs)("div",{className:sn,children:[(0,i.jsx)(fn,{name:"Modify",icon:$t.Z,active:"modify"===e,disabled:!h,onClick:()=>r("modify")}),(0,i.jsx)(fn,{name:"Transform",icon:en.Z,active:"transform"===e,disabled:!h,onClick:()=>r("transform")}),(0,i.jsx)(fn,{name:"Point",icon:tn.Z,active:"point"===e,onClick:()=>r("point")}),(0,i.jsx)(fn,{name:"LineString",icon:Jt.Z,active:"linestring"===e,onClick:()=>r("linestring")}),(0,i.jsx)(fn,{name:"Polygon",icon:Bt.Z,active:"polygon"===e,onClick:()=>r("polygon")}),(0,i.jsx)(fn,{name:"Lasso",icon:Vt.Z,active:"lasso"===e,onClick:()=>r("lasso")})]}),(0,i.jsxs)("div",{className:sn,children:[(0,i.jsx)(fn,{name:"Download",icon:nn.Z,disabled:!f,onClick:()=>o(t)}),(0,i.jsx)(fn,{name:"Upload",icon:rn.Z,disabled:!f,onClick:()=>a(t)})]}),(0,i.jsxs)("div",{className:sn,children:[(0,i.jsx)(fn,{name:"Undo",icon:qt.Z,disabled:!l,onClick:u}),(0,i.jsx)(fn,{name:"Redo",icon:Kt.Z,disabled:!c,onClick:d})]}),(0,i.jsx)("div",{className:sn,children:(0,i.jsx)(fn,{name:"Delete",icon:on.Z,disabled:!h,onClick:()=>s(n)})})]})}function fn({name:e,onClick:t=dn,disabled:n=!1,active:r=!1,icon:o,iconStyle:a}){const s=y(ln,r?cn:null);return(0,i.jsx)("button",{className:s,onClick:t,title:e,disabled:n,children:o&&(0,i.jsx)(Xt.Z,{component:o,className:un,fontSize:"small",style:a})})}const pn="rdeck",gn="XTuYKSlBcC933W4sKWtC",mn="kQnelQ4hkAJEJHLO0NJI",yn="hQbOOdEZw0LO0llGKVqS",bn="cSol54mlVTgAnRzj_GUM",vn=(0,a.forwardRef)((({theme:e,deckgl:t,mapgl:n,layers:r,layerSelector:o=!1,onLayerVisibilityChange:s,editor:l},c)=>{var u;const d=(0,a.useRef)(null),h=(0,a.useRef)(null);(0,a.useImperativeHandle)(c,(()=>({async getSnapshot({legend:e=!0,size:t}){const n=d.current,r=h.current,i=await(null==n?void 0:n.getImage());if(null==i)return null;const o=e?await(null==r?void 0:r.getImage()):null;return async function(e,t,n){const r=document.createElement("canvas"),i=r.getContext("2d"),[o,a]=null!=n?n:[e.width,e.height];if(Object.assign(r,{width:o,height:a}),o>e.width||a>e.height)throw new RangeError("Snapshot size must be <= map size");const s=(e.width-r.width)/2,l=(e.height-r.height)/2;return null==i||i.drawImage(e,s,l,e.width,e.height,0,0,e.width,e.height),null!=t&&(null==i||i.drawImage(t,r.width-t.width-10,10)),new Promise(((e,t)=>{r.toBlob((t=>e(t)))}))}(i,null!=o?o:null,t)}})),[]);const f=null!==(u=null==r?void 0:r.map(tt.create))&&void 0!==u?u:[];return(0,i.jsxs)("div",{className:y(pn,e),children:[(0,i.jsx)("div",{className:y(gn,mn),children:o&&(0,i.jsx)(xt,{layers:f.filter((e=>e.props.visibilityToggle)).map((e=>e.renderSelector())).reverse(),onVisibilityChange:s})}),(0,i.jsx)("div",{className:y(gn,yn),children:(0,i.jsx)(Zt,{ref:h,layers:f.filter((e=>e.isVisible)).map((e=>e.renderLegend())).reverse()})}),(0,i.jsx)("div",{className:y(gn,bn),children:l&&(0,i.jsx)(hn,{...l})}),(0,i.jsx)(we,{ref:d,deckgl:t,mapgl:n,layers:f,editor:l})]})}));vn.displayName="RDeck";var wn=n(6935);function jn(e){const t=e instanceof wn.Z?e:new wn.Z(e),n=f(t,"longitude","latitude","zoom","bearing","pitch","altitude");return{bounds:t.getBounds(),viewState:{...n,center:t.unprojectFlat(t.center)}}}const xn={longitude:0,latitude:0,zoom:0,pitch:0,bearing:0};class Ln{constructor(e){Object.defineProperty(this,"useDevicePixels",{enumerable:!0,configurable:!0,writable:!0,value:void 0}),Object.defineProperty(this,"pickingRadius",{enumerable:!0,configurable:!0,writable:!0,value:void 0}),Object.defineProperty(this,"blendingMode",{enumerable:!0,configurable:!0,writable:!0,value:void 0}),Object.defineProperty(this,"effects",{enumerable:!0,configurable:!0,writable:!0,value:void 0}),Object.defineProperty(this,"controller",{enumerable:!0,configurable:!0,writable:!0,value:void 0}),Object.defineProperty(this,"initialViewState",{enumerable:!0,configurable:!0,writable:!0,value:xn}),Object.defineProperty(this,"initialBounds",{enumerable:!0,configurable:!0,writable:!0,value:void 0}),Object.defineProperty(this,"onViewStateChange",{enumerable:!0,configurable:!0,writable:!0,value:void 0}),Object.defineProperty(this,"onClick",{enumerable:!0,configurable:!0,writable:!0,value:void 0}),Object.assign(this,e)}}var kn,On,Sn,Pn,Cn,Mn=function(e,t,n,r){if("a"===n&&!r)throw new TypeError("Private accessor was defined without a getter");if("function"==typeof t?e!==t||!r:!t.has(e))throw new TypeError("Cannot read private member from an object whose class did not declare it");return"m"===n?r:"a"===n?r.call(e):r?r.value:t.get(e)},Tn=function(e,t,n,r,i){if("m"===r)throw new TypeError("Private method is not writable");if("a"===r&&!i)throw new TypeError("Private accessor was defined without a setter");if("function"==typeof t?e!==t||!i:!t.has(e))throw new TypeError("Cannot write private member to an object whose class did not declare it");return"a"===r?i.call(e,n):i?i.value=n:t.set(e,n),n};const Nn=Object.freeze({type:"FeatureCollection",features:[]});class En{constructor(e){Object.defineProperty(this,"mode",{enumerable:!0,configurable:!0,writable:!0,value:"view"}),Object.defineProperty(this,"geojson",{enumerable:!0,configurable:!0,writable:!0,value:Nn}),Object.defineProperty(this,"selectedFeatureIndices",{enumerable:!0,configurable:!0,writable:!0,value:[]}),Object.defineProperty(this,"onSetMode",{enumerable:!0,configurable:!0,writable:!0,value:e=>this.setMode(e)}),Object.defineProperty(this,"onSelectFeatures",{enumerable:!0,configurable:!0,writable:!0,value:e=>this.selectFeatures(e)}),Object.defineProperty(this,"onSetGeoJson",{enumerable:!0,configurable:!0,writable:!0,value:e=>this.setGeoJson(e)}),Object.defineProperty(this,"onDeleteSelected",{enumerable:!0,configurable:!0,writable:!0,value:e=>this.deleteSelected(e)}),Object.defineProperty(this,"onUpload",{enumerable:!0,configurable:!0,writable:!0,value:e=>{}}),Object.defineProperty(this,"onDownload",{enumerable:!0,configurable:!0,writable:!0,value:e=>this.download(e)}),Object.defineProperty(this,"upload",{enumerable:!0,configurable:!0,writable:!0,value:void 0}),Object.assign(this,e)}setState(e={}){Object.assign(this,e)}setMode(e){var t,n;switch(e){case"modify":this.mode=(null===(t=this.selectedFeatureIndices)||void 0===t?void 0:t.length)?"modify":"view";break;case"select":this.mode=(null===(n=this.geojson)||void 0===n?void 0:n.features.length)?"select":"view";break;default:this.mode=e}}selectFeatures(e){this.selectedFeatureIndices=e}setGeoJson(e){this.geojson=e}deleteSelected(e){const t=this.geojson.features.filter(((t,n)=>!e.includes(n)));Object.assign(this,{mode:["modify","transform"].includes(this.mode)?"view":this.mode,selectedFeatureIndices:[],geojson:{...this.geojson,features:t}})}download(e){W(new Blob([JSON.stringify(e)],{type:"application/geo+json"}),"rdeck.geojson"),this.setMode("view")}}class _n extends En{get canUndo(){return Mn(this,On,"f")>0}get canRedo(){return Mn(this,On,"f")<Mn(this,Sn,"f").length-1}constructor(e){super(e),kn.add(this),On.set(this,-1),Sn.set(this,[]),Object.defineProperty(this,"onUndo",{enumerable:!0,configurable:!0,writable:!0,value:()=>this.undo()}),Object.defineProperty(this,"onRedo",{enumerable:!0,configurable:!0,writable:!0,value:()=>this.redo()}),Mn(this,kn,"m",Pn).call(this)}undo(){this.canUndo&&(Tn(this,On,Mn(this,On,"f")-1,"f"),Object.assign(this,Mn(this,Sn,"f")[Mn(this,On,"f")]))}redo(){this.canRedo&&(Tn(this,On,Mn(this,On,"f")+1,"f"),Object.assign(this,Mn(this,Sn,"f")[Mn(this,On,"f")]))}setState(e){super.setState(e),Mn(this,kn,"m",Cn).call(this)}setMode(e){super.setMode(e),Mn(this,kn,"m",Cn).call(this)}selectFeatures(e){super.selectFeatures(e),Mn(this,kn,"m",Cn).call(this)}setGeoJson(e){super.setGeoJson(e),Mn(this,kn,"m",Pn).call(this)}deleteSelected(e){super.deleteSelected(e),Mn(this,kn,"m",Pn).call(this)}}function An({mode:e,geojson:t,selectedFeatureIndices:n}){return{mode:e,geojson:t,selectedFeatureIndices:n}}On=new WeakMap,Sn=new WeakMap,kn=new WeakSet,Pn=function(e=this){const t=An(e);(function(e,t){if(Object.is(e,t))return!0;if(null==e||null==t)return!1;const n=Object.keys(e);if(n.length!==Object.keys(t).length)return!1;for(const r of n)if(!Object.is(e[r],t[r])||t.hasOwnProperty(r))return!1;return!0})(t,Mn(this,Sn,"f")[Mn(this,On,"f")])||(Mn(this,Sn,"f").length=Mn(this,On,"f")+1,Tn(this,On,Mn(this,Sn,"f").push(t)-1,"f"))},Cn=function(e=this){Mn(this,Sn,"f")[Mn(this,On,"f")]=An(e)};class Rn{constructor(e){Object.defineProperty(this,"mapboxAccessToken",{enumerable:!0,configurable:!0,writable:!0,value:void 0}),Object.defineProperty(this,"mapStyle",{enumerable:!0,configurable:!0,writable:!0,value:void 0}),Object.defineProperty(this,"reuseMaps",{enumerable:!0,configurable:!0,writable:!0,value:!0}),Object.assign(this,e)}}var Dn,Zn,Fn,In,Hn=function(e,t,n,r){if("a"===n&&!r)throw new TypeError("Private accessor was defined without a getter");if("function"==typeof t?e!==t||!r:!t.has(e))throw new TypeError("Cannot read private member from an object whose class did not declare it");return"m"===n?r:"a"===n?r.call(e):r?r.value:t.get(e)},Un=function(e,t,n,r,i){if("m"===r)throw new TypeError("Private method is not writable");if("a"===r&&!i)throw new TypeError("Private accessor was defined without a setter");if("function"==typeof t?e!==t||!i:!t.has(e))throw new TypeError("Cannot write private member to an object whose class did not declare it");return"a"===r?i.call(e,n):i?i.value=n:t.set(e,n),n};class Wn{get deckgl(){return Hn(this,Dn,"f")}set deckgl(e){Un(this,Dn,V(new Ln(e),Hn(this,In,"f")),"f")}get mapgl(){return Hn(this,Zn,"f")}set mapgl(e){Un(this,Zn,V(new Rn(e),Hn(this,In,"f")),"f")}get editor(){return Hn(this,Fn,"f")}set editor(e){null==e?Un(this,Fn,null,"f"):null==Hn(this,Fn,"f")?Un(this,Fn,V(new _n(e),Hn(this,In,"f")),"f"):Hn(this,Fn,"f").setState(e)}constructor(e={},t){Object.defineProperty(this,"theme",{enumerable:!0,configurable:!0,writable:!0,value:"kepler"}),Dn.set(this,new Ln),Zn.set(this,new Rn),Object.defineProperty(this,"layers",{enumerable:!0,configurable:!0,writable:!0,value:[]}),Object.defineProperty(this,"layerSelector",{enumerable:!0,configurable:!0,writable:!0,value:!0}),Fn.set(this,null),Object.defineProperty(this,"onChange",{enumerable:!0,configurable:!0,writable:!0,value:void 0}),In.set(this,(()=>{var e;return null===(e=this.onChange)||void 0===e?void 0:e.call(this)})),this.setState(e),Reflect.defineProperty(this,"onChange",{configurable:!1,enumerable:!1,value:t,writable:!0}),this.setLayerVisibility=this.setLayerVisibility.bind(this),V(this,Hn(this,In,"f"))}setState({deckgl:e,mapgl:t,editor:n,...r}={}){Object.assign(this,{...r,deckgl:{...this.deckgl,...e},mapgl:{...this.mapgl,...t}}),void 0!==n&&(this.editor=null!=n?{...this.editor,...n}:null)}upsertLayer(e){var t,n;const r=this.layers.find((t=>t.id===e.id));if(null==r)return void(this.layers=[...this.layers,e]);const i={...r,...e,data:null!==(n=null!==(t=e.data)&&void 0!==t?t:null==r?void 0:r.data)&&void 0!==n?n:null};this.layers=this.layers.map((e=>e===r?i:e))}setLayerVisibility(e){if(0===e.length)return;this.layers=this.layers.map((t=>{const n=e.find((e=>((e,t)=>{const n=e.name===t.name,r=e.groupName===t.groupName;return n&&r||null==e.name&&null!=e.groupName&&r})(e,t)&&e.visible!==t.visible));return n?{...t,visible:n.visible}:t}))}}Dn=new WeakMap,Zn=new WeakMap,Fn=new WeakMap,In=new WeakMap;var Gn,zn,Vn,Bn,$n,Jn,qn,Kn=function(e,t,n,r){if("a"===n&&!r)throw new TypeError("Private accessor was defined without a getter");if("function"==typeof t?e!==t||!r:!t.has(e))throw new TypeError("Cannot read private member from an object whose class did not declare it");return"m"===n?r:"a"===n?r.call(e):r?r.value:t.get(e)},Xn=function(e,t,n,r,i){if("m"===r)throw new TypeError("Private method is not writable");if("a"===r&&!i)throw new TypeError("Private accessor was defined without a setter");if("function"==typeof t?e!==t||!i:!t.has(e))throw new TypeError("Cannot write private member to an object whose class did not declare it");return"a"===r?i.call(e,n):i?i.value=n:t.set(e,n),n};class Yn{get element(){return Kn(this,zn,"f")}get state(){return Kn(this,Bn,"f")}constructor(e,t){Gn.set(this,void 0),zn.set(this,void 0),Vn.set(this,(0,a.createRef)()),Bn.set(this,void 0),$n.set(this,((e,t)=>{var n,r,i;if(null===(r=(n=Kn(this,Bn,"f").deckgl).onClick)||void 0===r||r.call(n,e,t),HTMLWidgets.shinyMode){const t={coordinate:e.coordinate,...jn(e.viewport),layer:f(null===(i=e.layer)||void 0===i?void 0:i.props,"id","name","groupName"),object:P(e)};Shiny.setInputValue(`${this.element.id}_click`,t,{priority:"event"})}})),Jn.set(this,(e=>{var t,n;if(null===(n=(t=Kn(this,Bn,"f").deckgl).onViewStateChange)||void 0===n||n.call(t,e),HTMLWidgets.shinyMode){const t=jn(e.viewState);Shiny.setInputValue(`${this.element.id}_viewstate`,t,{priority:"event"})}})),qn.set(this,(e=>{HTMLWidgets.shinyMode&&Shiny.setInputValue(`${this.element.id}_editorupload`,{geojson:JSON.stringify(e)})})),Xn(this,zn,e,"f"),Xn(this,Gn,(0,o.s)(e),"f"),Xn(this,Bn,new Wn(t,(()=>this.render())),"f"),e.addEventListener("keydown",(e=>{(q?e.metaKey:e.ctrlKey)&&"KeyS"===e.code&&(e.preventDefault(),this.snapshot())})),HTMLWidgets.shinyMode&&(Shiny.addCustomMessageHandler(`${e.id}:layer`,(e=>{this.state.upsertLayer(e)})),Shiny.addCustomMessageHandler(`${e.id}:deck`,(e=>{this.state.setState(e)})))}render(){let{deckgl:e,mapgl:t,editor:n,...r}=Kn(this,Bn,"f");e={...e,onClick:Kn(this,$n,"f"),onViewStateChange:Kn(this,Jn,"f")};let o=null;null!=n&&(o={...n,canUndo:n.canUndo,canRedo:n.canRedo,onUpload:e=>{Kn(this,qn,"f").call(this,e),n.setMode("view")}}),null!=e.initialBounds&&delete e.initialViewState,Kn(this,Gn,"f").render((0,i.jsx)(a.StrictMode,{children:(0,i.jsx)(vn,{ref:Kn(this,Vn,"f"),...{...r,deckgl:e,mapgl:t,editor:o,onLayerVisibilityChange:this.state.setLayerVisibility}})}))}setLayerVisibility(e){return Kn(this,Bn,"f").setLayerVisibility(e)}async snapshot({filename:e="rdeck.png",legend:t=!0,size:n}={}){const r=Kn(this,Vn,"f").current,i=await(null==r?void 0:r.getSnapshot({legend:t,size:n}));return null!=i&&null!=e&&W(i,e),null!=i?i:null}}Gn=new WeakMap,zn=new WeakMap,Vn=new WeakMap,Bn=new WeakMap,$n=new WeakMap,Jn=new WeakMap,qn=new WeakMap;const Qn={name:"rdeck",type:"output",factory(e,t,n){let r=null;return{get instance(){return r},renderValue(t){r=new Yn(e,t),r.render()},resize(){}}}};function er(e){const t=document.getElementById(e);return t&&nr(t)}function tr(){return[...document.querySelectorAll(".rdeck.html-widget")].map((e=>nr(e))).filter((e=>e instanceof Yn))}function nr(e){var t;return null===(t=null==e?void 0:e.htmlwidget_data_init_result)||void 0===t?void 0:t.instance}HTMLWidgets.widget(Qn);const rr="0.5.0"},479:()=>{},9125:()=>{}},i={};function o(e){var t=i[e];if(void 0!==t)return t.exports;var n=i[e]={exports:{}};return r[e].call(n.exports,n,n.exports,o),n.exports}o.m=r,e=[],o.O=(t,n,r,i)=>{if(!n){var a=1/0;for(u=0;u<e.length;u++){for(var[n,r,i]=e[u],s=!0,l=0;l<n.length;l++)(!1&i||a>=i)&&Object.keys(o.O).every((e=>o.O[e](n[l])))?n.splice(l--,1):(s=!1,i<a&&(a=i));if(s){e.splice(u--,1);var c=r();void 0!==c&&(t=c)}}return t}i=i||0;for(var u=e.length;u>0&&e[u-1][2]>i;u--)e[u]=e[u-1];e[u]=[n,r,i]},o.n=e=>{var t=e&&e.__esModule?()=>e.default:()=>e;return o.d(t,{a:t}),t},n=Object.getPrototypeOf?e=>Object.getPrototypeOf(e):e=>e.__proto__,o.t=function(e,r){if(1&r&&(e=this(e)),8&r)return e;if("object"==typeof e&&e){if(4&r&&e.__esModule)return e;if(16&r&&"function"==typeof e.then)return e}var i=Object.create(null);o.r(i);var a={};t=t||[null,n({}),n([]),n(n)];for(var s=2&r&&e;"object"==typeof s&&!~t.indexOf(s);s=n(s))Object.getOwnPropertyNames(s).forEach((t=>a[t]=()=>e[t]));return a.default=()=>e,o.d(i,a),i},o.d=(e,t)=>{for(var n in t)o.o(t,n)&&!o.o(e,n)&&Object.defineProperty(e,n,{enumerable:!0,get:t[n]})},o.g=function(){if("object"==typeof globalThis)return globalThis;try{return this||new Function("return this")()}catch(e){if("object"==typeof window)return window}}(),o.o=(e,t)=>Object.prototype.hasOwnProperty.call(e,t),o.r=e=>{"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(e,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(e,"__esModule",{value:!0})},(()=>{var e={472:0};o.O.j=t=>0===e[t];var t=(t,n)=>{var r,i,[a,s,l]=n,c=0;if(a.some((t=>0!==e[t]))){for(r in s)o.o(s,r)&&(o.m[r]=s[r]);if(l)var u=l(o)}for(t&&t(n);c<a.length;c++)i=a[c],o.o(e,i)&&e[i]&&e[i][0](),e[i]=0;return o.O(u)},n=self.webpackChunkrdeck=self.webpackChunkrdeck||[];n.forEach(t.bind(null,0)),n.push=t.bind(null,n.push.bind(n))})();var a=o.O(void 0,[486,474,619,315,568,175,627,977,811,42,899,667,324,134,133,535,468,745,784,783,528,485,645,394,816,650,869,706,836,458,769,67,806,551,282,953,538,49,844,639,825,596],(()=>o(8322)));return a=o.O(a)})()));
//# sourceMappingURL=data:application/json;charset=utf-8;base64,