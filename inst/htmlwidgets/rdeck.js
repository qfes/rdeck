!function(e,t){"object"==typeof exports&&"object"==typeof module?module.exports=t():"function"==typeof define&&define.amd?define([],t):"object"==typeof exports?exports.rdeck=t():e.rdeck=t()}(self,(()=>(()=>{var e,t,n,r={8975:(e,t,n)=>{"use strict";n.r(t),n.d(t,{VERSION:()=>Pn,Widget:()=>Ln,binding:()=>kn,getWidgetById:()=>On,getWidgets:()=>Cn});var r={};n.r(r),n.d(r,{AGGREGATION_OPERATION:()=>oe.KM,ArcLayer:()=>ae.ArcLayer,BitmapLayer:()=>ae.BitmapLayer,CPUGridLayer:()=>oe.ab,ColumnLayer:()=>ae.ColumnLayer,ContourLayer:()=>oe.YY,GPUGridLayer:()=>oe.ML,GeoJsonLayer:()=>ae.GeoJsonLayer,GreatCircleLayer:()=>se.GreatCircleLayer,GridCellLayer:()=>ae.GridCellLayer,GridLayer:()=>oe.mU,H3ClusterLayer:()=>se.H3ClusterLayer,H3HexagonLayer:()=>se.H3HexagonLayer,HeatmapLayer:()=>oe.zP,HexagonLayer:()=>oe.dX,IconLayer:()=>ae.IconLayer,LineLayer:()=>ae.LineLayer,MVTLayer:()=>se.MVTLayer,PathLayer:()=>ae.PathLayer,PointCloudLayer:()=>ae.PointCloudLayer,PolygonLayer:()=>ae.PolygonLayer,QuadkeyLayer:()=>se.QuadkeyLayer,S2Layer:()=>se.S2Layer,ScatterplotLayer:()=>ae.ScatterplotLayer,ScenegraphLayer:()=>le.ScenegraphLayer,ScreenGridLayer:()=>oe.p3,SimpleMeshLayer:()=>le.SimpleMeshLayer,SolidPolygonLayer:()=>ae.SolidPolygonLayer,TerrainLayer:()=>se.TerrainLayer,TextLayer:()=>ae.TextLayer,Tile3DLayer:()=>se.Tile3DLayer,TileLayer:()=>se.TileLayer,TripsLayer:()=>se.TripsLayer,_AggregationLayer:()=>oe.Di,_BinSorter:()=>oe.l0,_CPUAggregator:()=>oe.oA,_GPUGridAggregator:()=>oe.Wc,_MultiIconLayer:()=>ae._MultiIconLayer,_TextBackgroundLayer:()=>ae._TextBackgroundLayer,_getURLFromTemplate:()=>se._getURLFromTemplate});n(8559);var i=n(5893),a=n(745),o=n(7294),s=(n(6158),n(2687),n(4009)),l=n(6024),c=n(3295),u=n(17),d=n(8289),f=n(7682);function h(e,...t){if(null==e)return null;const n=t.map((t=>[t,e[t]]));return Object.fromEntries(n)}function p(e){return e.clientHeight>0&&e.clientHeight>0?e:e.parentElement?p(e.parentElement):null}function g(e){const t=p(e);if(e===t||null==t)return{width:e.clientWidth,height:e.clientHeight};const{width:n,height:r}=getComputedStyle(e),i=document.createElement("div");Object.assign(i.style,{width:n,height:r,display:"hidden"}),t.appendChild(i);const a={width:i.clientWidth,height:i.clientHeight};return t.removeChild(i),a}function y(e,t){const n=new Map;for(const r of e){const e=t(r);n.has(e)?n.get(e).push(r):n.set(e,[r])}return n}function m(...e){return e.filter((e=>null!=e)).join(" ")}class b{constructor(){Object.defineProperty(this,"_val",{enumerable:!0,configurable:!0,writable:!0,value:new Map}),Object.defineProperty(this,"_ref",{enumerable:!0,configurable:!0,writable:!0,value:new WeakMap})}getStore(e){return"object"==typeof(t=e)&&null!==t||"function"==typeof t?this._ref:this._val;var t}has(e){return this.getStore(e).has(e)}get(e){return this.getStore(e).get(e)}set(e,t){return this.getStore(e).set(e,t),this}}function v(e){const t=new b;return(...n)=>{const r=n[0],i=n.slice(0,-1).reduceRight(((e,t)=>{if(e.has(t))return e.get(t);const n=new b;return e.set(t,n),n}),t);if(i.has(r))return i.get(r);const a=e(...n);return i.set(r,a),a}}class w extends d.Z{setProps(e){const t=e.initialBounds;if(null!=t&&(n=t,r=this.props.initialBounds,!(n===r||null==n&&null==r||null!=n&&null!=r&&(null==n?void 0:n.every(((e,t)=>e===(null==r?void 0:r[t]))))))){const[n,r,i,a]=t,o=[[Math.max(n,-180),Math.max(r,-85.051129)],[Math.min(i,180),Math.min(a,85.051129)]];this._setCanvasSize(e);const{width:s,height:l}=this._getMapSize();e={...e,initialViewState:{...(0,f.Xg)({height:l,width:s,bounds:o}),bearing:0,pitch:0}}}var n,r;super.setProps(e)}_getMapSize(){const e=this.canvas;if(null==e)return{width:this.width,height:this.height};if(0===e.clientWidth&&0===e.clientHeight){const t=e.closest(".rdeck.html-widget");if(null!=t)return g(t)}return{width:e.clientWidth,height:e.clientHeight}}}function j(e){return null!==e&&"object"==typeof e&&"frame"in e}function x(e,{name:t,type:n}){var r,i,a,o;const s=e.frame,l=Object.fromEntries(Object.entries(s).map((([e])=>[e,[]]))),c=Object.keys(e.frame).filter((e=>e!==t)),u=s[t],d=function(e){switch(e){case"MULTIPOINT":return L;case"MULTILINESTRING":return k;case"MULTIPOLYGON":return O;default:throw TypeError(`${e} not supported`)}}(n),f=e=>{for(const t of c)l[t].push(s[t][e])},h=[];for(let n=0;n<e.length;n++){const s=u[n];if(d(s)){l[t].push(...s);for(let t=0;t<s.length;t++)f(n),h.push(null!==(i=null===(r=e.indices)||void 0===r?void 0:r[n])&&void 0!==i?i:n)}else l[t].push(s),f(n),h.push(null!==(o=null===(a=e.indices)||void 0===a?void 0:a[n])&&void 0!==o?o:n)}return{length:l[t].length,geometry:{...e.geometry,[t]:n.replace("MULTI","")},indices:h,frame:l}}function L(e){return Array.isArray(null==e?void 0:e[0])}function k(e){var t;return Array.isArray(null===(t=null==e?void 0:e[0])||void 0===t?void 0:t[0])}function O(e){var t,n;return Array.isArray(null===(n=null===(t=null==e?void 0:e[0])||void 0===t?void 0:t[0])||void 0===n?void 0:n[0])}Object.defineProperty(w,"defaultProps",{enumerable:!0,configurable:!0,writable:!0,value:{...d.Z.defaultProps,initialBounds:null}});const C=".feature_id";function S(e,t=null){if(!e.picked)return null;null==t&&(t=function({object:e,layer:t}){return!j(t.props.data)||t instanceof c.Z?function(e){return"Feature"===(null==e?void 0:e.type)&&"geometry"in e&&"type"in e.geometry}(e)?"geojson":"object":"table"}(e));const n=function(e){switch(e){case"table":return(e,{index:t,data:n})=>{const r=Object.keys(n.geometry),i={};for(const[e,a]of Object.entries(n.frame))r.includes(e)||(i[e]=a[t]);return i};case"object":return e=>({...e});case"geojson":return e=>({[C]:null==e?void 0:e.id,...null==e?void 0:e.properties});default:throw TypeError(`${e} not supported`)}}(t),{object:r,index:i}=e;return n(r,{index:i,data:e.layer.props.data})}const P="cyWLt4_G7nk5vT9hPr0o",M="Z9hHHet2RXmL0iMel3Zt",N="jp658yEHLlesSRvwBwDl",T="t9I8kJyjeEJEOArvMD7j",_="vovHpTur01BROrMLmEFz";function E({info:e}){if(!e.picked||null==e.layer.props.tooltip)return null;const{x:t,y:n}=e,{name:r,tooltip:a}=e.layer.props,o=S(e,a.dataType);delete o[C];const s=!0===a.cols?Object.keys(o):a.cols;return(0,i.jsxs)("div",{className:P,style:{transform:`translate(${t}px, ${n}px)`},children:[(0,i.jsx)("div",{className:M,children:r}),(0,i.jsx)("table",{className:N,children:(0,i.jsx)("tbody",{children:s.map((e=>{var t;return(0,i.jsxs)("tr",{children:[(0,i.jsx)("td",{className:T,children:e}),(0,i.jsx)("td",{className:_,children:String(null!==(t=o[e])&&void 0!==t?t:null)})]},e)}))})})]})}var A=n(9757);const Z=Object.freeze({additive:{[A.default.BLEND]:!0,blendFunc:[A.default.SRC_ALPHA,A.default.DST_ALPHA],blendEquation:A.default.FUNC_ADD},subtractive:{[A.default.BLEND]:!0,blendFunc:[A.default.ONE,A.default.ONE_MINUS_DST_COLOR,A.default.SRC_ALPHA,A.default.DST_ALPHA],blendEquation:[A.default.FUNC_SUBTRACT,A.default.FUNC_ADD]},normal:{[A.default.BLEND]:!0,blendFunc:[A.default.SRC_ALPHA,A.default.ONE_MINUS_SRC_ALPHA,A.default.ONE,A.default.ONE_MINUS_SRC_ALPHA],blendEquation:[A.default.FUNC_ADD,A.default.FUNC_ADD]}});function D(e="normal"){var t;return null!==(t=Z[e])&&void 0!==t?t:Z.normal}var F=n(4329),I=n(7359),R=n(9900);const H=[3,169,244],W=[116,117,129],U=[...H,216.75],G=[...W,216.75],V=[...H,38.25],z=[...W,38.25],B=[0,0,0,0];function $(e){if(null==e)return null;const{geojson:t,selectedFeatureIndices:n,setGeoJson:r,selectFeatures:i}=e,a=function(e){var t;return null!==(t=ee[null!=e?e:"view"])&&void 0!==t?t:ee.view}(e.mode),o=!te.includes(a);return new R.nk({data:t,selectedFeatureIndexes:n,mode:a,modeConfig:{screenSpace:!0,viewport:{}},onEdit:function({updatedData:e,editType:t,editContext:a}){var o;"updateTentativeFeature"!==t&&(this.data=e,"selectFeature"!==t?X.has(t)&&(null==r||r(e),"addFeature"===t&&(null==i||i([...n,...a.featureIndexes]))):null==i||i(null!==(o=a.selectedIndices)&&void 0!==o?o:[]))},pickable:a!==ee.view,pickingLineWidthExtraPixels:0,pickingDepth:0,getRadius:6,getLineWidth:1.5,getTentativeLineWidth:1.5,lineWidthScale:1,getFillColor:a===ee.view?B:q,getLineColor:J,getTentativeLineColor:U,getEditHandlePointOutlineColor:U,getTentativeFillColor:V,getEditHandlePointColor:B,getDashArray:o?[4,2]:[0,0],extensions:[new F.Z({dash:!0})],_subLayerProps:{geojson:{dataComparator:Y,_dataDiff:Q}}})}function q(e,t,n){return t?V:z}function J(e,t,n){return t?U:G}function Y(e,t){return Object.is(e.features,t.features)}function Q(e,t){const n=e.features,r=t.features;if(n.length!==r.length)return"A new data container was supplied";const i=[];for(let e=0;e<n.length;++e)n[e]!==r[e]&&i.push({startRow:e,endRow:e+1});return i}const X=Object.freeze(new Set(["addPosition","removePosition","addFeature","finishMovePosition","scaled","rotated","translated","extruded","split"]));class K extends I.ViewMode{handlePointerMove(e,t){var n;const r=0!==(null===(n=null==e?void 0:e.picks)||void 0===n?void 0:n.length);t.onUpdateCursor(r?"pointer":null)}handleClick(e,t){var n;if(!(0!==(null==e?void 0:e.picks.length)))return;const r=new Set(t.selectedIndexes),i=new Set(e.picks.map((e=>e.index))),a=function(e,t){for(const n of t)if(!e.has(n))return!1;return!0}(r,i)?function(...e){const t=new Set(e[0]);for(const n of e.slice(1))for(const e of n)t.delete(e);return t}(r,i):function(...e){return new Set(e.flatMap((e=>[...e])))}(r,i);null===(n=t.onEdit)||void 0===n||n.call(t,{updatedData:t.data,editType:"selectFeature",editContext:{selectedIndices:[...a]}})}}const ee=Object.seal({view:I.ViewMode,select:K,modify:I.ModifyMode,transform:I.TransformMode,linestring:I.DrawLineStringMode,point:I.DrawPointMode,polygon:I.DrawPolygonMode,lasso:I.DrawPolygonByDraggingMode}),te=[ee.view,ee.select];function ne({deckgl:e,mapgl:t,layers:n,editor:r}){const a=(0,o.useRef)(null),[c,d]=re();let{blendingMode:f,controller:h,onClick:p,...g}=e;const y={...e.parameters,...f&&D(f)},[m,b]=(0,o.useState)(0),v=n.some((e=>"TripsLayer"===e.type));ie(v,(e=>b(e)));const j=n.map((e=>null!=e.type?e.renderLayer(m):null)),x=$(r),L=null!=r&&!["view","select"].includes(r.mode);return L&&h&&(h={...h,doubleClickZoom:!1}),(0,i.jsxs)(o.Fragment,{children:[(0,i.jsx)(l.Z,{Deck:w,ref:a,...{...g,parameters:y},layers:[...j,x],onHover:L?void 0:d,onClick:L?void 0:p,getCursor:null==x?void 0:x.getCursor.bind(x),children:(0,i.jsx)(s.Z,{id:"map",controller:h,repeat:!0,children:t.mapStyle&&(0,i.jsx)(u.D5,{...t})})}),c&&(0,i.jsx)(E,{info:c})]})}const re=()=>{const[e,t]=(0,o.useState)(null);return[e,(0,o.useCallback)((e=>{if(!e.picked||!e.layer.props.tooltip||e.layer instanceof c.Z)return t(null);t(e)}),[])]},ie=(e,t)=>{const n=(0,o.useRef)(0),r=(0,o.useRef)(Date.now()),i=()=>{t(Date.now()-r.current),n.current=window.requestAnimationFrame(i)};(0,o.useEffect)((()=>{if(e)return n.current=window.requestAnimationFrame(i),()=>window.cancelAnimationFrame(n.current)}),[e])};var ae=n(7786),oe=n(9080),se=n(803),le=n(1956),ce=n(5395);const ue=[0,0,0,255];function de([e,t,n,r=255]){return`rgba(${e}, ${t}, ${n}, ${r/255})`}function fe(e,t){return Array.isArray(e)?t||4!==e.length?((t=null!=t?t:[])[0]=e[0],t[1]=e[1],t[2]=e[2],t[3]=3===e.length?e[3]:255,t):e:"string"==typeof e?(function(e,t){if(7===e.length){const n=parseInt(e.substring(1),16);t[0]=Math.floor(n/65536),t[1]=Math.floor(n/256%256),t[2]=n%256,t[3]=255}else if(9===e.length){const n=parseInt(e.substring(1),16);t[0]=Math.floor(n/16777216),t[1]=Math.floor(n/65536%256),t[2]=Math.floor(n/256%256),t[3]=n%256}}(e,t=null!=t?t:[]),t):ue}var he=n(4634),pe=n(4177),ge=n(458),ye=n(5801),me=n(3613),be=n(602),ve=n(8973),we=n(2625);function je(e){return null!==e&&"object"==typeof e&&"accessor"===e.type}function xe(e){return je(e)&&"scale"in e}var Le=n(3693),ke=n(4717),Oe=n(6867),Ce=n(3326),Se=n(2112),Pe=n(7693),Me=n(8569),Ne=n(1435);class Te extends Le.Z{initializeState(){if(!function(e){return _e.some((t=>e instanceof t))}(this))return;const e=this,t=e.getAttributeManager();t&&t.addInstanced({pickingColors:{type:A.default.UNSIGNED_BYTE,size:3,accessor:(t,{index:n,data:r,target:i})=>{var a,o,s;if(j(r)&&Array.isArray(r.indices))return e.encodePickingColor(r.indices.indexOf(r.indices[n]),i);const l=null===(o=null===(a=null==t?void 0:t.__source)||void 0===a?void 0:a.parent)||void 0===o?void 0:o.props.data;return j(l)&&Array.isArray(l.indices)?e.encodePickingColor(l.indices.indexOf(l.indices[t.__source.index]),i):e.encodePickingColor(null!==(s=null==t?void 0:t.__source.index)&&void 0!==s?s:n,i)},shaderAttributes:{pickingColors:{divisor:0},instancePickingColors:{divisor:1}}}})}}const _e=[ke.Z,Oe.Z,Ce.Z,Se.Z,Pe.Z,Me.Z,Ne.Z];const Ee=v((function(e){const t=function(e){return Object.entries(e.geometry).filter((([,e])=>/MULTI/.test(e))).map((([e,t])=>({name:e,type:t})))}(e);return 0===t.length?e:t.reduce(x,e)})),Ae=v(fe),Ze=v((function(e,t){const n=function({col:e,dataType:t},n){if("highlightColor"===n)switch(t){case"table":return function(e){return({index:t,layer:n})=>fe(n.props.data.frame[e][t])}(e);case"object":return function(e){return({object:t})=>fe(t[e])}(e);case"geojson":return function(e){return({object:t})=>fe(t.properties[e])}(e);default:throw TypeError(`${t} not supported`)}if(n.endsWith("Color"))switch(t){case"table":return function(e){return(t,{index:n,data:r,target:i})=>fe(r.frame[e][n],i)}(e);case"object":return function(e){return(t,{target:n})=>fe(t[e],n)}(e);case"geojson":return function(e){return(t,{target:n})=>fe(t.properties[e],n)}(e);default:throw TypeError(`${t} not supported`)}switch(t){case"table":return function(e){return(t,{index:n,data:r})=>r.frame[e][n]}(e);case"object":return function(e){return t=>t[e]}(e);case"geojson":return function(e){return t=>t.properties[e]}(e);default:throw TypeError(`${t} not supported`)}}(e,t);return{...e,getData:n}})),De=v((function(e,t){"palette"in e&&(e.range=e.palette.map((e=>fe(e))),e.unknown=fe(e.unknown));const n=function(e){switch(e.scale){case"linear":return(0,he.Z)().domain(e.domain).range(e.range).unknown(e.unknown).clamp(!0);case"power":return(0,pe.ZP)().exponent(e.exponent).domain(e.domain).range(e.range).unknown(e.unknown).clamp(!0);case"log":return(0,ge.Z)().base(e.base).domain(e.domain).range(e.range).unknown(e.unknown).clamp(!0);case"symlog":return(0,ye.Z)().domain(e.domain).range(e.range).unknown(e.unknown).clamp(!0);case"identity":return(0,me.Z)().unknown(e.unknown);case"threshold":case"quantile":return(0,be.Z)().domain(e.domain).range(e.range).unknown(e.unknown);case"category":return(0,ve.Z)().domain(e.domain).range(e.range).unknown(e.unknown);case"quantize":return(0,we.Z)().domain(e.domain).range(e.range).unknown(e.unknown);default:throw TypeError(`scale ${e.scale} not supported`)}}(e),r="highlightColor"===t?function({col:e,dataType:t},n){switch(t){case"table":return function(e,t){return({index:n,layer:r})=>t(r.props.data.frame[e][n])}(e,n);case"object":return function(e,t){return({object:n})=>t(n[e])}(e,n);case"geojson":return function(e,t){return({object:n})=>t(n.properties[e])}(e,n);default:throw TypeError(`${t} not supported`)}}(e,n):function({col:e,dataType:t},n){switch(t){case"table":return function(e,t){return(n,{index:r,data:i})=>t(i.frame[e][r])}(e,n);case"object":return function(e,t){return n=>t(n[e])}(e,n);case"geojson":return function(e,t){return n=>t(n.properties[e])}(e,n);default:throw TypeError(`${t} not supported`)}}(e,n);return{...e,name:t,getData:r,scaleData:n}}));class Fe{constructor({type:e,...t}){var n,r;Object.defineProperty(this,"type",{enumerable:!0,configurable:!0,writable:!0,value:void 0}),Object.defineProperty(this,"props",{enumerable:!0,configurable:!0,writable:!0,value:void 0}),Object.defineProperty(this,"scales",{enumerable:!0,configurable:!0,writable:!0,value:void 0});const i=Object.entries(t),a=function(e){const t=e.filter(Ie).map((([e,t])=>[e,Ae(t)])),n=e.find((([e])=>"colorRange"===e));n&&t.push([n[0],n[1].map((e=>Ae(e)))]);return t}(i),o=function(e){return e.filter((([,e])=>je(e))).map((([e,t])=>[e,xe(t)?De(t,e):Ze(t,e)]))}(i);this.type=e;const s=Object.fromEntries([...i,...a,...o.map((([e,t])=>[e,t.getData])),...He(i),["visible",null===(n=t.visible)||void 0===n||n],["updateTriggers",Re(o)],["parameters",(l=t.parameters,c=t.blendingMode,{...l,...D(c)})]]);var l,c;j(s.data)&&(s.data=Ee(s.data),s.extensions=[new Te,...null!==(r=s.extensions)&&void 0!==r?r:[]]),"TileLayer"===e&&(s.renderSubLayers=e=>{const{bbox:{west:t,south:n,east:r,north:i},x:a,y:o,z:s}=e.tile;return new ce.Z({...e,data:[{z:s,x:a,y:o}],image:e.data,bounds:[t,n,r,i]})}),this.props=s,this.scales=o.filter((([,e])=>xe(e))).map((([,e])=>e)),"TextLayer"===e&&"fonts"in document&&document.fonts.load(`16px ${t.fontFamily}`)}static create(e){return new Fe(e)}renderLayer(e){if("TripsLayer"===this.type&&void 0!==e){const t=this.props,{loopLength:n,animationSpeed:r}=t,i=n/r,a=e/1e3%i/i;t.currentTime=a*n}return new r[this.type]({...this.props})}renderLegend(){const e=this.scales.filter((e=>e.legend));return{id:this.props.id,name:this.props.name,scales:e}}renderSelector(){var e;return{id:this.props.id,groupName:this.props.groupName,name:this.props.name,visible:null===(e=this.props.visible)||void 0===e||e}}}function Ie([e,t]){return e.endsWith("Color")&&(Array.isArray(t)||"string"==typeof t)}function Re(e){const t=e=>{const{getData:t,scaleData:n,palette:r,...i}=e;return i},n=e.map((([e,n])=>[e,t(n)]));return Object.fromEntries(n)}function He(e){return e.filter((([e])=>"getColorWeight"===e||"getElevationWeight"===e)).filter((([,e])=>null!==e&&"function"!=typeof e&&!je(e))).map((([e,t])=>[e,()=>t]))}var We=n(6082),Ue=n(912),Ge=n(2372),Ve=n(8426);const ze="U44LhpKlV8r1Vu1ZoZA3",Be="XF770nELUcE_0zxo_aOg",$e="HYRhC2aw1PSMYGCz2bDb",qe="YNou4FYlc3N3GhFp2BkO",Je="f44NGqZZGn4de9S3oTHN",Ye="xqKP289MUJ06Hgb3CjoW",Qe="XctZC_fZAMvRMiHPlt9G",Xe="ly9kEH8MpXynhBX6Fhcj",Ke="iM2OiMQz6z_NtAQZZyPS",et="_8r8348KPS_nzNLR_CV_",tt="tzkFrkEU5cB_jY6zcuua",nt=Date.now();function rt({className:e,tooltip:t,onClick:n,children:r}){return(0,i.jsx)("button",{className:e,type:"button",onClick:n,title:t,children:r})}function it({layers:e,onVisibilityChange:t}){const n=y(e,(e=>{var t;return null!==(t=e.groupName)&&void 0!==t?t:`${e.name}-${nt}`})),r=(n,r,i)=>{if(i){const i=!e.filter((e=>!n.includes(e))).some((e=>e.visible));return t(e.map((e=>({...e,visible:n.includes(e)?r:i}))))}t(n.map((e=>({...e,visible:r}))))},[a,s]=(0,o.useState)(!1),l=()=>s((e=>!e));return a?(0,i.jsxs)("div",{className:Be,children:[(0,i.jsx)("div",{className:$e,children:(0,i.jsxs)(rt,{className:qe,onClick:l,tooltip:"Close",children:[(0,i.jsx)(We.Z,{className:tt,fontSize:"small"}),(0,i.jsx)("span",{className:Je,children:"Layers"})]})}),(0,i.jsx)("div",{className:Ye,children:Array.from(n.entries(),(([e,t,[{groupName:n}]=t])=>(0,i.jsx)(at,{group:n,layers:t,onChange:r},e)))})]}):(0,i.jsx)(rt,{className:ze,tooltip:"Layer selector",onClick:l,children:(0,i.jsx)(We.Z,{className:tt,fontSize:"small"})})}function at({group:e,layers:t,onChange:n}){const r=Array.from(y(t,(e=>e.name)),(([e,t])=>(0,i.jsx)(ot,{name:e,layers:t,onChange:n},e)));return e?(0,i.jsxs)(o.Fragment,{children:[(0,i.jsx)(ot,{name:e,layers:t,onChange:n}),(0,i.jsx)("div",{className:Qe,children:r})]}):(0,i.jsx)(o.Fragment,{children:r})}function ot({name:e,layers:t,onChange:n}){const r=function(e){let t=e[0].visible;for(const n of e)if(n.visible!==t)return null;return t}(t),a=null===r,s=(0,o.useRef)(null);(0,o.useEffect)((()=>{s.current&&(s.current.indeterminate=a)}),[a]);const l=(0,o.useRef)((()=>!1)),c=r?Ue.Z:a?Ge.Z:Ve.Z,u=m(Xe,r||a?Ke:null);return(0,i.jsxs)("label",{className:u,children:[(0,i.jsx)("input",{ref:s,className:et,type:"checkbox",onChange:()=>{l.current()?n(t,!0,!0):l.current=st((()=>n(t,!r,!1)),200)},checked:null==r||r}),(0,i.jsx)(c,{fontSize:"small",className:tt}),(0,i.jsx)("span",{className:Je,children:e})]})}const st=(e,t=200)=>{const n={current:0};let r=0;const i=a=>{if(r||(r=a),a-r>t)return n.current=0,void e();n.current=globalThis.requestAnimationFrame(i)};return n.current=globalThis.requestAnimationFrame(i),()=>0!==n.current&&(globalThis.cancelAnimationFrame(n.current),n.current=0,!0)},lt="lWOwchFb6W2NpcWR4ZQS",ct="mIJjIoOSsjLZMp591rN0",ut="OULly07OGkLPRiEDgp00",dt="oxctK5Tcknb3syUfT7xg",ft="KEbGPBIjLXnjAiUTu8eP",ht="MBBFrOSR5F_grZcyOCp0",pt="l_4PaMO7BWOn4DcLN5Oh",gt="aWzYqDozdq6Vl4QuIJ1y",yt="xaprV4ANDgRiE5ai1hUl",mt="f6SnauerJY75ZqNAuK56",bt=16;function vt({layers:e}){return 0===e.length?null:(0,i.jsx)("div",{className:lt,children:e.map((e=>(0,i.jsx)(wt,{...e},e.id)))})}function wt({name:e,scales:t}){return 0===t.length?null:(0,i.jsxs)("div",{className:ct,children:[(0,i.jsx)("div",{className:ut,title:e,children:e}),t.map((e=>(0,i.jsx)(jt,{...e},e.name)))]})}function jt(e){var t;const n=e.name.replace(/^get/,"").replace(/([A-Z])/g," $1").toLowerCase();const r="palette"in e;const a=function(e){return"linear"===e.scale||"power"===e.scale||"log"===e.scale||"symlog"===e.scale}(e),o=function(e){return"threshold"===e.scale||"quantile"===e.scale||"quantize"===e.scale}(e);return(0,i.jsxs)("div",{className:dt,children:[(0,i.jsx)("div",{className:ft,children:n}),(0,i.jsx)("span",{className:ht,children:"by "}),(0,i.jsx)("span",{className:pt,title:e.col,children:null!==(t=e.scaleBy)&&void 0!==t?t:e.col}),r&&a&&(0,i.jsx)(xt,{...e}),r&&o&&(0,i.jsx)(Lt,{...e}),r&&"category"===e.scale&&(0,i.jsx)(kt,{...e})]})}const xt=({ticks:e,scaleData:t})=>{const n=e.map(((e,t)=>t)).slice(1,-1),r=bt*(e.length-1),a=r+11+1;return(0,i.jsxs)("svg",{className:gt,height:a,shapeRendering:"crispEdges",children:[(0,i.jsxs)("svg",{y:5,children:[(0,i.jsx)("image",{width:20,height:r,href:Ct(t),preserveAspectRatio:"none"}),n.map((e=>(0,i.jsx)("line",{className:mt,x2:20,y1:bt*e,y2:bt*e},e)))]}),(0,i.jsx)(Ot,{ticks:e,y:-2})]})},Lt=({ticks:e,range:t})=>{const n=t.map(de),r=bt*(e.length-1)+11+1;return(0,i.jsxs)("svg",{className:gt,height:r,shapeRendering:"crispEdges",children:[(0,i.jsx)("svg",{y:5,children:n.map(((e,t)=>(0,i.jsx)("rect",{width:20,height:bt,y:t*bt,fill:e},t)))}),(0,i.jsx)(Ot,{ticks:e,y:-2})]})};function kt({ticks:e,range:t,unknownTick:n,unknown:r}){const a=n?[...t,r]:t,o=n?[...e,n]:e,s=a.map(de),l=bt*o.length;return(0,i.jsxs)("svg",{className:gt,height:l,children:[(0,i.jsx)("svg",{children:s.map(((e,t)=>(0,i.jsx)("rect",{width:20,height:14,y:1+t*bt,fill:e},t)))}),(0,i.jsx)(Ot,{ticks:o})]})}function Ot({ticks:e,x:t=28,y:n=0}){return(0,i.jsx)("svg",{x:t,y:n,children:e.map(((e,t)=>(0,i.jsx)("text",{className:yt,y:bt*t,dy:11,children:String(e)},t)))})}function Ct(e,t=200){const n=e.range().length,r=[...Array(n).keys()].map((e=>e/(n-1))),i=e.copy().range(r).invert,a=document.createElement("canvas"),o=a.getContext("2d");a.width=1,a.height=t;for(let n=0;n<t;n++)o.fillStyle=de(e(i(n/t))),o.fillRect(0,n,1,1);return a.toDataURL()}var St=n(7046),Pt=n(6533),Mt=n(9292),Nt=n(9744),Tt=n(1610),_t=n(904),Et=n(5482),At=n(7226),Zt=n(5579),Dt=n(9702),Ft=n(2149),It=n(6761);const Rt="S_Jw5xlS4ysjLfEnG1_V",Ht="ulA2RQmkQhSnak9JlXnZ",Wt="aIE33mXFqOBosVEFBrb8",Ut="llmi5hyDHtcHqa2r__su",Gt="ilhkc5o5ZlSd4IaGytLF",Vt=()=>{};function zt({mode:e="view",geojson:t,selectedFeatureIndices:n,setMode:r=Vt,download:a=Vt,upload:o=Vt,deleteSelected:s=Vt}){const l=0!==(null==n?void 0:n.length);return(0,i.jsxs)("div",{className:Rt,children:[(0,i.jsxs)("div",{className:Ht,children:[(0,i.jsx)(Bt,{name:"View",icon:_t.Z,iconStyle:{transform:"scale(0.9)"},active:"view"===e,onClick:()=>r("view")}),(0,i.jsx)(Bt,{name:"Select",icon:Et.Z,active:"select"===e,onClick:()=>r("select")})]}),(0,i.jsxs)("div",{className:Ht,children:[(0,i.jsx)(Bt,{name:"Modify",icon:Mt.Z,active:"modify"===e,disabled:!l,onClick:()=>r("modify")}),(0,i.jsx)(Bt,{name:"Transform",icon:At.Z,active:"transform"===e,disabled:!l,onClick:()=>r("transform")}),(0,i.jsx)(Bt,{name:"Point",icon:Zt.Z,active:"point"===e,onClick:()=>r("point")}),(0,i.jsx)(Bt,{name:"LineString",icon:Nt.Z,active:"linestring"===e,onClick:()=>r("linestring")}),(0,i.jsx)(Bt,{name:"Polygon",icon:Pt.Z,active:"polygon"===e,onClick:()=>r("polygon")}),(0,i.jsx)(Bt,{name:"Lasso",icon:St.Z,active:"lasso"===e,onClick:()=>r("lasso")})]}),(0,i.jsxs)("div",{className:Ht,children:[(0,i.jsx)(Bt,{name:"Download",icon:Dt.Z,onClick:()=>a(t)}),(0,i.jsx)(Bt,{name:"Upload",icon:Ft.Z,onClick:()=>o(t)})]}),(0,i.jsx)("div",{className:Ht,children:(0,i.jsx)(Bt,{name:"Delete",icon:It.Z,disabled:!l,onClick:()=>s(n)})})]})}function Bt({name:e,onClick:t=Vt,disabled:n=!1,active:r=!1,icon:a,iconStyle:o}){const s=m(Wt,r?Ut:null);return(0,i.jsx)("button",{className:s,onClick:t,title:e,disabled:n,children:a&&(0,i.jsx)(Tt.Z,{component:a,className:Gt,fontSize:"small",style:o})})}const $t="rdeck",qt="XTuYKSlBcC933W4sKWtC",Jt="kQnelQ4hkAJEJHLO0NJI",Yt="hQbOOdEZw0LO0llGKVqS",Qt="cSol54mlVTgAnRzj_GUM";function Xt({theme:e,deckgl:t,mapgl:n,layers:r,lazyLoad:a=!1,layerSelector:s=!1,onLayerVisibilityChange:l,editor:c}){var u;const d=null!==(u=null==r?void 0:r.map(Fe.create))&&void 0!==u?u:[],f=(0,o.useRef)(null),h=function(e,t){const[n,r]=(0,o.useState)(!1);return(0,o.useEffect)((()=>{if(t&&e.current){const t=new IntersectionObserver((e=>{r(e[0].isIntersecting)}),{threshold:0});return t.observe(e.current),()=>t.disconnect()}}),[t,e]),n}(f,a),p=!a||h;return(0,i.jsxs)("div",{ref:f,className:m($t,e),children:[(0,i.jsx)("div",{className:m(qt,Jt),children:s&&(0,i.jsx)(it,{layers:d.filter((e=>e.props.visibilityToggle)).map((e=>e.renderSelector())).reverse(),onVisibilityChange:l})}),(0,i.jsx)("div",{className:m(qt,Yt),children:(0,i.jsx)(vt,{layers:d.filter((e=>e.props.visible)).map((e=>e.renderLegend())).reverse()})}),(0,i.jsx)("div",{className:m(qt,Qt),children:c&&(0,i.jsx)(zt,{...c})}),p&&(0,i.jsx)(ne,{deckgl:t,mapgl:n,layers:d,editor:c})]})}var Kt=n(6935);function en(e){const t=e instanceof Kt.Z?e:new Kt.Z(e),n=h(t,"longitude","latitude","zoom","bearing","pitch","altitude");return{bounds:t.getBounds(),viewState:{...n,center:t.unprojectFlat(t.center)}}}function tn(e,t){const n=(e,n)=>null==t?void 0:t({[e]:n}),r=(e,t,{value:r})=>Reflect.defineProperty(e,t,{enumerable:!0,configurable:!1,get:()=>r,set(e){Object.is(e,r)||(r=e,n(t,e))}}),i=(e,t,r)=>Reflect.defineProperty(e,t,{...r,enumerable:!0,configurable:!1,set(i){var a,o;const s=null===(a=r.get)||void 0===a?void 0:a.call(e);Object.is(i,s)||(null===(o=r.set)||void 0===o||o.call(e,i),n(t,i))}}),a=e=>Object.entries(Object.getOwnPropertyDescriptors(e));for(const[t,n]of a(e))n.configurable&&n.writable&&r(e,t,n);for(const[t,n]of a(Object.getPrototypeOf(e)))"function"==typeof n.set&&i(e,t,n);return e}var nn,rn,an,on,sn=function(e,t,n,r){if("a"===n&&!r)throw new TypeError("Private accessor was defined without a getter");if("function"==typeof t?e!==t||!r:!t.has(e))throw new TypeError("Cannot read private member from an object whose class did not declare it");return"m"===n?r:"a"===n?r.call(e):r?r.value:t.get(e)},ln=function(e,t,n,r,i){if("m"===r)throw new TypeError("Private method is not writable");if("a"===r&&!i)throw new TypeError("Private accessor was defined without a setter");if("function"==typeof t?e!==t||!i:!t.has(e))throw new TypeError("Cannot write private member to an object whose class did not declare it");return"a"===r?i.call(e,n):i?i.value=n:t.set(e,n),n};const cn={longitude:0,latitude:0,zoom:0,pitch:0,bearing:0};class un{constructor(e){Object.defineProperty(this,"useDevicePixels",{enumerable:!0,configurable:!0,writable:!0,value:void 0}),Object.defineProperty(this,"pickingRadius",{enumerable:!0,configurable:!0,writable:!0,value:void 0}),Object.defineProperty(this,"blendingMode",{enumerable:!0,configurable:!0,writable:!0,value:void 0}),Object.defineProperty(this,"effects",{enumerable:!0,configurable:!0,writable:!0,value:void 0}),Object.defineProperty(this,"controller",{enumerable:!0,configurable:!0,writable:!0,value:void 0}),Object.defineProperty(this,"initialViewState",{enumerable:!0,configurable:!0,writable:!0,value:cn}),Object.defineProperty(this,"initialBounds",{enumerable:!0,configurable:!0,writable:!0,value:void 0}),Object.defineProperty(this,"onViewStateChange",{enumerable:!0,configurable:!0,writable:!0,value:void 0}),Object.defineProperty(this,"onClick",{enumerable:!0,configurable:!0,writable:!0,value:void 0}),Object.assign(this,e)}}class dn{constructor(e){Object.defineProperty(this,"mapboxAccessToken",{enumerable:!0,configurable:!0,writable:!0,value:void 0}),Object.defineProperty(this,"mapStyle",{enumerable:!0,configurable:!0,writable:!0,value:void 0}),Object.defineProperty(this,"reuseMaps",{enumerable:!0,configurable:!0,writable:!0,value:!0}),Object.assign(this,e)}}const fn=Object.freeze({type:"FeatureCollection",features:[]});class hn{constructor(e){Object.defineProperty(this,"mode",{enumerable:!0,configurable:!0,writable:!0,value:"view"}),Object.defineProperty(this,"geojson",{enumerable:!0,configurable:!0,writable:!0,value:fn}),Object.defineProperty(this,"selectedFeatureIndices",{enumerable:!0,configurable:!0,writable:!0,value:[]}),Object.defineProperty(this,"upload",{enumerable:!0,configurable:!0,writable:!0,value:void 0}),Object.assign(this,e),this.setMode=this.setMode.bind(this),this.selectFeatures=this.selectFeatures.bind(this),this.setGeoJson=this.setGeoJson.bind(this),this.deleteSelected=this.deleteSelected.bind(this),this.download=this.download.bind(this)}setMode(e){this.mode=e}selectFeatures(e){this.selectedFeatureIndices=e}setGeoJson(e){this.geojson=e}deleteSelected(e=[0]){const t=this.geojson.features.filter(((t,n)=>!e.includes(n)));Object.assign(this,{mode:["modify","transform"].includes(this.mode)?"view":this.mode,selectedFeatureIndices:[],geojson:{...this.geojson,features:t}})}download(e){const t=new Blob([JSON.stringify(e)],{type:"application/geo+json"}),n=document.createElement("a");n.href=URL.createObjectURL(t),n.download="rdeck.geojson",n.click()}}class pn{constructor(e={},t){Object.defineProperty(this,"theme",{enumerable:!0,configurable:!0,writable:!0,value:"kepler"}),nn.set(this,new un),rn.set(this,new dn),Object.defineProperty(this,"layers",{enumerable:!0,configurable:!0,writable:!0,value:[]}),Object.defineProperty(this,"layerSelector",{enumerable:!0,configurable:!0,writable:!0,value:!1}),Object.defineProperty(this,"lazyLoad",{enumerable:!0,configurable:!0,writable:!0,value:!1}),an.set(this,null),Object.defineProperty(this,"onChange",{enumerable:!0,configurable:!0,writable:!0,value:void 0}),on.set(this,(()=>{var e;return null===(e=this.onChange)||void 0===e?void 0:e.call(this)})),this.setState(e),Reflect.defineProperty(this,"onChange",{configurable:!1,enumerable:!1,value:t,writable:!0}),this.setLayerVisibility=this.setLayerVisibility.bind(this),tn(this,sn(this,on,"f"))}get deckgl(){return sn(this,nn,"f")}set deckgl(e){ln(this,nn,tn(new un(e),sn(this,on,"f")),"f")}get mapgl(){return sn(this,rn,"f")}set mapgl(e){ln(this,rn,tn(new dn(e),sn(this,on,"f")),"f")}get editor(){return sn(this,an,"f")}set editor(e){ln(this,an,null!=e?tn(new hn(e),sn(this,on,"f")):null,"f")}setState({deckgl:e,mapgl:t,editor:n,...r}={}){Object.assign(this,{...r,deckgl:{...this.deckgl,...e},mapgl:{...this.mapgl,...t}}),void 0!==n&&(this.editor=null!=n?{...this.editor,...n}:null)}upsertLayer(e){var t,n,r;const i=this.layers.find((t=>t.id===e.id));if(null==i)return void(this.layers=[...this.layers,e]);const a={...i,...e,visible:null!==(t=e.visible)&&void 0!==t?t:null==i?void 0:i.visible,data:null!==(r=null!==(n=e.data)&&void 0!==n?n:null==i?void 0:i.data)&&void 0!==r?r:null};this.layers=this.layers.map((e=>e===i?a:e))}setLayerVisibility(e){if(0===e.length)return;this.layers=this.layers.map((t=>{const n=e.find((e=>((e,t)=>{const n=e.name===t.name,r=e.groupName===t.groupName;return n&&r||null==e.name&&null!=e.groupName&&r})(e,t)&&e.visible!==t.visible));return n?{...t,visible:n.visible}:t}))}}nn=new WeakMap,rn=new WeakMap,an=new WeakMap,on=new WeakMap;var gn,yn,mn,bn,vn,wn,jn=function(e,t,n,r,i){if("m"===r)throw new TypeError("Private method is not writable");if("a"===r&&!i)throw new TypeError("Private accessor was defined without a setter");if("function"==typeof t?e!==t||!i:!t.has(e))throw new TypeError("Cannot write private member to an object whose class did not declare it");return"a"===r?i.call(e,n):i?i.value=n:t.set(e,n),n},xn=function(e,t,n,r){if("a"===n&&!r)throw new TypeError("Private accessor was defined without a getter");if("function"==typeof t?e!==t||!r:!t.has(e))throw new TypeError("Cannot read private member from an object whose class did not declare it");return"m"===n?r:"a"===n?r.call(e):r?r.value:t.get(e)};class Ln{constructor(e,t){gn.set(this,void 0),yn.set(this,void 0),mn.set(this,void 0),bn.set(this,((e,t)=>{var n,r,i;if(null===(r=(n=xn(this,mn,"f").deckgl).onClick)||void 0===r||r.call(n,e,t),HTMLWidgets.shinyMode){const t={coordinate:e.coordinate,...en(e.viewport),layer:h(null===(i=e.layer)||void 0===i?void 0:i.props,"id","name","groupName"),object:S(e)};Shiny.setInputValue(`${this.element.id}_click`,t,{priority:"event"})}})),vn.set(this,(e=>{var t,n;if(null===(n=(t=xn(this,mn,"f").deckgl).onViewStateChange)||void 0===n||n.call(t,e),HTMLWidgets.shinyMode){const t=en(e.viewState);Shiny.setInputValue(`${this.element.id}_viewstate`,t,{priority:"event"})}})),wn.set(this,(e=>{HTMLWidgets.shinyMode&&Shiny.setInputValue(`${this.element.id}_editorupload`,{geojson:JSON.stringify(e)})})),jn(this,yn,e,"f"),jn(this,gn,(0,a.s)(e),"f"),jn(this,mn,new pn(t,(()=>this.render())),"f"),HTMLWidgets.shinyMode&&(Shiny.addCustomMessageHandler(`${e.id}:layer`,(e=>{this.state.upsertLayer(e)})),Shiny.addCustomMessageHandler(`${e.id}:deck`,(e=>{this.state.setState(e)})))}get element(){return xn(this,yn,"f")}get state(){return xn(this,mn,"f")}render(){let{deckgl:e,mapgl:t,editor:n,...r}=xn(this,mn,"f");e={...e,onClick:xn(this,bn,"f"),onViewStateChange:xn(this,vn,"f")},null!=n&&(n={...n,upload:xn(this,wn,"f")}),null!=e.initialBounds&&delete e.initialViewState,xn(this,gn,"f").render((0,i.jsx)(o.StrictMode,{children:(0,i.jsx)(Xt,{...{...r,deckgl:e,mapgl:t,editor:n,onLayerVisibilityChange:this.state.setLayerVisibility}})}))}setLayerVisibility(e){return xn(this,mn,"f").setLayerVisibility(e)}}gn=new WeakMap,yn=new WeakMap,mn=new WeakMap,bn=new WeakMap,vn=new WeakMap,wn=new WeakMap;const kn={name:"rdeck",type:"output",factory(e,t,n){let r=null;return{get instance(){return r},renderValue(t){r=new Ln(e,t),r.render()},resize(){}}}};function On(e){const t=document.getElementById(e);return t&&Sn(t)}function Cn(){return[...document.querySelectorAll(".rdeck.html-widget")].map((e=>Sn(e))).filter((e=>e instanceof Ln))}function Sn(e){var t;return null===(t=null==e?void 0:e.htmlwidget_data_init_result)||void 0===t?void 0:t.instance}HTMLWidgets.widget(kn);const Pn="0.4.0"},479:()=>{},9125:()=>{},9214:()=>{}},i={};function a(e){var t=i[e];if(void 0!==t)return t.exports;var n=i[e]={exports:{}};return r[e].call(n.exports,n,n.exports,a),n.exports}a.m=r,e=[],a.O=(t,n,r,i)=>{if(!n){var o=1/0;for(u=0;u<e.length;u++){for(var[n,r,i]=e[u],s=!0,l=0;l<n.length;l++)(!1&i||o>=i)&&Object.keys(a.O).every((e=>a.O[e](n[l])))?n.splice(l--,1):(s=!1,i<o&&(o=i));if(s){e.splice(u--,1);var c=r();void 0!==c&&(t=c)}}return t}i=i||0;for(var u=e.length;u>0&&e[u-1][2]>i;u--)e[u]=e[u-1];e[u]=[n,r,i]},a.n=e=>{var t=e&&e.__esModule?()=>e.default:()=>e;return a.d(t,{a:t}),t},n=Object.getPrototypeOf?e=>Object.getPrototypeOf(e):e=>e.__proto__,a.t=function(e,r){if(1&r&&(e=this(e)),8&r)return e;if("object"==typeof e&&e){if(4&r&&e.__esModule)return e;if(16&r&&"function"==typeof e.then)return e}var i=Object.create(null);a.r(i);var o={};t=t||[null,n({}),n([]),n(n)];for(var s=2&r&&e;"object"==typeof s&&!~t.indexOf(s);s=n(s))Object.getOwnPropertyNames(s).forEach((t=>o[t]=()=>e[t]));return o.default=()=>e,a.d(i,o),i},a.d=(e,t)=>{for(var n in t)a.o(t,n)&&!a.o(e,n)&&Object.defineProperty(e,n,{enumerable:!0,get:t[n]})},a.g=function(){if("object"==typeof globalThis)return globalThis;try{return this||new Function("return this")()}catch(e){if("object"==typeof window)return window}}(),a.o=(e,t)=>Object.prototype.hasOwnProperty.call(e,t),a.r=e=>{"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(e,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(e,"__esModule",{value:!0})},(()=>{var e={472:0};a.O.j=t=>0===e[t];var t=(t,n)=>{var r,i,[o,s,l]=n,c=0;if(o.some((t=>0!==e[t]))){for(r in s)a.o(s,r)&&(a.m[r]=s[r]);if(l)var u=l(a)}for(t&&t(n);c<o.length;c++)i=o[c],a.o(e,i)&&e[i]&&e[i][0](),e[i]=0;return a.O(u)},n=self.webpackChunkrdeck=self.webpackChunkrdeck||[];n.forEach(t.bind(null,0)),n.push=t.bind(null,n.push.bind(n))})();var o=a.O(void 0,[486,474,619,315,568,175,627,977,811,42,899,667,324,134,133,468,745,535,528,783,784,485,378,645,394,816,650,869,706,836,458,769,67,806,551,282,953,538,49,844,639,825,596],(()=>a(8975)));return o=a.O(o)})()));
//# sourceMappingURL=data:application/json;charset=utf-8;base64,