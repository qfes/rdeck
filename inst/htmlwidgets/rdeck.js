!function(e,t){"object"==typeof exports&&"object"==typeof module?module.exports=t():"function"==typeof define&&define.amd?define([],t):"object"==typeof exports?exports.rdeck=t():e.rdeck=t()}(self,(()=>(()=>{var e,t,n,r={8322:(e,t,n)=>{"use strict";n.r(t),n.d(t,{VERSION:()=>tr,Widget:()=>Kn,binding:()=>Xn,getWidgetById:()=>Yn,getWidgets:()=>Qn});var r={};n.r(r),n.d(r,{AGGREGATION_OPERATION:()=>Le.KM,ArcLayer:()=>xe.ArcLayer,BitmapLayer:()=>xe.BitmapLayer,CPUGridLayer:()=>Le.ab,ColumnLayer:()=>xe.ColumnLayer,ContourLayer:()=>Le.YY,GPUGridLayer:()=>Le.ML,GeoJsonLayer:()=>xe.GeoJsonLayer,GeohashLayer:()=>ke.GeohashLayer,GreatCircleLayer:()=>ke.GreatCircleLayer,GridCellLayer:()=>xe.GridCellLayer,GridLayer:()=>Le.mU,H3ClusterLayer:()=>ke.H3ClusterLayer,H3HexagonLayer:()=>ke.H3HexagonLayer,HeatmapLayer:()=>Le.zP,HexagonLayer:()=>Le.dX,IconLayer:()=>xe.IconLayer,LineLayer:()=>xe.LineLayer,MVTLayer:()=>ke.MVTLayer,PathLayer:()=>xe.PathLayer,PointCloudLayer:()=>xe.PointCloudLayer,PolygonLayer:()=>xe.PolygonLayer,QuadkeyLayer:()=>ke.QuadkeyLayer,S2Layer:()=>ke.S2Layer,ScatterplotLayer:()=>xe.ScatterplotLayer,ScenegraphLayer:()=>Oe.ScenegraphLayer,ScreenGridLayer:()=>Le.p3,SimpleMeshLayer:()=>Oe.SimpleMeshLayer,SolidPolygonLayer:()=>xe.SolidPolygonLayer,TerrainLayer:()=>ke.TerrainLayer,TextLayer:()=>xe.TextLayer,Tile3DLayer:()=>ke.Tile3DLayer,TileLayer:()=>ke.TileLayer,TripsLayer:()=>ke.TripsLayer,_AggregationLayer:()=>Le.Di,_BinSorter:()=>Le.l0,_CPUAggregator:()=>Le.oA,_GPUGridAggregator:()=>Le.Wc,_GeoCellLayer:()=>ke._GeoCellLayer,_MultiIconLayer:()=>xe._MultiIconLayer,_TextBackgroundLayer:()=>xe._TextBackgroundLayer,_Tile2DHeader:()=>ke._Tile2DHeader,_Tileset2D:()=>ke._Tileset2D,_getURLFromTemplate:()=>ke._getURLFromTemplate});var i=n(5893),a=n(745),s=n(7294),o=(n(6158),n(2687),n(4009)),l=n(6024),c=n(3295),u=n(17),d=n(8289),h=n(7013);function f(e,...t){if(null==e)return null;const n=t.map((t=>[t,e[t]]));return Object.fromEntries(n)}function p(e){return e.clientHeight>0&&e.clientHeight>0?e:e.parentElement?p(e.parentElement):null}function g(e){const t=p(e);if(e===t||null==t)return{width:e.clientWidth,height:e.clientHeight};const{width:n,height:r}=getComputedStyle(e),i=document.createElement("div");Object.assign(i.style,{width:n,height:r,display:"hidden"}),t.appendChild(i);const a={width:i.clientWidth,height:i.clientHeight};return t.removeChild(i),a}function m(e,t){const n=new Map;for(const r of e){const e=t(r);n.has(e)?n.get(e).push(r):n.set(e,[r])}return n}function y(...e){return e.filter((e=>null!=e)).join(" ")}class b{constructor(){Object.defineProperty(this,"_val",{enumerable:!0,configurable:!0,writable:!0,value:new Map}),Object.defineProperty(this,"_ref",{enumerable:!0,configurable:!0,writable:!0,value:new WeakMap})}getStore(e){return"object"==typeof(t=e)&&null!==t||"function"==typeof t?this._ref:this._val;var t}has(e){return this.getStore(e).has(e)}get(e){return this.getStore(e).get(e)}set(e,t){return this.getStore(e).set(e,t),this}}function w(e){const t=new b;return(...n)=>{const r=n[0],i=n.slice(0,-1).reduceRight(((e,t)=>{if(e.has(t))return e.get(t);const n=new b;return e.set(t,n),n}),t);if(i.has(r))return i.get(r);const a=e(...n);return i.set(r,a),a}}class v extends d.Z{setProps(e){const t=e.initialBounds;if(null!=t&&(n=t,r=this.props.initialBounds,!(n===r||null==n&&null==r||null!=n&&null!=r&&n?.every(((e,t)=>e===r?.[t]))))){const[n,r,i,a]=t,s=[[Math.max(n,-180),Math.max(r,-85.051129)],[Math.min(i,180),Math.min(a,85.051129)]];this._setCanvasSize(e);const{width:o,height:l}=this._getMapSize();e={...e,initialViewState:{...(0,h.Xg)({height:l,width:o,bounds:s}),bearing:0,pitch:0}}}var n,r;super.setProps(e)}_getMapSize(){const e=this.canvas;if(null==e)return{width:this.width,height:this.height};if(0===e.clientWidth&&0===e.clientHeight){const t=e.closest(".rdeck.html-widget");if(null!=t)return g(t)}return{width:e.clientWidth,height:e.clientHeight}}}function j(e){return null!==e&&"object"==typeof e&&"frame"in e}function x(e,{name:t,type:n}){const r=e.frame,i=Object.fromEntries(Object.entries(r).map((([e])=>[e,[]]))),a=Object.keys(e.frame).filter((e=>e!==t)),s=r[t],o=function(e){switch(e){case"MULTIPOINT":return L;case"MULTILINESTRING":return k;case"MULTIPOLYGON":return O;default:throw TypeError(`${e} not supported`)}}(n),l=e=>{for(const t of a)i[t].push(r[t][e])},c=[];for(let n=0;n<e.length;n++){const r=s[n];if(o(r)){i[t].push(...r);for(let t=0;t<r.length;t++)l(n),c.push(e.indices?.[n]??n)}else i[t].push(r),l(n),c.push(e.indices?.[n]??n)}return{length:i[t].length,geometry:{...e.geometry,[t]:n.replace("MULTI","")},indices:c,frame:i}}function L(e){return Array.isArray(e?.[0])}function k(e){return Array.isArray(e?.[0]?.[0])}function O(e){return Array.isArray(e?.[0]?.[0]?.[0])}Object.defineProperty(v,"defaultProps",{enumerable:!0,configurable:!0,writable:!0,value:{...d.Z.defaultProps,initialBounds:null}});const S=".feature_id";function P(e,t=null){if(!e.picked)return null;null==t&&(t=function({object:e,layer:t}){const n=t.props.data;return!j(n)||t instanceof c.Z?function(e){return"Feature"===e?.type&&"geometry"in e&&"type"in e.geometry}(e)?"geojson":"object":"table"}(e));const n=function(e){switch(e){case"table":return(e,{index:t,data:n})=>{const r=Object.keys(n.geometry),i={};for(const[e,a]of Object.entries(n.frame))r.includes(e)||(i[e]=a[t]);return i};case"object":return e=>({...e});case"geojson":return e=>({[S]:e?.id,...e?.properties});default:throw TypeError(`${e} not supported`)}}(t),{object:r,index:i}=e;return n(r,{index:i,data:e.layer.props.data})}const C="cyWLt4_G7nk5vT9hPr0o",M="Z9hHHet2RXmL0iMel3Zt",T="jp658yEHLlesSRvwBwDl",N="t9I8kJyjeEJEOArvMD7j",E="vovHpTur01BROrMLmEFz";function _({info:e}){if(!e.picked||null==e.layer.props.tooltip)return null;const{x:t,y:n}=e,{name:r,tooltip:a}=e.layer.props,s=P(e,a.dataType);delete s[S];const o=!0===a.cols?Object.keys(s):a.cols;return(0,i.jsxs)("div",{className:C,style:{transform:`translate(${t}px, ${n}px)`},children:[(0,i.jsx)("div",{className:M,children:r}),(0,i.jsx)("table",{className:T,children:(0,i.jsx)("tbody",{children:o.map((e=>(0,i.jsxs)("tr",{children:[(0,i.jsx)("td",{className:N,children:e}),(0,i.jsx)("td",{className:E,children:String(s[e]??null)})]},e)))})})]})}var A=n(9757);const R=Object.freeze({additive:{[A.default.BLEND]:!0,blendFunc:[A.default.SRC_ALPHA,A.default.DST_ALPHA],blendEquation:A.default.FUNC_ADD},subtractive:{[A.default.BLEND]:!0,blendFunc:[A.default.ONE,A.default.ONE_MINUS_DST_COLOR,A.default.SRC_ALPHA,A.default.DST_ALPHA],blendEquation:[A.default.FUNC_SUBTRACT,A.default.FUNC_ADD]},normal:{[A.default.BLEND]:!0,blendFunc:[A.default.SRC_ALPHA,A.default.ONE_MINUS_SRC_ALPHA,A.default.ONE,A.default.ONE_MINUS_SRC_ALPHA],blendEquation:[A.default.FUNC_ADD,A.default.FUNC_ADD]}});function D(e="normal"){return R[e]??R.normal}var Z=n(4329),F=n(7359),I=n(9900);function H(e,t){const n=document.createElement("a"),r=URL.createObjectURL(e);n.href=r,n.download=t,n.click(),URL.revokeObjectURL(r)}function U(e){switch(e.type){case"Point":return 1;case"MultiPoint":case"LineString":return e.coordinates.length;case"MultiLineString":case"Polygon":return W(e.coordinates);case"MultiPolygon":return e.coordinates.reduce(((e,t)=>e+W(t)),0);case"GeometryCollection":return e.geometries.reduce(((e,t)=>e+U(t)),0);default:throw new TypeError(`Geomtry type ${e.type} not supported.`)}}function W(e){return e.reduce(((e,t)=>e+t.length),0)}function G(e,t){const n=z(e);for(const[r,i]of n)i.configurable&&(i.writable?V(e,r,i,t):"function"==typeof i.set&&B(e,r,i,t));if(Object.getPrototypeOf({})===Object.getPrototypeOf(e))return e;const r=z(Object.getPrototypeOf(e));for(const[n,i]of r)i.configurable&&"function"==typeof i.set&&B(e,n,i,t);return e}function z(e){return Object.entries(Object.getOwnPropertyDescriptors(e))}function V(e,t,{value:n},r){return Reflect.defineProperty(e,t,{get:()=>n,set(e){Object.is(e,n)||(n=e,r?.({[t]:e}))}})}function B(e,t,n,r){return Reflect.defineProperty(e,t,{...n,set(i){const a=n.get?.call(e);Object.is(i,a)||(n.set?.call(e,i),r?.({[t]:i}))}})}const $=/(mac ?os)|(macintosh)/i.test(navigator.userAgentData?.platform??navigator.userAgent);function J(e){const t=e.cloneNode(!0);q(e,t);const{width:n,height:r}=t.style;return Object.assign(t.style,{position:"relative",inset:"0",minWidth:n,minHeight:r}),t}function q(e,t){const n=globalThis.getComputedStyle(e);for(const e of n)t.style.setProperty(e,n.getPropertyValue(e),n.getPropertyPriority(e));const r=[...e.children],i=[...t.children];return r.forEach(((e,t)=>q(r[t],i[t]))),t}async function K(e,t){const n=document.createElement("canvas"),r=n.getContext("2d");return n.width=e.width,n.height=e.height,null!=t&&await async function(e,t){return new Promise(((n,r)=>{t.once("render",(({target:t})=>{const r=t.getCanvas();n(e.drawImage(r,0,0))})),t.triggerRepaint()}))}(r,t),await async function(e,t){return new Promise(((n,r)=>{const{onAfterRender:i}=t.props;t.setProps({onAfterRender:({gl:r})=>{t.setProps({onAfterRender:i}),n(e.drawImage(r.canvas,0,0))}}),t.redraw(!0)}))}(r,e),n}async function X(e){const t=J(e),{clientWidth:n,clientHeight:r}=e,i=function({width:e,height:t},...n){const r="http://www.w3.org/2000/svg",i=document.createElementNS(r,"svg");i.setAttribute("width",`${e}`),i.setAttribute("height",`${t}`),i.setAttribute("viewBox",`0 0 ${e} ${t}`);const a=document.createElementNS(r,"foreignObject");return a.setAttribute("width","100%"),a.setAttribute("height","100%"),i.appendChild(a),n.forEach((e=>a.appendChild(e))),i}({width:n,height:r},t),a=(new XMLSerializer).serializeToString(i);return function(e){return new Promise(((t,n)=>{const r=document.createElement("img");r.addEventListener("load",(()=>t(r)),{once:!0}),r.crossOrigin="anonymous",r.src=e}))}("data:image/svg+xml;charset=utf-8,"+encodeURIComponent(a))}const Y=[3,169,244],Q=[116,117,129],ee=[...Y,216.75],te=[...Q,216.75],ne=[...Y,38.25],re=[...Q,38.25],ie=[0,0,0,0];function ae(e){if(null==e)return null;const{geojson:t,selectedFeatureIndices:n,onSetGeoJson:r,onSelectFeatures:i}=e,a=function(e){return me[e??"view"]??me.view}(e.mode),s=!ye.includes(a);const o=new pe({data:t,selectedFeatureIndexes:n,mode:a,modeConfig:{screenSpace:!0,viewport:{}},onEdit:function({updatedData:e,editType:t,editContext:a}){if(he.includes(t))return;if("selectFeature"===t)return void i?.(a.selectedIndices??[]);const s=!!fe.includes(t)||a?.selectedIndices?.map(ce);o.props.data={...e,__diff:s},o.setChangeFlags({dataChanged:s}),o.setNeedsUpdate(),de.has(t)&&(r?.(e),"addFeature"===t&&i?.([...n,...a.featureIndexes]))},pickable:a!==me.view,pickingLineWidthExtraPixels:5,pickingDepth:0,getRadius:6,getLineWidth:1.5,getTentativeLineWidth:1.5,lineWidthScale:1,getFillColor:a===me.view?ie:se,getLineColor:oe,getTentativeLineColor:ee,getEditHandlePointOutlineColor:ee,getTentativeFillColor:ne,getEditHandlePointColor:ie,getDashArray:s?[4,2]:[0,0],extensions:[new Z.Z({dash:!0})],_subLayerProps:{geojson:{dataComparator:le},guides:{dataComparator:le,_dataDiff:ue}}});return o}function se(e,t,n){return t?ne:re}function oe(e,t,n){return t?ee:te}function le(e,t){return Object.is(e.features,t.features)}function ce(e){return{startRow:e,endRow:e+1}}function ue(e,t){if(e.__diff)return e.__diff;const n=e.features,r=t.features;if(n.length!==r.length)return"A new data container was supplied";const i=[],a=n.length;for(let e=0;e<a;++e){const t=n[e],s=r[e];if(t!==s){if(U(t.geometry)!==U(s.geometry)){i.push({startRow:e,endRow:a});break}i.push({startRow:e,endRow:e+1})}}return i}const de=Object.freeze(new Set(["addPosition","removePosition","addFeature","finishMovePosition","scaled","rotated","translated","extruded","split"])),he=Object.freeze(["updateTentativeFeature","addTentativePosition"]),fe=Object.freeze(["addPosition","removePosition","addFeature"]);class pe extends I.nk{onPointerMove(e){this.state.lastPointerMoveEvent=e;this.getActiveMode().handlePointerMove(e,this.getModeProps(this.props))}updateState(e){e.changeFlags.propsOrDataChanged&&super.updateState(e)}setState(e){if(this.props.mode===me.modify)return super.setState(e);for(const t in e)if("cursor"!==t||e.cursor!==this.state.cursor)return super.setState(e)}}class ge extends F.ViewMode{handlePointerMove(e,t){const n=0!==e?.picks?.length;t.onUpdateCursor(n?"pointer":null)}handleClick(e,t){if(!(0!==e?.picks.length))return;const n=new Set(t.selectedIndexes),r=new Set(e.picks.map((e=>e.index))),i=function(e,t){for(const n of t)if(!e.has(n))return!1;return!0}(n,r)?function(...e){const t=new Set(e[0]);for(const n of e.slice(1))for(const e of n)t.delete(e);return t}(n,r):function(...e){return new Set(e.flatMap((e=>[...e])))}(n,r);t.onEdit?.({updatedData:t.data,editType:"selectFeature",editContext:{selectedIndices:[...i]}})}}F.utils.getEditHandlesForGeometry=w(F.utils.getEditHandlesForGeometry);const me=Object.seal({view:F.ViewMode,select:ge,modify:F.ModifyMode,transform:F.TransformMode,linestring:F.DrawLineStringMode,point:F.DrawPointMode,polygon:F.DrawPolygonMode,lasso:F.DrawPolygonByDraggingMode}),ye=[me.view,me.select];const be=(0,s.forwardRef)((({deckgl:e,mapgl:t,layers:n,editor:r},a)=>{const c=(0,s.useRef)(null),d=(0,s.useRef)(null);(0,s.useImperativeHandle)(a,(()=>({async getImage(){const e=c.current?.deck;if(null==e)return null;const t=d.current?.getMap();return K(e,t??null)}})),[]);const[h,f]=we();let{blendingMode:p,controller:g,onClick:m,...y}=e;const b={...e.parameters,...p&&D(p)},[w,j]=(0,s.useState)(0),x=n.some((e=>"TripsLayer"===e.type));ve(x,(e=>j(e)));const L=n.map((e=>null!=e.type?e.renderLayer(w):null)),k=ae(r),O=null!=r&&!["view","select"].includes(r.mode);return O&&g&&(g={...g,doubleClickZoom:!1}),(0,i.jsxs)(s.Fragment,{children:[(0,i.jsx)(l.Z,{Deck:v,ref:c,...{...y,parameters:b},layers:[...L,k],onHover:O?void 0:f,onClick:O?void 0:m,getCursor:k?.getCursor.bind(k),children:(0,i.jsx)(o.Z,{id:"map",controller:g,repeat:!0,children:t.mapStyle&&(0,i.jsx)(u.D5,{ref:d,...t})})}),h&&(0,i.jsx)(_,{info:h})]})}));be.displayName="Map";const we=()=>{const[e,t]=(0,s.useState)(null);return[e,(0,s.useCallback)((e=>{if(!e.picked||!e.layer.props.tooltip||e.layer instanceof c.Z)return t(null);t(e)}),[])]},ve=(e,t)=>{const n=(0,s.useRef)(0),r=(0,s.useRef)(Date.now()),i=()=>{t(Date.now()-r.current),n.current=window.requestAnimationFrame(i)};(0,s.useEffect)((()=>{if(e)return n.current=window.requestAnimationFrame(i),()=>window.cancelAnimationFrame(n.current)}),[e])};var je=n(5395),xe=n(7786),Le=n(9080),ke=n(1362),Oe=n(1956);const Se=[0,0,0,255];function Pe([e,t,n,r=255]){return`rgba(${e}, ${t}, ${n}, ${r/255})`}function Ce(e,t){return Array.isArray(e)?t||4!==e.length?((t=t??[])[0]=e[0],t[1]=e[1],t[2]=e[2],t[3]=3===e.length?e[3]:255,t):e:"string"==typeof e?(function(e,t){if(7===e.length){const n=parseInt(e.substring(1),16);t[0]=Math.floor(n/65536),t[1]=Math.floor(n/256%256),t[2]=n%256,t[3]=255}else if(9===e.length){const n=parseInt(e.substring(1),16);t[0]=Math.floor(n/16777216),t[1]=Math.floor(n/65536%256),t[2]=Math.floor(n/256%256),t[3]=n%256}}(e,t=t??[]),t):Se}var Me=n(4634),Te=n(4177),Ne=n(458),Ee=n(5801),_e=n(3613),Ae=n(602),Re=n(8973),De=n(2625);function Ze(e){return null!==e&&"object"==typeof e&&"accessor"===e.type}function Fe(e){return Ze(e)&&"scale"in e}var Ie=n(3693),He=n(4717),Ue=n(6867),We=n(3326),Ge=n(2112),ze=n(7693),Ve=n(8569),Be=n(1435);class $e extends Ie.Z{initializeState(){if(!function(e){return Je.some((t=>e instanceof t))}(this))return;const e=this,t=e.getAttributeManager();t&&t.addInstanced({pickingColors:{type:A.default.UNSIGNED_BYTE,size:3,accessor:(t,{index:n,data:r,target:i})=>{if(j(r)&&Array.isArray(r.indices))return e.encodePickingColor(r.indices.indexOf(r.indices[n]),i);const a=t?.__source?.parent?.props.data;return j(a)&&Array.isArray(a.indices)?e.encodePickingColor(a.indices.indexOf(a.indices[t.__source.index]),i):e.encodePickingColor(t?.__source.index??n,i)},shaderAttributes:{pickingColors:{divisor:0},instancePickingColors:{divisor:1}}}})}}const Je=[He.Z,Ue.Z,We.Z,Ge.Z,ze.Z,Ve.Z,Be.Z];const qe=w((function(e){const t=function(e){return Object.entries(e.geometry).filter((([,e])=>/MULTI/.test(e))).map((([e,t])=>({name:e,type:t})))}(e);return 0===t.length?e:t.reduce(x,e)})),Ke=w(Ce),Xe=w((function(e,t){const n=function({col:e,dataType:t},n){if("highlightColor"===n)switch(t){case"table":return function(e){return({index:t,layer:n})=>Ce(n.props.data.frame[e][t])}(e);case"object":return function(e){return({object:t})=>Ce(t[e])}(e);case"geojson":return function(e){return({object:t})=>Ce(t.properties[e])}(e);default:throw TypeError(`${t} not supported`)}if(n.endsWith("Color"))switch(t){case"table":return function(e){return(t,{index:n,data:r,target:i})=>Ce(r.frame[e][n],i)}(e);case"object":return function(e){return(t,{target:n})=>Ce(t[e],n)}(e);case"geojson":return function(e){return(t,{target:n})=>Ce(t.properties[e],n)}(e);default:throw TypeError(`${t} not supported`)}switch(t){case"table":return function(e){return(t,{index:n,data:r})=>r.frame[e][n]}(e);case"object":return function(e){return t=>t[e]}(e);case"geojson":return function(e){return t=>t.properties[e]}(e);default:throw TypeError(`${t} not supported`)}}(e,t);return{...e,getData:n}})),Ye=w((function(e,t){"palette"in e&&(e.range=e.palette.map((e=>Ce(e))),e.unknown=Ce(e.unknown));const n=function(e){switch(e.scale){case"linear":return(0,Me.Z)().domain(e.domain).range(e.range).unknown(e.unknown).clamp(!0);case"power":return(0,Te.ZP)().exponent(e.exponent).domain(e.domain).range(e.range).unknown(e.unknown).clamp(!0);case"log":return(0,Ne.Z)().base(e.base).domain(e.domain).range(e.range).unknown(e.unknown).clamp(!0);case"symlog":return(0,Ee.Z)().domain(e.domain).range(e.range).unknown(e.unknown).clamp(!0);case"identity":return(0,_e.Z)().unknown(e.unknown);case"threshold":case"quantile":return(0,Ae.Z)().domain(e.domain).range(e.range).unknown(e.unknown);case"category":return(0,Re.Z)().domain(e.domain).range(e.range).unknown(e.unknown);case"quantize":return(0,De.Z)().domain(e.domain).range(e.range).unknown(e.unknown);default:throw TypeError(`scale ${e.scale} not supported`)}}(e),r="highlightColor"===t?function({col:e,dataType:t},n){switch(t){case"table":return function(e,t){return({index:n,layer:r})=>t(r.props.data.frame[e][n])}(e,n);case"object":return function(e,t){return({object:n})=>t(n[e])}(e,n);case"geojson":return function(e,t){return({object:n})=>t(n.properties[e])}(e,n);default:throw TypeError(`${t} not supported`)}}(e,n):function({col:e,dataType:t},n){switch(t){case"table":return function(e,t){return(n,{index:r,data:i})=>t(i.frame[e][r])}(e,n);case"object":return function(e,t){return n=>t(n[e])}(e,n);case"geojson":return function(e,t){return n=>t(n.properties[e])}(e,n);default:throw TypeError(`${t} not supported`)}}(e,n);return{...e,name:t,getData:r,scaleData:n}}));class Qe{get isVisible(){return(this.props.visible??!1)||!("visible"in this.props)}constructor({type:e,...t}){Object.defineProperty(this,"type",{enumerable:!0,configurable:!0,writable:!0,value:void 0}),Object.defineProperty(this,"props",{enumerable:!0,configurable:!0,writable:!0,value:void 0}),Object.defineProperty(this,"scales",{enumerable:!0,configurable:!0,writable:!0,value:void 0});const n=Object.entries(t),r=function(e){const t=e.filter(et).map((([e,t])=>[e,Ke(t)])),n=e.find((([e])=>"colorRange"===e));n&&t.push([n[0],n[1].map((e=>Ke(e)))]);return t}(n),i=function(e){return e.filter((([,e])=>Ze(e))).map((([e,t])=>[e,Fe(t)?Ye(t,e):Xe(t,e)]))}(n);this.type=e;const a=Object.fromEntries([...n,...r,...i.map((([e,t])=>[e,t.getData])),...nt(n),["updateTriggers",tt(i)],["parameters",(s=t.parameters,o=t.blendingMode,{...s,...D(o)})]]);var s,o;j(a.data)&&(a.data=qe(a.data),a.extensions=[new $e,...a.extensions??[]]),"TileLayer"===e&&(a.renderSubLayers=e=>{const{bbox:{west:t,south:n,east:r,north:i},x:a,y:s,z:o}=e.tile;return new je.Z({...e,data:[{z:o,x:a,y:s}],image:e.data,bounds:[t,n,r,i]})}),this.props=a,this.scales=i.filter((([,e])=>Fe(e))).map((([,e])=>e)),"TextLayer"===e&&"fonts"in document&&document.fonts.load(`16px ${t.fontFamily}`)}static create(e){return new Qe(e)}renderLayer(e){if("TripsLayer"===this.type&&void 0!==e){const t=this.props,{loopLength:n,animationSpeed:r}=t,i=n/r,a=e/1e3%i/i;t.currentTime=a*n}return new r[this.type]({...this.props})}renderLegend(){const e=this.scales.filter((e=>e.legend));return{id:this.props.id,name:this.props.name,scales:e}}renderSelector(){return{id:this.props.id,groupName:this.props.groupName,name:this.props.name,visible:this.isVisible}}}function et([e,t]){return e.endsWith("Color")&&(Array.isArray(t)||"string"==typeof t)}function tt(e){const t=e=>{const{getData:t,scaleData:n,palette:r,...i}=e;return i},n=e.map((([e,n])=>[e,t(n)]));return Object.fromEntries(n)}function nt(e){return e.filter((([e])=>"getColorWeight"===e||"getElevationWeight"===e)).filter((([,e])=>null!==e&&"function"!=typeof e&&!Ze(e))).map((([e,t])=>[e,()=>t]))}var rt=n(6082),it=n(912),at=n(2372),st=n(8426);const ot="U44LhpKlV8r1Vu1ZoZA3",lt="XF770nELUcE_0zxo_aOg",ct="HYRhC2aw1PSMYGCz2bDb",ut="YNou4FYlc3N3GhFp2BkO",dt="f44NGqZZGn4de9S3oTHN",ht="xqKP289MUJ06Hgb3CjoW",ft="XctZC_fZAMvRMiHPlt9G",pt="ly9kEH8MpXynhBX6Fhcj",gt="iM2OiMQz6z_NtAQZZyPS",mt="_8r8348KPS_nzNLR_CV_",yt="tzkFrkEU5cB_jY6zcuua",bt=Date.now();function wt({className:e,tooltip:t,onClick:n,children:r}){return(0,i.jsx)("button",{className:e,type:"button",onClick:n,title:t,children:r})}function vt({layers:e,onVisibilityChange:t}){const n=m(e,(e=>e.groupName??`${e.name}-${bt}`)),r=(n,r,i)=>{if(i){const i=!e.filter((e=>!n.includes(e))).some((e=>e.visible));return t(e.map((e=>({...e,visible:n.includes(e)?r:i}))))}t(n.map((e=>({...e,visible:r}))))},[a,o]=(0,s.useState)(!1),l=()=>o((e=>!e));return a?(0,i.jsxs)("div",{className:lt,children:[(0,i.jsx)("div",{className:ct,children:(0,i.jsxs)(wt,{className:ut,onClick:l,tooltip:"Close",children:[(0,i.jsx)(rt.Z,{className:yt,fontSize:"small"}),(0,i.jsx)("span",{className:dt,children:"Layers"})]})}),(0,i.jsx)("div",{className:ht,children:Array.from(n.entries(),(([e,t,[{groupName:n}]=t])=>(0,i.jsx)(jt,{group:n,layers:t,onChange:r},e)))})]}):(0,i.jsx)(wt,{className:ot,tooltip:"Layer selector",onClick:l,children:(0,i.jsx)(rt.Z,{className:yt,fontSize:"small"})})}function jt({group:e,layers:t,onChange:n}){const r=Array.from(m(t,(e=>e.name)),(([e,t])=>(0,i.jsx)(xt,{name:e,layers:t,onChange:n},e)));return e?(0,i.jsxs)(s.Fragment,{children:[(0,i.jsx)(xt,{name:e,layers:t,onChange:n}),(0,i.jsx)("div",{className:ft,children:r})]}):(0,i.jsx)(s.Fragment,{children:r})}function xt({name:e,layers:t,onChange:n}){const r=function(e){let t=e[0].visible;for(const n of e)if(n.visible!==t)return null;return t}(t),a=null===r,o=(0,s.useRef)(null);(0,s.useEffect)((()=>{o.current&&(o.current.indeterminate=a)}),[a]);const l=(0,s.useRef)((()=>!1)),c=r?it.Z:a?at.Z:st.Z,u=y(pt,r||a?gt:null);return(0,i.jsxs)("label",{className:u,children:[(0,i.jsx)("input",{ref:o,className:mt,type:"checkbox",onChange:()=>{l.current()?n(t,!0,!0):l.current=Lt((()=>n(t,!r,!1)),200)},checked:r??!0}),(0,i.jsx)(c,{fontSize:"small",className:yt}),(0,i.jsx)("span",{className:dt,children:e})]})}const Lt=(e,t=200)=>{const n={current:0};let r=0;const i=a=>{if(r||(r=a),a-r>t)return n.current=0,void e();n.current=globalThis.requestAnimationFrame(i)};return n.current=globalThis.requestAnimationFrame(i),()=>0!==n.current&&(globalThis.cancelAnimationFrame(n.current),n.current=0,!0)},kt="lWOwchFb6W2NpcWR4ZQS",Ot="mIJjIoOSsjLZMp591rN0",St="OULly07OGkLPRiEDgp00",Pt="oxctK5Tcknb3syUfT7xg",Ct="KEbGPBIjLXnjAiUTu8eP",Mt="MBBFrOSR5F_grZcyOCp0",Tt="l_4PaMO7BWOn4DcLN5Oh",Nt="aWzYqDozdq6Vl4QuIJ1y",Et="xaprV4ANDgRiE5ai1hUl",_t="f6SnauerJY75ZqNAuK56",At=16,Rt=(0,s.forwardRef)((({layers:e},t)=>{const n=(0,s.useRef)(null);return(0,s.useImperativeHandle)(t,(()=>({getImage:async()=>null==n.current?null:X(n.current)})),[]),0===e.length?null:(0,i.jsx)("div",{ref:n,className:kt,children:e.map((e=>(0,i.jsx)(Dt,{...e},e.id)))})}));function Dt({name:e,scales:t}){return 0===t.length?null:(0,i.jsxs)("div",{className:Ot,children:[(0,i.jsx)("div",{className:St,title:e,children:e}),t.map((e=>(0,i.jsx)(Zt,{...e},e.name)))]})}function Zt(e){const t=e.name.replace(/^get/,"").replace(/([A-Z])/g," $1").toLowerCase();const n="palette"in e;const r=function(e){return"linear"===e.scale||"power"===e.scale||"log"===e.scale||"symlog"===e.scale}(e),a=function(e){return"threshold"===e.scale||"quantile"===e.scale||"quantize"===e.scale}(e);return(0,i.jsxs)("div",{className:Pt,children:[(0,i.jsx)("div",{className:Ct,children:t}),(0,i.jsx)("span",{className:Mt,children:"by "}),(0,i.jsx)("span",{className:Tt,title:e.col,children:e.scaleBy??e.col}),n&&r&&(0,i.jsx)(Ft,{...e}),n&&a&&(0,i.jsx)(It,{...e}),n&&"category"===e.scale&&(0,i.jsx)(Ht,{...e})]})}Rt.displayName="Legend";const Ft=({ticks:e,scaleData:t})=>{const n=e.map(((e,t)=>t)).slice(1,-1),r=At*(e.length-1),a=r+11+1;return(0,i.jsxs)("svg",{className:Nt,height:a,shapeRendering:"crispEdges",children:[(0,i.jsxs)("svg",{y:5,children:[(0,i.jsx)("image",{width:20,height:r,href:Wt(t),preserveAspectRatio:"none"}),n.map((e=>(0,i.jsx)("line",{className:_t,x2:20,y1:At*e,y2:At*e},e)))]}),(0,i.jsx)(Ut,{ticks:e,y:-2})]})},It=({ticks:e,range:t})=>{const n=t.map(Pe),r=At*(e.length-1)+11+1;return(0,i.jsxs)("svg",{className:Nt,height:r,shapeRendering:"crispEdges",children:[(0,i.jsx)("svg",{y:5,children:n.map(((e,t)=>(0,i.jsx)("rect",{width:20,height:At,y:t*At,fill:e},t)))}),(0,i.jsx)(Ut,{ticks:e,y:-2})]})};function Ht({ticks:e,range:t,unknownTick:n,unknown:r}){const a=n?[...t,r]:t,s=n?[...e,n]:e,o=a.map(Pe),l=At*s.length;return(0,i.jsxs)("svg",{className:Nt,height:l,children:[(0,i.jsx)("svg",{children:o.map(((e,t)=>(0,i.jsx)("rect",{width:20,height:14,y:1+t*At,fill:e},t)))}),(0,i.jsx)(Ut,{ticks:s})]})}function Ut({ticks:e,x:t=28,y:n=0}){return(0,i.jsx)("svg",{x:t,y:n,children:e.map(((e,t)=>(0,i.jsx)("text",{className:Et,y:At*t,dy:11,children:String(e)},t)))})}function Wt(e,t=200){const n=e.range().length,r=[...Array(n).keys()].map((e=>e/(n-1))),i=e.copy().range(r).invert,a=document.createElement("canvas"),s=a.getContext("2d");a.width=1,a.height=t;for(let n=0;n<t;n++)s.fillStyle=Pe(e(i(n/t))),s.fillRect(0,n,1,1);return a.toDataURL()}var Gt=n(7046),zt=n(6533),Vt=n(9292),Bt=n(9744),$t=n(9758),Jt=n(7089),qt=n(4392),Kt=n(904),Xt=n(5482),Yt=n(7226),Qt=n(5579),en=n(9702),tn=n(2149),nn=n(6761);const rn="S_Jw5xlS4ysjLfEnG1_V",an="ulA2RQmkQhSnak9JlXnZ",sn="aIE33mXFqOBosVEFBrb8",on="llmi5hyDHtcHqa2r__su",ln="ilhkc5o5ZlSd4IaGytLF",cn=()=>{};function un({mode:e,geojson:t,selectedFeatureIndices:n,onSetMode:r=cn,onDownload:a=cn,onUpload:s=cn,onDeleteSelected:o=cn,canUndo:l,canRedo:c,onUndo:u=cn,onRedo:d=cn}){const h=n?.length>0,f=t?.features.length>0;return(0,i.jsxs)("div",{className:rn,children:[(0,i.jsxs)("div",{className:an,children:[(0,i.jsx)(dn,{name:"View",icon:Kt.Z,iconStyle:{transform:"scale(0.9)"},active:"view"===e,onClick:()=>r("view")}),(0,i.jsx)(dn,{name:"Select",icon:Xt.Z,active:"select"===e,disabled:!f,onClick:()=>r("select")})]}),(0,i.jsxs)("div",{className:an,children:[(0,i.jsx)(dn,{name:"Modify",icon:Vt.Z,active:"modify"===e,disabled:!h,onClick:()=>r("modify")}),(0,i.jsx)(dn,{name:"Transform",icon:Yt.Z,active:"transform"===e,disabled:!h,onClick:()=>r("transform")}),(0,i.jsx)(dn,{name:"Point",icon:Qt.Z,active:"point"===e,onClick:()=>r("point")}),(0,i.jsx)(dn,{name:"LineString",icon:Bt.Z,active:"linestring"===e,onClick:()=>r("linestring")}),(0,i.jsx)(dn,{name:"Polygon",icon:zt.Z,active:"polygon"===e,onClick:()=>r("polygon")}),(0,i.jsx)(dn,{name:"Lasso",icon:Gt.Z,active:"lasso"===e,onClick:()=>r("lasso")})]}),(0,i.jsxs)("div",{className:an,children:[(0,i.jsx)(dn,{name:"Download",icon:en.Z,disabled:!f,onClick:()=>a(t)}),(0,i.jsx)(dn,{name:"Upload",icon:tn.Z,disabled:!f,onClick:()=>s(t)})]}),(0,i.jsxs)("div",{className:an,children:[(0,i.jsx)(dn,{name:"Undo",icon:$t.Z,disabled:!l,onClick:u}),(0,i.jsx)(dn,{name:"Redo",icon:Jt.Z,disabled:!c,onClick:d})]}),(0,i.jsx)("div",{className:an,children:(0,i.jsx)(dn,{name:"Delete",icon:nn.Z,disabled:!h,onClick:()=>o(n)})})]})}function dn({name:e,onClick:t=cn,disabled:n=!1,active:r=!1,icon:a,iconStyle:s}){const o=y(sn,r?on:null);return(0,i.jsx)("button",{className:o,onClick:t,title:e,disabled:n,children:a&&(0,i.jsx)(qt.Z,{component:a,className:ln,fontSize:"small",style:s})})}const hn="rdeck",fn="XTuYKSlBcC933W4sKWtC",pn="kQnelQ4hkAJEJHLO0NJI",gn="hQbOOdEZw0LO0llGKVqS",mn="cSol54mlVTgAnRzj_GUM",yn=(0,s.forwardRef)((({theme:e,deckgl:t,mapgl:n,layers:r,layerSelector:a=!1,onLayerVisibilityChange:o,editor:l},c)=>{const u=(0,s.useRef)(null),d=(0,s.useRef)(null);(0,s.useImperativeHandle)(c,(()=>({async getSnapshot({legend:e=!0,size:t}){const n=u.current,r=d.current,i=await(n?.getImage());if(null==i)return null;return async function(e,t,n){const r=document.createElement("canvas"),i=r.getContext("2d"),[a,s]=n??[e.width,e.height];if(Object.assign(r,{width:a,height:s}),a>e.width||s>e.height)throw new RangeError("Snapshot size must be <= map size");const o=(e.width-r.width)/2,l=(e.height-r.height)/2;return i?.drawImage(e,o,l,e.width,e.height,0,0,e.width,e.height),null!=t&&i?.drawImage(t,r.width-t.width-10,10),new Promise(((e,t)=>{r.toBlob((t=>e(t)))}))}(i,(e?await(r?.getImage()):null)??null,t)}})),[]);const h=r?.map(Qe.create)??[];return(0,i.jsxs)("div",{className:y(hn,e),children:[(0,i.jsx)("div",{className:y(fn,pn),children:a&&(0,i.jsx)(vt,{layers:h.filter((e=>e.props.visibilityToggle)).map((e=>e.renderSelector())).reverse(),onVisibilityChange:o})}),(0,i.jsx)("div",{className:y(fn,gn),children:(0,i.jsx)(Rt,{ref:d,layers:h.filter((e=>e.isVisible)).map((e=>e.renderLegend())).reverse()})}),(0,i.jsx)("div",{className:y(fn,mn),children:l&&(0,i.jsx)(un,{...l})}),(0,i.jsx)(be,{ref:u,deckgl:t,mapgl:n,layers:h,editor:l})]})}));yn.displayName="RDeck";var bn=n(6935);function wn(e){const t=e instanceof bn.Z?e:new bn.Z(e),n=f(t,"longitude","latitude","zoom","bearing","pitch","altitude");return{bounds:t.getBounds(),viewState:{...n,center:t.unprojectFlat(t.center)}}}const vn={longitude:0,latitude:0,zoom:0,pitch:0,bearing:0};class jn{constructor(e){Object.defineProperty(this,"useDevicePixels",{enumerable:!0,configurable:!0,writable:!0,value:void 0}),Object.defineProperty(this,"pickingRadius",{enumerable:!0,configurable:!0,writable:!0,value:void 0}),Object.defineProperty(this,"blendingMode",{enumerable:!0,configurable:!0,writable:!0,value:void 0}),Object.defineProperty(this,"effects",{enumerable:!0,configurable:!0,writable:!0,value:void 0}),Object.defineProperty(this,"controller",{enumerable:!0,configurable:!0,writable:!0,value:void 0}),Object.defineProperty(this,"initialViewState",{enumerable:!0,configurable:!0,writable:!0,value:vn}),Object.defineProperty(this,"initialBounds",{enumerable:!0,configurable:!0,writable:!0,value:void 0}),Object.defineProperty(this,"onViewStateChange",{enumerable:!0,configurable:!0,writable:!0,value:void 0}),Object.defineProperty(this,"onClick",{enumerable:!0,configurable:!0,writable:!0,value:void 0}),Object.assign(this,e)}}var xn,Ln,kn,On,Sn,Pn=function(e,t,n,r){if("a"===n&&!r)throw new TypeError("Private accessor was defined without a getter");if("function"==typeof t?e!==t||!r:!t.has(e))throw new TypeError("Cannot read private member from an object whose class did not declare it");return"m"===n?r:"a"===n?r.call(e):r?r.value:t.get(e)},Cn=function(e,t,n,r,i){if("m"===r)throw new TypeError("Private method is not writable");if("a"===r&&!i)throw new TypeError("Private accessor was defined without a setter");if("function"==typeof t?e!==t||!i:!t.has(e))throw new TypeError("Cannot write private member to an object whose class did not declare it");return"a"===r?i.call(e,n):i?i.value=n:t.set(e,n),n};const Mn=Object.freeze({type:"FeatureCollection",features:[]});class Tn{constructor(e){Object.defineProperty(this,"mode",{enumerable:!0,configurable:!0,writable:!0,value:"view"}),Object.defineProperty(this,"geojson",{enumerable:!0,configurable:!0,writable:!0,value:Mn}),Object.defineProperty(this,"selectedFeatureIndices",{enumerable:!0,configurable:!0,writable:!0,value:[]}),Object.defineProperty(this,"onSetMode",{enumerable:!0,configurable:!0,writable:!0,value:e=>this.setMode(e)}),Object.defineProperty(this,"onSelectFeatures",{enumerable:!0,configurable:!0,writable:!0,value:e=>this.selectFeatures(e)}),Object.defineProperty(this,"onSetGeoJson",{enumerable:!0,configurable:!0,writable:!0,value:e=>this.setGeoJson(e)}),Object.defineProperty(this,"onDeleteSelected",{enumerable:!0,configurable:!0,writable:!0,value:e=>this.deleteSelected(e)}),Object.defineProperty(this,"onUpload",{enumerable:!0,configurable:!0,writable:!0,value:e=>{}}),Object.defineProperty(this,"onDownload",{enumerable:!0,configurable:!0,writable:!0,value:e=>this.download(e)}),Object.defineProperty(this,"upload",{enumerable:!0,configurable:!0,writable:!0,value:void 0}),Object.assign(this,e)}setState(e={}){Object.assign(this,e)}setMode(e){switch(e){case"modify":this.mode=this.selectedFeatureIndices?.length?"modify":"view";break;case"select":this.mode=this.geojson?.features.length?"select":"view";break;default:this.mode=e}}selectFeatures(e){this.selectedFeatureIndices=e}setGeoJson(e){this.geojson=e}deleteSelected(e){const t=this.geojson.features.filter(((t,n)=>!e.includes(n)));Object.assign(this,{mode:["modify","transform"].includes(this.mode)?"view":this.mode,selectedFeatureIndices:[],geojson:{...this.geojson,features:t}})}download(e){H(new Blob([JSON.stringify(e)],{type:"application/geo+json"}),"rdeck.geojson"),this.setMode("view")}}class Nn extends Tn{get canUndo(){return Pn(this,Ln,"f")>0}get canRedo(){return Pn(this,Ln,"f")<Pn(this,kn,"f").length-1}constructor(e){super(e),xn.add(this),Ln.set(this,-1),kn.set(this,[]),Object.defineProperty(this,"onUndo",{enumerable:!0,configurable:!0,writable:!0,value:()=>this.undo()}),Object.defineProperty(this,"onRedo",{enumerable:!0,configurable:!0,writable:!0,value:()=>this.redo()}),Pn(this,xn,"m",On).call(this)}undo(){this.canUndo&&(Cn(this,Ln,Pn(this,Ln,"f")-1,"f"),Object.assign(this,Pn(this,kn,"f")[Pn(this,Ln,"f")]))}redo(){this.canRedo&&(Cn(this,Ln,Pn(this,Ln,"f")+1,"f"),Object.assign(this,Pn(this,kn,"f")[Pn(this,Ln,"f")]))}setState(e){super.setState(e),Pn(this,xn,"m",Sn).call(this)}setMode(e){super.setMode(e),Pn(this,xn,"m",Sn).call(this)}selectFeatures(e){super.selectFeatures(e),Pn(this,xn,"m",Sn).call(this)}setGeoJson(e){super.setGeoJson(e),Pn(this,xn,"m",On).call(this)}deleteSelected(e){super.deleteSelected(e),Pn(this,xn,"m",On).call(this)}}function En({mode:e,geojson:t,selectedFeatureIndices:n}){return{mode:e,geojson:t,selectedFeatureIndices:n}}Ln=new WeakMap,kn=new WeakMap,xn=new WeakSet,On=function(e=this){const t=En(e);(function(e,t){if(Object.is(e,t))return!0;if(null==e||null==t)return!1;const n=Object.keys(e);if(n.length!==Object.keys(t).length)return!1;for(const r of n)if(!Object.is(e[r],t[r])||t.hasOwnProperty(r))return!1;return!0})(t,Pn(this,kn,"f")[Pn(this,Ln,"f")])||(Pn(this,kn,"f").length=Pn(this,Ln,"f")+1,Cn(this,Ln,Pn(this,kn,"f").push(t)-1,"f"))},Sn=function(e=this){Pn(this,kn,"f")[Pn(this,Ln,"f")]=En(e)};class _n{constructor(e){Object.defineProperty(this,"mapboxAccessToken",{enumerable:!0,configurable:!0,writable:!0,value:void 0}),Object.defineProperty(this,"mapStyle",{enumerable:!0,configurable:!0,writable:!0,value:void 0}),Object.defineProperty(this,"reuseMaps",{enumerable:!0,configurable:!0,writable:!0,value:!0}),Object.assign(this,e)}}var An,Rn,Dn,Zn,Fn=function(e,t,n,r){if("a"===n&&!r)throw new TypeError("Private accessor was defined without a getter");if("function"==typeof t?e!==t||!r:!t.has(e))throw new TypeError("Cannot read private member from an object whose class did not declare it");return"m"===n?r:"a"===n?r.call(e):r?r.value:t.get(e)},In=function(e,t,n,r,i){if("m"===r)throw new TypeError("Private method is not writable");if("a"===r&&!i)throw new TypeError("Private accessor was defined without a setter");if("function"==typeof t?e!==t||!i:!t.has(e))throw new TypeError("Cannot write private member to an object whose class did not declare it");return"a"===r?i.call(e,n):i?i.value=n:t.set(e,n),n};class Hn{get deckgl(){return Fn(this,An,"f")}set deckgl(e){In(this,An,G(new jn(e),Fn(this,Zn,"f")),"f")}get mapgl(){return Fn(this,Rn,"f")}set mapgl(e){In(this,Rn,G(new _n(e),Fn(this,Zn,"f")),"f")}get editor(){return Fn(this,Dn,"f")}set editor(e){null==e?In(this,Dn,null,"f"):null==Fn(this,Dn,"f")?In(this,Dn,G(new Nn(e),Fn(this,Zn,"f")),"f"):Fn(this,Dn,"f").setState(e)}constructor(e={},t){Object.defineProperty(this,"theme",{enumerable:!0,configurable:!0,writable:!0,value:"kepler"}),An.set(this,new jn),Rn.set(this,new _n),Object.defineProperty(this,"layers",{enumerable:!0,configurable:!0,writable:!0,value:[]}),Object.defineProperty(this,"layerSelector",{enumerable:!0,configurable:!0,writable:!0,value:!0}),Dn.set(this,null),Object.defineProperty(this,"onChange",{enumerable:!0,configurable:!0,writable:!0,value:void 0}),Zn.set(this,(()=>this.onChange?.())),this.setState(e),Reflect.defineProperty(this,"onChange",{configurable:!1,enumerable:!1,value:t,writable:!0}),this.setLayerVisibility=this.setLayerVisibility.bind(this),G(this,Fn(this,Zn,"f"))}setState({deckgl:e,mapgl:t,editor:n,...r}={}){Object.assign(this,{...r,deckgl:{...this.deckgl,...e},mapgl:{...this.mapgl,...t}}),void 0!==n&&(this.editor=null!=n?{...this.editor,...n}:null)}upsertLayer(e){const t=this.layers.find((t=>t.id===e.id));if(null==t)return void(this.layers=[...this.layers,e]);const n={...t,...e,data:e.data??t?.data??null};this.layers=this.layers.map((e=>e===t?n:e))}setLayerVisibility(e){if(0===e.length)return;this.layers=this.layers.map((t=>{const n=e.find((e=>((e,t)=>{const n=e.name===t.name,r=e.groupName===t.groupName;return n&&r||null==e.name&&null!=e.groupName&&r})(e,t)&&e.visible!==t.visible));return n?{...t,visible:n.visible}:t}))}}An=new WeakMap,Rn=new WeakMap,Dn=new WeakMap,Zn=new WeakMap;var Un,Wn,Gn,zn,Vn,Bn,$n,Jn=function(e,t,n,r){if("a"===n&&!r)throw new TypeError("Private accessor was defined without a getter");if("function"==typeof t?e!==t||!r:!t.has(e))throw new TypeError("Cannot read private member from an object whose class did not declare it");return"m"===n?r:"a"===n?r.call(e):r?r.value:t.get(e)},qn=function(e,t,n,r,i){if("m"===r)throw new TypeError("Private method is not writable");if("a"===r&&!i)throw new TypeError("Private accessor was defined without a setter");if("function"==typeof t?e!==t||!i:!t.has(e))throw new TypeError("Cannot write private member to an object whose class did not declare it");return"a"===r?i.call(e,n):i?i.value=n:t.set(e,n),n};class Kn{get element(){return Jn(this,Wn,"f")}get state(){return Jn(this,zn,"f")}constructor(e,t){Un.set(this,void 0),Wn.set(this,void 0),Gn.set(this,(0,s.createRef)()),zn.set(this,void 0),Vn.set(this,((e,t)=>{if(Jn(this,zn,"f").deckgl.onClick?.(e,t),HTMLWidgets.shinyMode){const t={coordinate:e.coordinate,...wn(e.viewport),layer:f(e.layer?.props,"id","name","groupName"),object:P(e)};Shiny.setInputValue(`${this.element.id}_click`,t,{priority:"event"})}})),Bn.set(this,(e=>{if(Jn(this,zn,"f").deckgl.onViewStateChange?.(e),HTMLWidgets.shinyMode){const t=wn(e.viewState);Shiny.setInputValue(`${this.element.id}_viewstate`,t,{priority:"event"})}})),$n.set(this,(e=>{HTMLWidgets.shinyMode&&Shiny.setInputValue(`${this.element.id}_editorupload`,{geojson:JSON.stringify(e)})})),qn(this,Wn,e,"f"),qn(this,Un,(0,a.s)(e),"f"),qn(this,zn,new Hn(t,(()=>this.render())),"f"),e.addEventListener("keydown",(e=>{($?e.metaKey:e.ctrlKey)&&"KeyS"===e.code&&(e.preventDefault(),this.snapshot())})),HTMLWidgets.shinyMode&&(Shiny.addCustomMessageHandler(`${e.id}:layer`,(e=>{this.state.upsertLayer(e)})),Shiny.addCustomMessageHandler(`${e.id}:deck`,(e=>{this.state.setState(e)})))}render(){let{deckgl:e,mapgl:t,editor:n,...r}=Jn(this,zn,"f");e={...e,onClick:Jn(this,Vn,"f"),onViewStateChange:Jn(this,Bn,"f")};let a=null;null!=n&&(a={...n,canUndo:n.canUndo,canRedo:n.canRedo,onUpload:e=>{Jn(this,$n,"f").call(this,e),n.setMode("view")}}),null!=e.initialBounds&&delete e.initialViewState,Jn(this,Un,"f").render((0,i.jsx)(s.StrictMode,{children:(0,i.jsx)(yn,{ref:Jn(this,Gn,"f"),...{...r,deckgl:e,mapgl:t,editor:a,onLayerVisibilityChange:this.state.setLayerVisibility}})}))}setLayerVisibility(e){return Jn(this,zn,"f").setLayerVisibility(e)}async snapshot({filename:e="rdeck.png",legend:t=!0,size:n}={}){const r=Jn(this,Gn,"f").current,i=await(r?.getSnapshot({legend:t,size:n}));return null!=i&&null!=e&&H(i,e),i??null}}Un=new WeakMap,Wn=new WeakMap,Gn=new WeakMap,zn=new WeakMap,Vn=new WeakMap,Bn=new WeakMap,$n=new WeakMap;const Xn={name:"rdeck",type:"output",factory(e,t,n){let r=null;return{get instance(){return r},renderValue(t){r=new Kn(e,t),r.render()},resize(){}}}};function Yn(e){const t=document.getElementById(e);return t&&er(t)}function Qn(){return[...document.querySelectorAll(".rdeck.html-widget")].map((e=>er(e))).filter((e=>e instanceof Kn))}function er(e){return e?.htmlwidget_data_init_result?.instance}HTMLWidgets.widget(Xn);const tr="0.5.0"},479:()=>{},9125:()=>{}},i={};function a(e){var t=i[e];if(void 0!==t)return t.exports;var n=i[e]={exports:{}};return r[e].call(n.exports,n,n.exports,a),n.exports}a.m=r,e=[],a.O=(t,n,r,i)=>{if(!n){var s=1/0;for(u=0;u<e.length;u++){for(var[n,r,i]=e[u],o=!0,l=0;l<n.length;l++)(!1&i||s>=i)&&Object.keys(a.O).every((e=>a.O[e](n[l])))?n.splice(l--,1):(o=!1,i<s&&(s=i));if(o){e.splice(u--,1);var c=r();void 0!==c&&(t=c)}}return t}i=i||0;for(var u=e.length;u>0&&e[u-1][2]>i;u--)e[u]=e[u-1];e[u]=[n,r,i]},a.n=e=>{var t=e&&e.__esModule?()=>e.default:()=>e;return a.d(t,{a:t}),t},n=Object.getPrototypeOf?e=>Object.getPrototypeOf(e):e=>e.__proto__,a.t=function(e,r){if(1&r&&(e=this(e)),8&r)return e;if("object"==typeof e&&e){if(4&r&&e.__esModule)return e;if(16&r&&"function"==typeof e.then)return e}var i=Object.create(null);a.r(i);var s={};t=t||[null,n({}),n([]),n(n)];for(var o=2&r&&e;"object"==typeof o&&!~t.indexOf(o);o=n(o))Object.getOwnPropertyNames(o).forEach((t=>s[t]=()=>e[t]));return s.default=()=>e,a.d(i,s),i},a.d=(e,t)=>{for(var n in t)a.o(t,n)&&!a.o(e,n)&&Object.defineProperty(e,n,{enumerable:!0,get:t[n]})},a.g=function(){if("object"==typeof globalThis)return globalThis;try{return this||new Function("return this")()}catch(e){if("object"==typeof window)return window}}(),a.o=(e,t)=>Object.prototype.hasOwnProperty.call(e,t),a.r=e=>{"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(e,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(e,"__esModule",{value:!0})},(()=>{var e={472:0};a.O.j=t=>0===e[t];var t=(t,n)=>{var r,i,[s,o,l]=n,c=0;if(s.some((t=>0!==e[t]))){for(r in o)a.o(o,r)&&(a.m[r]=o[r]);if(l)var u=l(a)}for(t&&t(n);c<s.length;c++)i=s[c],a.o(e,i)&&e[i]&&e[i][0](),e[i]=0;return a.O(u)},n=self.webpackChunkrdeck=self.webpackChunkrdeck||[];n.forEach(t.bind(null,0)),n.push=t.bind(null,n.push.bind(n))})();var s=a.O(void 0,[486,474,619,175,765,627,977,315,811,745,42,899,667,324,134,133,535,468,784,783,528,485,645,394,816,650,869,706,836,458,769,67,806,551,282,953,538,49,844,639,825,596],(()=>a(8322)));return s=a.O(s)})()));
//# sourceMappingURL=data:application/json;charset=utf-8;base64,