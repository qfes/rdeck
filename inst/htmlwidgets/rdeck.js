!function(e,t){"object"==typeof exports&&"object"==typeof module?module.exports=t():"function"==typeof define&&define.amd?define([],t):"object"==typeof exports?exports.rdeck=t():e.rdeck=t()}(self,(()=>(()=>{var e,t,n,r={4118:(e,t,n)=>{"use strict";n.r(t),n.d(t,{VERSION:()=>Qt,Widget:()=>qt,binding:()=>$t,getWidgetById:()=>Yt,getWidgets:()=>Jt});var r={};n.r(r),n.d(r,{AGGREGATION_OPERATION:()=>l.KM,ArcLayer:()=>s.ArcLayer,BitmapLayer:()=>s.BitmapLayer,CPUGridLayer:()=>l.ab,ColumnLayer:()=>s.ColumnLayer,ContourLayer:()=>l.YY,GPUGridLayer:()=>l.ML,GeoJsonLayer:()=>s.GeoJsonLayer,GreatCircleLayer:()=>c.GreatCircleLayer,GridCellLayer:()=>s.GridCellLayer,GridLayer:()=>l.mU,H3ClusterLayer:()=>c.H3ClusterLayer,H3HexagonLayer:()=>c.H3HexagonLayer,HeatmapLayer:()=>l.zP,HexagonLayer:()=>l.dX,IconLayer:()=>s.IconLayer,LineLayer:()=>s.LineLayer,MVTLayer:()=>c.MVTLayer,PathLayer:()=>s.PathLayer,PointCloudLayer:()=>s.PointCloudLayer,PolygonLayer:()=>s.PolygonLayer,QuadkeyLayer:()=>c.QuadkeyLayer,S2Layer:()=>c.S2Layer,ScatterplotLayer:()=>s.ScatterplotLayer,ScenegraphLayer:()=>u.ScenegraphLayer,ScreenGridLayer:()=>l.p3,SimpleMeshLayer:()=>u.SimpleMeshLayer,SolidPolygonLayer:()=>s.SolidPolygonLayer,TerrainLayer:()=>c.TerrainLayer,TextLayer:()=>s.TextLayer,Tile3DLayer:()=>c.Tile3DLayer,TileLayer:()=>c.TileLayer,TripsLayer:()=>c.TripsLayer,_AggregationLayer:()=>l.Di,_BinSorter:()=>l.l0,_CPUAggregator:()=>l.oA,_GPUGridAggregator:()=>l.Wc,_MultiIconLayer:()=>s._MultiIconLayer,_TextBackgroundLayer:()=>s._TextBackgroundLayer,_getURLFromTemplate:()=>c._getURLFromTemplate});n(1940);var i=n(4246),o=n(7634),a=n(7378),s=n(1059),l=n(9742),c=n(4453),u=n(3515),d=n(5252);const h=[0,0,0,255];function p([e,t,n,r=255]){return`rgba(${e}, ${t}, ${n}, ${r/255})`}function y(e,t){return Array.isArray(e)?t||4!==e.length?((t=null!=t?t:[])[0]=e[0],t[1]=e[1],t[2]=e[2],t[3]=3===e.length?e[3]:255,t):e:"string"==typeof e?(function(e,t){if(7===e.length){const n=parseInt(e.substring(1),16);t[0]=Math.floor(n/65536),t[1]=Math.floor(n/256%256),t[2]=n%256,t[3]=255}else if(9===e.length){const n=parseInt(e.substring(1),16);t[0]=Math.floor(n/16777216),t[1]=Math.floor(n/65536%256),t[2]=Math.floor(n/256%256),t[3]=n%256}}(e,t=null!=t?t:[]),t):h}var f=n(6165),g=n(6666),m=n(2537),v=n(5178),b=n(9844),w=n(5841),j=n(6890),x=n(8854);function L(e){return null!==e&&"object"==typeof e&&"accessor"===e.type}function C(e){return L(e)&&"scale"in e}var k=n(9992);const S=Object.freeze({additive:{[k.default.BLEND]:!0,blendFunc:[k.default.SRC_ALPHA,k.default.DST_ALPHA],blendEquation:k.default.FUNC_ADD},subtractive:{[k.default.BLEND]:!0,blendFunc:[k.default.ONE,k.default.ONE_MINUS_DST_COLOR,k.default.SRC_ALPHA,k.default.DST_ALPHA],blendEquation:[k.default.FUNC_SUBTRACT,k.default.FUNC_ADD]},normal:{[k.default.BLEND]:!0,blendFunc:[k.default.SRC_ALPHA,k.default.ONE_MINUS_SRC_ALPHA,k.default.ONE,k.default.ONE_MINUS_SRC_ALPHA],blendEquation:[k.default.FUNC_ADD,k.default.FUNC_ADD]}});function T(e="normal"){var t;return null!==(t=S[e])&&void 0!==t?t:S.normal}function N(e){return null!==e&&"object"==typeof e&&"frame"in e}function E(e,{name:t,type:n}){var r,i,o,a;const s=e.frame,l=Object.fromEntries(Object.entries(s).map((([e])=>[e,[]]))),c=Object.keys(e.frame).filter((e=>e!==t)),u=s[t],d=function(e){switch(e){case"MULTIPOINT":return M;case"MULTILINESTRING":return _;case"MULTIPOLYGON":return O;default:throw TypeError(`${e} not supported`)}}(n),h=e=>{for(const t of c)l[t].push(s[t][e])},p=[];for(let n=0;n<e.length;n++){const s=u[n];if(d(s)){l[t].push(...s);for(let t=0;t<s.length;t++)h(n),p.push(null!==(i=null===(r=e.indices)||void 0===r?void 0:r[n])&&void 0!==i?i:n)}else l[t].push(s),h(n),p.push(null!==(a=null===(o=e.indices)||void 0===o?void 0:o[n])&&void 0!==a?a:n)}return{length:l[t].length,geometry:{...e.geometry,[t]:n.replace("MULTI","")},indices:p,frame:l}}function M(e){return Array.isArray(null==e?void 0:e[0])}function _(e){var t;return Array.isArray(null===(t=null==e?void 0:e[0])||void 0===t?void 0:t[0])}function O(e){var t,n;return Array.isArray(null===(n=null===(t=null==e?void 0:e[0])||void 0===t?void 0:t[0])||void 0===n?void 0:n[0])}var P=n(4825),A=n(9405),Z=n(8220),D=n(714),F=n(4881),H=n(2377),I=n(6912),R=n(7181);class z extends P.Z{initializeState(){if(!function(e){return V.some((t=>e instanceof t))}(this))return;const e=this,t=e.getAttributeManager();t&&t.addInstanced({pickingColors:{type:k.default.UNSIGNED_BYTE,size:3,accessor:(t,{index:n,data:r,target:i})=>{var o,a,s;if(N(r)&&Array.isArray(r.indices))return e.encodePickingColor(r.indices.indexOf(r.indices[n]),i);const l=null===(a=null===(o=null==t?void 0:t.__source)||void 0===o?void 0:o.parent)||void 0===a?void 0:a.props.data;return N(l)&&Array.isArray(l.indices)?e.encodePickingColor(l.indices.indexOf(l.indices[t.__source.index]),i):e.encodePickingColor(null!==(s=null==t?void 0:t.__source.index)&&void 0!==s?s:n,i)},shaderAttributes:{pickingColors:{divisor:0},instancePickingColors:{divisor:1}}}})}}const V=[A.Z,Z.Z,D.Z,F.Z,H.Z,I.Z,R.Z];function U(e,...t){if(null==e)return null;const n=t.map((t=>[t,e[t]]));return Object.fromEntries(n)}function W(e){return e.clientHeight>0&&e.clientHeight>0?e:e.parentElement?W(e.parentElement):null}function G(e){const t=W(e);if(e===t||null==t)return{width:e.clientWidth,height:e.clientHeight};const{width:n,height:r}=getComputedStyle(e),i=document.createElement("div");Object.assign(i.style,{width:n,height:r,display:"hidden"}),t.appendChild(i);const o={width:i.clientWidth,height:i.clientHeight};return t.removeChild(i),o}function B(e,t){const n=new Map;for(const r of e){const e=t(r);n.has(e)?n.get(e).push(r):n.set(e,[r])}return n}function $(...e){return e.filter((e=>null!=e)).join(" ")}function q(e,t=0){let n;return(...r)=>{window.clearTimeout(n),n=window.setTimeout((()=>e(...r)),t)}}class Y{constructor(){this._val=new Map,this._ref=new WeakMap}getStore(e){return"object"==typeof(t=e)&&null!==t||"function"==typeof t?this._ref:this._val;var t}has(e){return this.getStore(e).has(e)}get(e){return this.getStore(e).get(e)}set(e,t){return this.getStore(e).set(e,t),this}}function J(e){const t=new Y;return(...n)=>{const r=n[0],i=n.slice(0,-1).reduceRight(((e,t)=>{if(e.has(t))return e.get(t);const n=new Y;return e.set(t,n),n}),t);if(i.has(r))return i.get(r);const o=e(...n);return i.set(r,o),o}}const Q=J((function(e){const t=function(e){return Object.entries(e.geometry).filter((([,e])=>/MULTI/.test(e))).map((([e,t])=>({name:e,type:t})))}(e);return 0===t.length?e:t.reduce(E,e)})),K=J(y),X=J((function(e,t){const n=function({col:e,dataType:t},n){if("highlightColor"===n)switch(t){case"table":return function(e){return({index:t,layer:n})=>y(n.props.data.frame[e][t])}(e);case"object":return function(e){return({object:t})=>y(t[e])}(e);case"geojson":return function(e){return({object:t})=>y(t.properties[e])}(e);default:throw TypeError(`${t} not supported`)}if(n.endsWith("Color"))switch(t){case"table":return function(e){return(t,{index:n,data:r,target:i})=>y(r.frame[e][n],i)}(e);case"object":return function(e){return(t,{target:n})=>y(t[e],n)}(e);case"geojson":return function(e){return(t,{target:n})=>y(t.properties[e],n)}(e);default:throw TypeError(`${t} not supported`)}switch(t){case"table":return function(e){return(t,{index:n,data:r})=>r.frame[e][n]}(e);case"object":return function(e){return t=>t[e]}(e);case"geojson":return function(e){return t=>t.properties[e]}(e);default:throw TypeError(`${t} not supported`)}}(e,t);return{...e,getData:n}})),ee=J((function(e,t){"palette"in e&&(e.range=e.palette.map((e=>y(e))),e.unknown=y(e.unknown));const n=function(e){switch(e.scale){case"linear":return(0,f.Z)().domain(e.domain).range(e.range).unknown(e.unknown).clamp(!0);case"power":return(0,g.ZP)().exponent(e.exponent).domain(e.domain).range(e.range).unknown(e.unknown).clamp(!0);case"log":return(0,m.Z)().base(e.base).domain(e.domain).range(e.range).unknown(e.unknown).clamp(!0);case"symlog":return(0,v.Z)().domain(e.domain).range(e.range).unknown(e.unknown).clamp(!0);case"identity":return(0,b.Z)().unknown(e.unknown);case"threshold":case"quantile":return(0,w.Z)().domain(e.domain).range(e.range).unknown(e.unknown);case"category":return(0,j.Z)().domain(e.domain).range(e.range).unknown(e.unknown);case"quantize":return(0,x.Z)().domain(e.domain).range(e.range).unknown(e.unknown);default:throw TypeError(`scale ${e.scale} not supported`)}}(e),r="highlightColor"===t?function({col:e,dataType:t},n){switch(t){case"table":return function(e,t){return({index:n,layer:r})=>t(r.props.data.frame[e][n])}(e,n);case"object":return function(e,t){return({object:n})=>t(n[e])}(e,n);case"geojson":return function(e,t){return({object:n})=>t(n.properties[e])}(e,n);default:throw TypeError(`${t} not supported`)}}(e,n):function({col:e,dataType:t},n){switch(t){case"table":return function(e,t){return(n,{index:r,data:i})=>t(i.frame[e][r])}(e,n);case"object":return function(e,t){return n=>t(n[e])}(e,n);case"geojson":return function(e,t){return n=>t(n.properties[e])}(e,n);default:throw TypeError(`${t} not supported`)}}(e,n);return{...e,name:t,getData:r,scaleData:n}}));class te{constructor({type:e,...t}){var n,r;const i=Object.entries(t),o=function(e){const t=e.filter(ne).map((([e,t])=>[e,K(t)])),n=e.find((([e])=>"colorRange"===e));n&&t.push([n[0],n[1].map((e=>K(e)))]);return t}(i),a=function(e){return e.filter((([,e])=>L(e))).map((([e,t])=>[e,C(t)?ee(t,e):X(t,e)]))}(i);this.type=e;const s=Object.fromEntries([...i,...o,...a.map((([e,t])=>[e,t.getData])),...ie(i),["visible",null===(n=t.visible)||void 0===n||n],["updateTriggers",re(a)],["parameters",(l=t.parameters,c=t.blendingMode,{...l,...T(c)})]]);var l,c;N(s.data)&&(s.data=Q(s.data),s.extensions=[new z,...null!==(r=s.extensions)&&void 0!==r?r:[]]),"TileLayer"===e&&(s.renderSubLayers=e=>{const{bbox:{west:t,south:n,east:r,north:i},x:o,y:a,z:s}=e.tile;return new d.Z({...e,data:[{z:s,x:o,y:a}],image:e.data,bounds:[t,n,r,i]})}),this.props=s,this.scales=a.filter((([,e])=>C(e))).map((([,e])=>e)),"TextLayer"===e&&"fonts"in document&&document.fonts.load(`16px ${t.fontFamily}`)}static create(e){return new te(e)}renderLayer(e){if("TripsLayer"===this.type&&void 0!==e){const t=this.props,{loopLength:n,animationSpeed:r}=t,i=n/r,o=e/1e3%i/i;t.currentTime=o*n}return new r[this.type]({...this.props})}renderLegend(){const e=this.scales.filter((e=>e.legend));return{id:this.props.id,name:this.props.name,scales:e}}renderSelector(){var e;return{id:this.props.id,groupName:this.props.groupName,name:this.props.name,visible:null===(e=this.props.visible)||void 0===e||e}}}function ne([e,t]){return e.endsWith("Color")&&(Array.isArray(t)||"string"==typeof t)}function re(e){const t=e=>{const{getData:t,scaleData:n,palette:r,...i}=e;return i},n=e.map((([e,n])=>[e,t(n)]));return Object.fromEntries(n)}function ie(e){return e.filter((([e])=>"getColorWeight"===e||"getElevationWeight"===e)).filter((([,e])=>null!==e&&"function"!=typeof e&&!L(e))).map((([e,t])=>[e,()=>t]))}n(8539),n(8586);var oe=n(2157),ae=n(6082),se=n(9404),le=n(7284),ce=n(6757);class ue extends le.Z{setProps(e){const t=e.initialBounds;if(null!=t&&(n=t,r=this.props.initialBounds,!(n===r||null==n&&null==r||null!=n&&null!=r&&(null==n?void 0:n.every(((e,t)=>e===(null==r?void 0:r[t]))))))){const[n,r,i,o]=t,a=[[Math.max(n,-180),Math.max(r,-85.051129)],[Math.min(i,180),Math.min(o,85.051129)]];this._setCanvasSize(e);const{width:s,height:l}=this._getMapSize();e={...e,initialViewState:{...(0,ce.Xg)({height:l,width:s,bounds:a}),bearing:0,pitch:0}}}var n,r;super.setProps(e)}_getMapSize(){const e=this.canvas;if(null==e)return{width:this.width,height:this.height};if(0===e.clientWidth&&0===e.clientHeight){const t=e.closest(".rdeck.html-widget");if(null!=t)return G(t)}return{width:e.clientWidth,height:e.clientHeight}}}ue.defaultProps={...le.Z.defaultProps,initialBounds:null};var de=n(8291),he=n(4630),pe=n(997);const ye=[3,169,244],fe=[...ye,255],ge=[...ye,25.5];class me extends de.nk{constructor(e,...t){const n=we("onEdit",e,...t),r=we("onChange",e,...t);super(e,...t,{onEdit:be(n,r)})}}me.defaultProps={...de.nk.defaultProps,selectedFeatureIndexes:[0],pickingDepth:0,onChange:()=>{},modeConfig:{screenSpace:!0,viewport:{}},getRadius:5,getLineWidth:2,getTentativeLineWidth:2,getLineColor:fe,getTentativeLineColor:fe,getEditHandlePointOutlineColor:fe,getFillColor:ge,getTentativeFillColor:ge,getEditHandlePointColor:[0,0,0,0],getDashArray:[4,2],extensions:[new he.Z({dash:!0})]};const ve=Object.freeze(["addFeature","addPosition","removePosition","finishMovePosition","translated"]);function be(e,t){return function({updatedData:n,editType:r,editContext:i}){"updateTentativeFeature"===r&&n&&0!==n.features.length&&(n.features.length=0),this.data=n,null==e||e({updatedData:n,editType:r,editContext:i}),null!=r&&ve.includes(r)&&(null==t||t({updatedData:n,editType:r,editContext:i}))}}function we(e,...t){return t.map((t=>t[e])).reverse().find((e=>void 0!==e))}const je=Object.seal({view:new pe.ViewMode,modify:new pe.CompositeMode([new pe.TranslateMode,new pe.ModifyMode]),polygon:new pe.DrawPolygonMode,lasso:new pe.DrawPolygonByDraggingMode});function xe(e){var t;return null!==(t=je[null!=e?e:"view"])&&void 0!==t?t:je.view}var Le=n(5425);const Ce=".feature_id";function ke(e,t=null){if(!e.picked)return null;null==t&&(t=function({object:e,layer:t}){return!N(t.props.data)||t instanceof Le.Z?function(e){return"Feature"===(null==e?void 0:e.type)&&"geometry"in e&&"type"in e.geometry}(e)?"geojson":"object":"table"}(e));const n=function(e){switch(e){case"table":return(e,{index:t,data:n})=>{const r=Object.keys(n.geometry),i={};for(const[e,o]of Object.entries(n.frame))r.includes(e)||(i[e]=o[t]);return i};case"object":return e=>({...e});case"geojson":return e=>({[Ce]:null==e?void 0:e.id,...null==e?void 0:e.properties});default:throw TypeError(`${e} not supported`)}}(t),{object:r,index:i}=e;return n(r,{index:i,data:e.layer.props.data})}const Se="cyWLt4_G7nk5vT9hPr0o",Te="Z9hHHet2RXmL0iMel3Zt",Ne="jp658yEHLlesSRvwBwDl",Ee="t9I8kJyjeEJEOArvMD7j",Me="vovHpTur01BROrMLmEFz";function _e({info:e}){if(!e.picked||null==e.layer.props.tooltip)return null;const{x:t,y:n}=e,{name:r,tooltip:o}=e.layer.props,a=ke(e,o.dataType);delete a[Ce];const s=!0===o.cols?Object.keys(a):o.cols;return(0,i.jsxs)("div",{className:Se,style:{transform:`translate(${t}px, ${n}px)`},children:[(0,i.jsx)("div",{className:Te,children:r}),(0,i.jsx)("table",{className:Ne,children:(0,i.jsx)("tbody",{children:s.map((e=>{var t;return(0,i.jsxs)("tr",{children:[(0,i.jsx)("td",{className:Ee,children:e}),(0,i.jsx)("td",{className:Me,children:String(null!==(t=a[e])&&void 0!==t?t:null)})]},e)}))})})]})}function Oe({props:e,layers:t,polygonEditor:n}){const r=(0,a.useRef)(null),[o,s]=Pe(),{mapboxAccessToken:l,mapStyle:c,controller:u,parameters:d,blendingMode:h,...p}=e,y={...d,...T(h)},[f,g]=(0,a.useState)(0),m=t.some((e=>"TripsLayer"===e.type));Ae(m,(e=>g(e)));const v=t.map((e=>null!=e.type?e.renderLayer(f):null)),b=function(e){return null==e?null:new me({mode:xe(e.mode),data:e.polygon,onChange:e.onPolygonChange,filled:"view"!==e.mode,getDashArray:"view"!==e.mode?[4,2]:[0,0]})}(n);return(0,i.jsxs)(a.Fragment,{children:[(0,i.jsx)(ae.Z,{Deck:ue,ref:r,...p,parameters:y,layers:[...v,b],onHover:s,children:(0,i.jsx)(oe.Z,{id:"map",controller:u,repeat:!0,children:c&&(0,i.jsx)(se.D5,{reuseMaps:!0,mapboxAccessToken:l,mapStyle:c})})}),o&&(0,i.jsx)(_e,{info:o})]})}const Pe=()=>{const[e,t]=(0,a.useState)(null);return[e,(0,a.useCallback)((e=>{if(!e.picked||!e.layer.props.tooltip||e.layer instanceof Le.Z)return t(null);t(e)}),[])]},Ae=(e,t)=>{const n=(0,a.useRef)(0),r=(0,a.useRef)(Date.now()),i=()=>{t(Date.now()-r.current),n.current=window.requestAnimationFrame(i)};(0,a.useEffect)((()=>{if(e)return n.current=window.requestAnimationFrame(i),()=>window.cancelAnimationFrame(n.current)}),[e])};var Ze=n(6509),De=n(4083),Fe=n(5092),He=n(1081);const Ie="U44LhpKlV8r1Vu1ZoZA3",Re="XF770nELUcE_0zxo_aOg",ze="HYRhC2aw1PSMYGCz2bDb",Ve="YNou4FYlc3N3GhFp2BkO",Ue="f44NGqZZGn4de9S3oTHN",We="xqKP289MUJ06Hgb3CjoW",Ge="XctZC_fZAMvRMiHPlt9G",Be="ly9kEH8MpXynhBX6Fhcj",$e="iM2OiMQz6z_NtAQZZyPS",qe="_8r8348KPS_nzNLR_CV_",Ye="tzkFrkEU5cB_jY6zcuua",Je=Date.now();function Qe({className:e,tooltip:t,onClick:n,children:r}){return(0,i.jsx)("button",{className:e,type:"button",onClick:n,title:t,children:r})}function Ke({layers:e,onVisibilityChange:t}){const n=B(e,(e=>{var t;return null!==(t=e.groupName)&&void 0!==t?t:`${e.name}-${Je}`})),r=(n,r,i)=>{if(i){const i=!e.filter((e=>!n.includes(e))).some((e=>e.visible));return t(e.map((e=>({...e,visible:n.includes(e)?r:i}))))}t(n.map((e=>({...e,visible:r}))))},[o,s]=(0,a.useState)(!1),l=()=>s((e=>!e));return o?(0,i.jsxs)("div",{className:Re,children:[(0,i.jsx)("div",{className:ze,children:(0,i.jsxs)(Qe,{className:Ve,onClick:l,tooltip:"Close",children:[(0,i.jsx)(Ze.Z,{className:Ye,fontSize:"small"}),(0,i.jsx)("span",{className:Ue,children:"Layers"})]})}),(0,i.jsx)("div",{className:We,children:Array.from(n.entries(),(([e,t,[{groupName:n}]=t])=>(0,i.jsx)(Xe,{group:n,layers:t,onChange:r},e)))})]}):(0,i.jsx)(Qe,{className:Ie,tooltip:"Layer selector",onClick:l,children:(0,i.jsx)(Ze.Z,{className:Ye,fontSize:"small"})})}function Xe({group:e,layers:t,onChange:n}){const r=Array.from(B(t,(e=>e.name)),(([e,t])=>(0,i.jsx)(et,{name:e,layers:t,onChange:n},e)));return e?(0,i.jsxs)(a.Fragment,{children:[(0,i.jsx)(et,{name:e,layers:t,onChange:n}),(0,i.jsx)("div",{className:Ge,children:r})]}):(0,i.jsx)(a.Fragment,{children:r})}function et({name:e,layers:t,onChange:n}){const r=function(e){let t=e[0].visible;for(const n of e)if(n.visible!==t)return null;return t}(t),o=null===r,s=(0,a.useRef)(null);(0,a.useEffect)((()=>{s.current&&(s.current.indeterminate=o)}),[o]);const l=(0,a.useRef)((()=>!1)),c=r?De.Z:o?Fe.Z:He.Z,u=$(Be,r||o?$e:null);return(0,i.jsxs)("label",{className:u,children:[(0,i.jsx)("input",{ref:s,className:qe,type:"checkbox",onChange:()=>{l.current()?n(t,!0,!0):l.current=tt((()=>n(t,!r,!1)),200)},checked:null==r||r}),(0,i.jsx)(c,{fontSize:"small",className:Ye}),(0,i.jsx)("span",{className:Ue,children:e})]})}const tt=(e,t=200)=>{const n={current:0};let r=0;const i=o=>{if(r||(r=o),o-r>t)return n.current=0,void e();n.current=globalThis.requestAnimationFrame(i)};return n.current=globalThis.requestAnimationFrame(i),()=>0!==n.current&&(globalThis.cancelAnimationFrame(n.current),n.current=0,!0)},nt="lWOwchFb6W2NpcWR4ZQS",rt="mIJjIoOSsjLZMp591rN0",it="OULly07OGkLPRiEDgp00",ot="oxctK5Tcknb3syUfT7xg",at="KEbGPBIjLXnjAiUTu8eP",st="MBBFrOSR5F_grZcyOCp0",lt="l_4PaMO7BWOn4DcLN5Oh",ct="aWzYqDozdq6Vl4QuIJ1y",ut="xaprV4ANDgRiE5ai1hUl",dt="f6SnauerJY75ZqNAuK56",ht=16;function pt({layers:e}){return 0===e.length?null:(0,i.jsx)("div",{className:nt,children:e.map((e=>(0,i.jsx)(yt,{...e},e.id)))})}function yt({name:e,scales:t}){return 0===t.length?null:(0,i.jsxs)("div",{className:rt,children:[(0,i.jsx)("div",{className:it,title:e,children:e}),t.map((e=>(0,i.jsx)(ft,{...e},e.name)))]})}function ft(e){var t;const n=e.name.replace(/^get/,"").replace(/([A-Z])/g," $1").toLowerCase();const r="palette"in e;const o=function(e){return"linear"===e.scale||"power"===e.scale||"log"===e.scale||"symlog"===e.scale}(e),a=function(e){return"threshold"===e.scale||"quantile"===e.scale||"quantize"===e.scale}(e);return(0,i.jsxs)("div",{className:ot,children:[(0,i.jsx)("div",{className:at,children:n}),(0,i.jsx)("span",{className:st,children:"by "}),(0,i.jsx)("span",{className:lt,title:e.col,children:null!==(t=e.scaleBy)&&void 0!==t?t:e.col}),r&&o&&(0,i.jsx)(gt,{...e}),r&&a&&(0,i.jsx)(mt,{...e}),r&&"category"===e.scale&&(0,i.jsx)(vt,{...e})]})}const gt=({ticks:e,scaleData:t})=>{const n=e.map(((e,t)=>t)).slice(1,-1),r=ht*(e.length-1),o=r+11+1;return(0,i.jsxs)("svg",{className:ct,height:o,shapeRendering:"crispEdges",children:[(0,i.jsxs)("svg",{y:5,children:[(0,i.jsx)("image",{width:20,height:r,href:wt(t),preserveAspectRatio:"none"}),n.map((e=>(0,i.jsx)("line",{className:dt,x2:20,y1:ht*e,y2:ht*e},e)))]}),(0,i.jsx)(bt,{ticks:e,y:-2})]})},mt=({ticks:e,range:t})=>{const n=t.map(p),r=ht*(e.length-1)+11+1;return(0,i.jsxs)("svg",{className:ct,height:r,shapeRendering:"crispEdges",children:[(0,i.jsx)("svg",{y:5,children:n.map(((e,t)=>(0,i.jsx)("rect",{width:20,height:ht,y:t*ht,fill:e},t)))}),(0,i.jsx)(bt,{ticks:e,y:-2})]})};function vt({ticks:e,range:t,unknownTick:n,unknown:r}){const o=n?[...t,r]:t,a=n?[...e,n]:e,s=o.map(p),l=ht*a.length;return(0,i.jsxs)("svg",{className:ct,height:l,children:[(0,i.jsx)("svg",{children:s.map(((e,t)=>(0,i.jsx)("rect",{width:20,height:14,y:1+t*ht,fill:e},t)))}),(0,i.jsx)(bt,{ticks:a})]})}function bt({ticks:e,x:t=28,y:n=0}){return(0,i.jsx)("svg",{x:t,y:n,children:e.map(((e,t)=>(0,i.jsx)("text",{className:ut,y:ht*t,dy:11,children:String(e)},t)))})}function wt(e,t=200){const n=e.range().length,r=[...Array(n).keys()].map((e=>e/(n-1))),i=e.copy().range(r).invert,o=document.createElement("canvas"),a=o.getContext("2d");o.width=1,o.height=t;for(let n=0;n<t;n++)a.fillStyle=p(e(i(n/t))),a.fillRect(0,n,1,1);return o.toDataURL()}var jt=n(5413),xt=n(9693),Lt=n(9036),Ct=n(2824),kt=n(7582),St=n(7909);const Tt="l24td1D5nAouqZnk0I1n",Nt="vxiovPMAYUyP51yabCdo",Et="Q5uUStLObbtQtzcGIWvN",Mt="zeM4gaoi12L14IkjiF1T",_t=()=>{};function Ot({mode:e="view",polygon:t={type:"FeatureCollection",features:[]},onModeChange:n=_t,onPolygonChange:r=_t}){return(0,i.jsxs)("div",{className:Tt,children:[(0,i.jsx)(Pt,{name:"Pan",icon:kt.Z,active:"view"===e,onClick:()=>n("view")}),(0,i.jsx)(Pt,{name:"Modify",icon:Lt.Z,active:"modify"===e,disabled:!At(t),onClick:()=>n("modify")}),(0,i.jsx)(Pt,{name:"Polygon",icon:xt.Z,active:"polygon"===e,onClick:()=>n("polygon")}),(0,i.jsx)(Pt,{name:"Lasso",icon:jt.Z,active:"lasso"===e,onClick:()=>n("lasso")}),(0,i.jsx)(Pt,{name:"Delete",icon:St.Z,disabled:!At(t),onClick:()=>{r({updatedData:{type:"FeatureCollection",features:[]},editType:"deleteFeature",editContext:{featureIndexes:t.features.map(((e,t)=>t))}})}})]})}function Pt({name:e,onClick:t=_t,disabled:n=!1,active:r=!1,icon:o,iconStyle:a}){const s=$(Nt,r?Et:null);return(0,i.jsx)("button",{className:s,onClick:t,title:e,disabled:n,children:o&&(0,i.jsx)(Ct.Z,{component:o,className:Mt,fontSize:"small",style:a})})}function At(e){var t;return 0!==(null===(t=null==e?void 0:e.features)||void 0===t?void 0:t.length)}const Zt="rdeck",Dt="XTuYKSlBcC933W4sKWtC",Ft="kQnelQ4hkAJEJHLO0NJI",Ht="hQbOOdEZw0LO0llGKVqS",It="cSol54mlVTgAnRzj_GUM";function Rt({props:e,layers:t,theme:n,lazyLoad:r,layerSelector:o,onLayerVisibilityChange:s,polygonEditor:l}){const c=t.map(te.create),u=(0,a.useRef)(null),d=function(e,t){const[n,r]=(0,a.useState)(!1);return(0,a.useEffect)((()=>{if(t&&e.current){const t=new IntersectionObserver((e=>{r(e[0].isIntersecting)}),{threshold:0});return t.observe(e.current),()=>t.disconnect()}}),[t,e]),n}(u,r),h=!r||d;return(0,i.jsxs)("div",{ref:u,className:$(Zt,n),children:[(0,i.jsx)("div",{className:$(Dt,Ft),children:o&&(0,i.jsx)(Ke,{layers:c.filter((e=>e.props.visibilityToggle)).map((e=>e.renderSelector())).reverse(),onVisibilityChange:s})}),(0,i.jsx)("div",{className:$(Dt,Ht),children:(0,i.jsx)(pt,{layers:c.filter((e=>e.props.visible)).map((e=>e.renderLegend())).reverse()})}),(0,i.jsx)("div",{className:$(Dt,It),children:l&&(0,i.jsx)(Ot,{...l})}),h&&(0,i.jsx)(Oe,{props:e,layers:c,polygonEditor:l})]})}var zt=n(641);function Vt(e){const t=e instanceof zt.Z?e:new zt.Z(e),n=U(t,"longitude","latitude","zoom","bearing","pitch","altitude");return{bounds:t.getBounds(),viewState:{...n,center:t.unprojectFlat(t.center)}}}var Ut,Wt,Gt=function(e,t,n,r,i){if("m"===r)throw new TypeError("Private method is not writable");if("a"===r&&!i)throw new TypeError("Private accessor was defined without a setter");if("function"==typeof t?e!==t||!i:!t.has(e))throw new TypeError("Cannot write private member to an object whose class did not declare it");return"a"===r?i.call(e,n):i?i.value=n:t.set(e,n),n},Bt=function(e,t,n,r){if("a"===n&&!r)throw new TypeError("Private accessor was defined without a getter");if("function"==typeof t?e!==t||!r:!t.has(e))throw new TypeError("Cannot read private member from an object whose class did not declare it");return"m"===n?r:"a"===n?r.call(e):r?r.value:t.get(e)};const $t={name:"rdeck",type:"output",factory:(e,t,n)=>new qt(e,t,n)};class qt{constructor(e,t,n){if(Ut.set(this,void 0),Wt.set(this,void 0),this.props={blendingMode:"normal"},this.layers=[],this.theme="kepler",this.layerSelector=!0,this.lazyLoad=!1,this.polygonEditor=null,Gt(this,Ut,e,"f"),Gt(this,Wt,(0,o.s)(e),"f"),this.handleClick=this.handleClick.bind(this),this.handleViewStateChange=q(this.handleViewStateChange.bind(this),50),this.handlePolygonChange=q(this.handlePolygonChange.bind(this),50),this.handleEditorModeChange=this.handleEditorModeChange.bind(this),this.setLayerVisibility=this.setLayerVisibility.bind(this),HTMLWidgets.shinyMode){const t=q((e=>this.renderValue(e)),50);Shiny.addCustomMessageHandler(`${e.id}:layer`,(e=>{var n,r,i;const o=this.layers.find((t=>t.id===e.id)),a={...o,...e,visible:null!==(n=e.visible)&&void 0!==n?n:null==o?void 0:o.visible,data:null!==(i=null!==(r=e.data)&&void 0!==r?r:null==o?void 0:o.data)&&void 0!==i?i:null};this.layers=null==o?[...this.layers,a]:this.layers.map((e=>e===o?a:e)),t({layers:this.layers})})),Shiny.addCustomMessageHandler(`${e.id}:deck`,(e=>{this.renderValue(e)}))}}renderValue({props:e=this.props,layers:t=this.layers,theme:n=this.theme,layerSelector:r=this.layerSelector,polygonEditor:o=this.polygonEditor,lazyLoad:a=this.lazyLoad}={}){var s;null!=(e={...this.props,...e,onClick:this.handleClick,onViewStateChange:this.handleViewStateChange}).initialBounds&&delete e.initialViewState,null!=o&&(o={...o,polygon:null!==(s=o.polygon)&&void 0!==s?s:{type:"FeatureCollection",features:[]},onModeChange:this.handleEditorModeChange,onPolygonChange:this.handlePolygonChange}),Object.assign(this,{props:e,layers:t,theme:n,layerSelector:r,polygonEditor:o,lazyLoad:a}),Bt(this,Wt,"f").render((0,i.jsx)(Rt,{props:e,layers:t,theme:n,layerSelector:r,polygonEditor:o,lazyLoad:a,onLayerVisibilityChange:this.setLayerVisibility}))}resize(e,t){}get id(){return Bt(this,Ut,"f").id}setLayerVisibility(e){if(0===e.length)return;const t=this.layers.map((t=>{const n=e.find((e=>((e,t)=>{const n=e.name===t.name,r=e.groupName===t.groupName;return n&&r||null==e.name&&null!=e.groupName&&r})(e,t)&&e.visible!==t.visible));return n?{...t,visible:n.visible}:t}));this.renderValue({layers:t})}handleClick(e){var t;if(HTMLWidgets.shinyMode){const n={coordinate:e.coordinate,...Vt(e.viewport),layer:U(null===(t=e.layer)||void 0===t?void 0:t.props,"id","name","groupName"),object:ke(e)};Shiny.setInputValue(`${this.id}_click`,n,{priority:"event"})}}handleViewStateChange({viewState:e}){if(HTMLWidgets.shinyMode){const t=Vt(e);Shiny.setInputValue(`${this.id}_viewstate`,t,{priority:"event"})}}handleEditorModeChange(e){null!=this.polygonEditor&&this.renderValue({polygonEditor:{...this.polygonEditor,mode:e}})}handlePolygonChange({updatedData:e,editType:t}){var n;if(null==this.polygonEditor)return;const r=null!==(n={addFeature:"modify",deleteFeature:"view"}[t])&&void 0!==n?n:this.polygonEditor.mode;this.renderValue({polygonEditor:{...this.polygonEditor,mode:r,polygon:e}}),HTMLWidgets.shinyMode&&Shiny.setInputValue(`${this.id}_editedpolygon`,{polygon:JSON.stringify(e)})}}function Yt(e){var t;const n=document.getElementById(e);return null!==(t=null==n?void 0:n.htmlwidget_data_init_result)&&void 0!==t?t:null}function Jt(){return[...document.querySelectorAll(".rdeck.html-widget")].map((e=>e.htmlwidget_data_init_result)).filter((e=>e instanceof qt))}Ut=new WeakMap,Wt=new WeakMap,HTMLWidgets.widget($t);const Qt="0.4.0"},6070:()=>{},2672:()=>{},2210:()=>{}},i={};function o(e){var t=i[e];if(void 0!==t)return t.exports;var n=i[e]={exports:{}};return r[e].call(n.exports,n,n.exports,o),n.exports}o.m=r,e=[],o.O=(t,n,r,i)=>{if(!n){var a=1/0;for(u=0;u<e.length;u++){for(var[n,r,i]=e[u],s=!0,l=0;l<n.length;l++)(!1&i||a>=i)&&Object.keys(o.O).every((e=>o.O[e](n[l])))?n.splice(l--,1):(s=!1,i<a&&(a=i));if(s){e.splice(u--,1);var c=r();void 0!==c&&(t=c)}}return t}i=i||0;for(var u=e.length;u>0&&e[u-1][2]>i;u--)e[u]=e[u-1];e[u]=[n,r,i]},o.n=e=>{var t=e&&e.__esModule?()=>e.default:()=>e;return o.d(t,{a:t}),t},n=Object.getPrototypeOf?e=>Object.getPrototypeOf(e):e=>e.__proto__,o.t=function(e,r){if(1&r&&(e=this(e)),8&r)return e;if("object"==typeof e&&e){if(4&r&&e.__esModule)return e;if(16&r&&"function"==typeof e.then)return e}var i=Object.create(null);o.r(i);var a={};t=t||[null,n({}),n([]),n(n)];for(var s=2&r&&e;"object"==typeof s&&!~t.indexOf(s);s=n(s))Object.getOwnPropertyNames(s).forEach((t=>a[t]=()=>e[t]));return a.default=()=>e,o.d(i,a),i},o.d=(e,t)=>{for(var n in t)o.o(t,n)&&!o.o(e,n)&&Object.defineProperty(e,n,{enumerable:!0,get:t[n]})},o.g=function(){if("object"==typeof globalThis)return globalThis;try{return this||new Function("return this")()}catch(e){if("object"==typeof window)return window}}(),o.o=(e,t)=>Object.prototype.hasOwnProperty.call(e,t),o.r=e=>{"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(e,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(e,"__esModule",{value:!0})},(()=>{var e={472:0};o.O.j=t=>0===e[t];var t=(t,n)=>{var r,i,[a,s,l]=n,c=0;if(a.some((t=>0!==e[t]))){for(r in s)o.o(s,r)&&(o.m[r]=s[r]);if(l)var u=l(o)}for(t&&t(n);c<a.length;c++)i=a[c],o.o(e,i)&&e[i]&&e[i][0](),e[i]=0;return o.O(u)},n=self.webpackChunkrdeck=self.webpackChunkrdeck||[];n.forEach(t.bind(null,0)),n.push=t.bind(null,n.push.bind(n))})();var a=o.O(void 0,[486,474,619,315,568,627,175,977,811,42,899,667,324,134,133,468,745,535,528,784,485,378,645,783,394,816,650,869,706,836,458,769,67,806,551,282,953,538,49,844,639,825,596],(()=>o(4118)));return a=o.O(a)})()));
//# sourceMappingURL=data:application/json;charset=utf-8;base64,