!function(e,t){"object"==typeof exports&&"object"==typeof module?module.exports=t():"function"==typeof define&&define.amd?define([],t):"object"==typeof exports?exports.rdeck=t():e.rdeck=t()}(self,(()=>(()=>{var e,t,n,r={5416:(e,t,n)=>{"use strict";n.r(t),n.d(t,{VERSION:()=>Gn,Widget:()=>Rn,binding:()=>In,getWidgetById:()=>Un,getWidgets:()=>Hn});var r={};n.r(r),n.d(r,{AGGREGATION_OPERATION:()=>ce.KM,ArcLayer:()=>le.ArcLayer,BitmapLayer:()=>le.BitmapLayer,CPUGridLayer:()=>ce.ab,ColumnLayer:()=>le.ColumnLayer,ContourLayer:()=>ce.YY,GPUGridLayer:()=>ce.ML,GeoJsonLayer:()=>le.GeoJsonLayer,GreatCircleLayer:()=>ue.GreatCircleLayer,GridCellLayer:()=>le.GridCellLayer,GridLayer:()=>ce.mU,H3ClusterLayer:()=>ue.H3ClusterLayer,H3HexagonLayer:()=>ue.H3HexagonLayer,HeatmapLayer:()=>ce.zP,HexagonLayer:()=>ce.dX,IconLayer:()=>le.IconLayer,LineLayer:()=>le.LineLayer,MVTLayer:()=>ue.MVTLayer,PathLayer:()=>le.PathLayer,PointCloudLayer:()=>le.PointCloudLayer,PolygonLayer:()=>le.PolygonLayer,QuadkeyLayer:()=>ue.QuadkeyLayer,S2Layer:()=>ue.S2Layer,ScatterplotLayer:()=>le.ScatterplotLayer,ScenegraphLayer:()=>de.ScenegraphLayer,ScreenGridLayer:()=>ce.p3,SimpleMeshLayer:()=>de.SimpleMeshLayer,SolidPolygonLayer:()=>le.SolidPolygonLayer,TerrainLayer:()=>ue.TerrainLayer,TextLayer:()=>le.TextLayer,Tile3DLayer:()=>ue.Tile3DLayer,TileLayer:()=>ue.TileLayer,TripsLayer:()=>ue.TripsLayer,_AggregationLayer:()=>ce.Di,_BinSorter:()=>ce.l0,_CPUAggregator:()=>ce.oA,_GPUGridAggregator:()=>ce.Wc,_MultiIconLayer:()=>le._MultiIconLayer,_TextBackgroundLayer:()=>le._TextBackgroundLayer,_getURLFromTemplate:()=>ue._getURLFromTemplate});n(8559);var i=n(5893),o=n(745),a=n(7294),s=(n(6158),n(2687),n(4009)),l=n(6024),c=n(3295),u=n(17),d=n(8289),f=n(7682);function h(e,...t){if(null==e)return null;const n=t.map((t=>[t,e[t]]));return Object.fromEntries(n)}function p(e){return e.clientHeight>0&&e.clientHeight>0?e:e.parentElement?p(e.parentElement):null}function g(e){const t=p(e);if(e===t||null==t)return{width:e.clientWidth,height:e.clientHeight};const{width:n,height:r}=getComputedStyle(e),i=document.createElement("div");Object.assign(i.style,{width:n,height:r,display:"hidden"}),t.appendChild(i);const o={width:i.clientWidth,height:i.clientHeight};return t.removeChild(i),o}function y(e,t){const n=new Map;for(const r of e){const e=t(r);n.has(e)?n.get(e).push(r):n.set(e,[r])}return n}function m(...e){return e.filter((e=>null!=e)).join(" ")}class b{constructor(){Object.defineProperty(this,"_val",{enumerable:!0,configurable:!0,writable:!0,value:new Map}),Object.defineProperty(this,"_ref",{enumerable:!0,configurable:!0,writable:!0,value:new WeakMap})}getStore(e){return"object"==typeof(t=e)&&null!==t||"function"==typeof t?this._ref:this._val;var t}has(e){return this.getStore(e).has(e)}get(e){return this.getStore(e).get(e)}set(e,t){return this.getStore(e).set(e,t),this}}function v(e){const t=new b;return(...n)=>{const r=n[0],i=n.slice(0,-1).reduceRight(((e,t)=>{if(e.has(t))return e.get(t);const n=new b;return e.set(t,n),n}),t);if(i.has(r))return i.get(r);const o=e(...n);return i.set(r,o),o}}class w extends d.Z{setProps(e){const t=e.initialBounds;if(null!=t&&(n=t,r=this.props.initialBounds,!(n===r||null==n&&null==r||null!=n&&null!=r&&(null==n?void 0:n.every(((e,t)=>e===(null==r?void 0:r[t]))))))){const[n,r,i,o]=t,a=[[Math.max(n,-180),Math.max(r,-85.051129)],[Math.min(i,180),Math.min(o,85.051129)]];this._setCanvasSize(e);const{width:s,height:l}=this._getMapSize();e={...e,initialViewState:{...(0,f.Xg)({height:l,width:s,bounds:a}),bearing:0,pitch:0}}}var n,r;super.setProps(e)}_getMapSize(){const e=this.canvas;if(null==e)return{width:this.width,height:this.height};if(0===e.clientWidth&&0===e.clientHeight){const t=e.closest(".rdeck.html-widget");if(null!=t)return g(t)}return{width:e.clientWidth,height:e.clientHeight}}}function j(e){return null!==e&&"object"==typeof e&&"frame"in e}function x(e,{name:t,type:n}){var r,i,o,a;const s=e.frame,l=Object.fromEntries(Object.entries(s).map((([e])=>[e,[]]))),c=Object.keys(e.frame).filter((e=>e!==t)),u=s[t],d=function(e){switch(e){case"MULTIPOINT":return k;case"MULTILINESTRING":return L;case"MULTIPOLYGON":return O;default:throw TypeError(`${e} not supported`)}}(n),f=e=>{for(const t of c)l[t].push(s[t][e])},h=[];for(let n=0;n<e.length;n++){const s=u[n];if(d(s)){l[t].push(...s);for(let t=0;t<s.length;t++)f(n),h.push(null!==(i=null===(r=e.indices)||void 0===r?void 0:r[n])&&void 0!==i?i:n)}else l[t].push(s),f(n),h.push(null!==(a=null===(o=e.indices)||void 0===o?void 0:o[n])&&void 0!==a?a:n)}return{length:l[t].length,geometry:{...e.geometry,[t]:n.replace("MULTI","")},indices:h,frame:l}}function k(e){return Array.isArray(null==e?void 0:e[0])}function L(e){var t;return Array.isArray(null===(t=null==e?void 0:e[0])||void 0===t?void 0:t[0])}function O(e){var t,n;return Array.isArray(null===(n=null===(t=null==e?void 0:e[0])||void 0===t?void 0:t[0])||void 0===n?void 0:n[0])}Object.defineProperty(w,"defaultProps",{enumerable:!0,configurable:!0,writable:!0,value:{...d.Z.defaultProps,initialBounds:null}});const S=".feature_id";function P(e,t=null){if(!e.picked)return null;null==t&&(t=function({object:e,layer:t}){return!j(t.props.data)||t instanceof c.Z?function(e){return"Feature"===(null==e?void 0:e.type)&&"geometry"in e&&"type"in e.geometry}(e)?"geojson":"object":"table"}(e));const n=function(e){switch(e){case"table":return(e,{index:t,data:n})=>{const r=Object.keys(n.geometry),i={};for(const[e,o]of Object.entries(n.frame))r.includes(e)||(i[e]=o[t]);return i};case"object":return e=>({...e});case"geojson":return e=>({[S]:null==e?void 0:e.id,...null==e?void 0:e.properties});default:throw TypeError(`${e} not supported`)}}(t),{object:r,index:i}=e;return n(r,{index:i,data:e.layer.props.data})}const C="cyWLt4_G7nk5vT9hPr0o",M="Z9hHHet2RXmL0iMel3Zt",T="jp658yEHLlesSRvwBwDl",N="t9I8kJyjeEJEOArvMD7j",E="vovHpTur01BROrMLmEFz";function _({info:e}){if(!e.picked||null==e.layer.props.tooltip)return null;const{x:t,y:n}=e,{name:r,tooltip:o}=e.layer.props,a=P(e,o.dataType);delete a[S];const s=!0===o.cols?Object.keys(a):o.cols;return(0,i.jsxs)("div",{className:C,style:{transform:`translate(${t}px, ${n}px)`},children:[(0,i.jsx)("div",{className:M,children:r}),(0,i.jsx)("table",{className:T,children:(0,i.jsx)("tbody",{children:s.map((e=>{var t;return(0,i.jsxs)("tr",{children:[(0,i.jsx)("td",{className:N,children:e}),(0,i.jsx)("td",{className:E,children:String(null!==(t=a[e])&&void 0!==t?t:null)})]},e)}))})})]})}var A=n(9757);const Z=Object.freeze({additive:{[A.default.BLEND]:!0,blendFunc:[A.default.SRC_ALPHA,A.default.DST_ALPHA],blendEquation:A.default.FUNC_ADD},subtractive:{[A.default.BLEND]:!0,blendFunc:[A.default.ONE,A.default.ONE_MINUS_DST_COLOR,A.default.SRC_ALPHA,A.default.DST_ALPHA],blendEquation:[A.default.FUNC_SUBTRACT,A.default.FUNC_ADD]},normal:{[A.default.BLEND]:!0,blendFunc:[A.default.SRC_ALPHA,A.default.ONE_MINUS_SRC_ALPHA,A.default.ONE,A.default.ONE_MINUS_SRC_ALPHA],blendEquation:[A.default.FUNC_ADD,A.default.FUNC_ADD]}});function F(e="normal"){var t;return null!==(t=Z[e])&&void 0!==t?t:Z.normal}var D=n(4329),R=n(7359),I=n(9900);function U(e){switch(e.type){case"Point":return 1;case"MultiPoint":case"LineString":return e.coordinates.length;case"MultiLineString":case"Polygon":return H(e.coordinates);case"MultiPolygon":return e.coordinates.reduce(((e,t)=>e+H(t)),0);case"GeometryCollection":return e.geometries.reduce(((e,t)=>e+U(t)),0);default:throw new TypeError(`Geomtry type ${e.type} not supported.`)}}function H(e){return e.reduce(((e,t)=>e+t.length),0)}const W=[3,169,244],G=[116,117,129],V=[...W,216.75],z=[...G,216.75],B=[...W,38.25],$=[...G,38.25],J=[0,0,0,0];function q(e){if(null==e)return null;const{geojson:t,selectedFeatureIndices:n,onSetGeoJson:r,onSelectFeatures:i}=e,o=function(e){var t;return null!==(t=re[null!=e?e:"view"])&&void 0!==t?t:re.view}(e.mode),a=!ie.includes(o);return new te({data:t,selectedFeatureIndexes:n,mode:o,modeConfig:{screenSpace:!0,viewport:{}},onEdit:function({updatedData:e,editType:t,editContext:o}){var a;"updateTentativeFeature"!==t&&("selectFeature"!==t?(this.data=e,ee.has(t)&&(null==r||r(e),"addFeature"===t&&(null==i||i([...n,...o.featureIndexes])))):null==i||i(null!==(a=o.selectedIndices)&&void 0!==a?a:[]))},pickable:o!==re.view,pickingLineWidthExtraPixels:5,pickingDepth:0,getRadius:6,getLineWidth:1.5,getTentativeLineWidth:1.5,lineWidthScale:1,getFillColor:o===re.view?J:Y,getLineColor:Q,getTentativeLineColor:V,getEditHandlePointOutlineColor:V,getTentativeFillColor:B,getEditHandlePointColor:J,getDashArray:a?[4,2]:[0,0],extensions:[new D.Z({dash:!0})],_subLayerProps:{geojson:{dataComparator:X,_dataDiff:K},guides:{dataComparator:X,_dataDiff:K}}})}function Y(e,t,n){return t?B:$}function Q(e,t,n){return t?V:z}function X(e,t){return Object.is(e.features,t.features)}function K(e,t){const n=e.features,r=t.features;if(n.length!==r.length)return"A new data container was supplied";const i=[],o=n.length;for(let e=0;e<o;++e){const t=n[e],a=r[e];if(t!==a){if(U(t.geometry)!==U(a.geometry)){i.push({startRow:e,endRow:o});break}i.push({startRow:e,endRow:e+1})}}return i}const ee=Object.freeze(new Set(["addPosition","removePosition","addFeature","finishMovePosition","scaled","rotated","translated","extruded","split"]));class te extends I.nk{onPointerMove(e){this.state.lastPointerMoveEvent=e;this.getActiveMode().handlePointerMove(e,this.getModeProps(this.props))}updateState(e){e.changeFlags.propsOrDataChanged&&super.updateState(e)}setState(e){if(this.props.mode===re.modify)return super.setState(e);for(const t in e)if("cursor"!==t||e.cursor!==this.state.cursor)return super.setState(e)}}class ne extends R.ViewMode{handlePointerMove(e,t){var n;const r=0!==(null===(n=null==e?void 0:e.picks)||void 0===n?void 0:n.length);t.onUpdateCursor(r?"pointer":null)}handleClick(e,t){var n;if(!(0!==(null==e?void 0:e.picks.length)))return;const r=new Set(t.selectedIndexes),i=new Set(e.picks.map((e=>e.index))),o=function(e,t){for(const n of t)if(!e.has(n))return!1;return!0}(r,i)?function(...e){const t=new Set(e[0]);for(const n of e.slice(1))for(const e of n)t.delete(e);return t}(r,i):function(...e){return new Set(e.flatMap((e=>[...e])))}(r,i);null===(n=t.onEdit)||void 0===n||n.call(t,{updatedData:t.data,editType:"selectFeature",editContext:{selectedIndices:[...o]}})}}R.utils.getEditHandlesForGeometry=v(R.utils.getEditHandlesForGeometry);const re=Object.seal({view:R.ViewMode,select:ne,modify:R.ModifyMode,transform:R.TransformMode,linestring:R.DrawLineStringMode,point:R.DrawPointMode,polygon:R.DrawPolygonMode,lasso:R.DrawPolygonByDraggingMode}),ie=[re.view,re.select];function oe({deckgl:e,mapgl:t,layers:n,editor:r}){const o=(0,a.useRef)(null),[c,d]=ae();let{blendingMode:f,controller:h,onClick:p,...g}=e;const y={...e.parameters,...f&&F(f)},[m,b]=(0,a.useState)(0),v=n.some((e=>"TripsLayer"===e.type));se(v,(e=>b(e)));const j=n.map((e=>null!=e.type?e.renderLayer(m):null)),x=q(r),k=null!=r&&!["view","select"].includes(r.mode);return k&&h&&(h={...h,doubleClickZoom:!1}),(0,i.jsxs)(a.Fragment,{children:[(0,i.jsx)(l.Z,{Deck:w,ref:o,...{...g,parameters:y},layers:[...j,x],onHover:k?void 0:d,onClick:k?void 0:p,getCursor:null==x?void 0:x.getCursor.bind(x),children:(0,i.jsx)(s.Z,{id:"map",controller:h,repeat:!0,children:t.mapStyle&&(0,i.jsx)(u.D5,{...t})})}),c&&(0,i.jsx)(_,{info:c})]})}const ae=()=>{const[e,t]=(0,a.useState)(null);return[e,(0,a.useCallback)((e=>{if(!e.picked||!e.layer.props.tooltip||e.layer instanceof c.Z)return t(null);t(e)}),[])]},se=(e,t)=>{const n=(0,a.useRef)(0),r=(0,a.useRef)(Date.now()),i=()=>{t(Date.now()-r.current),n.current=window.requestAnimationFrame(i)};(0,a.useEffect)((()=>{if(e)return n.current=window.requestAnimationFrame(i),()=>window.cancelAnimationFrame(n.current)}),[e])};var le=n(7786),ce=n(9080),ue=n(803),de=n(1956),fe=n(5395);const he=[0,0,0,255];function pe([e,t,n,r=255]){return`rgba(${e}, ${t}, ${n}, ${r/255})`}function ge(e,t){return Array.isArray(e)?t||4!==e.length?((t=null!=t?t:[])[0]=e[0],t[1]=e[1],t[2]=e[2],t[3]=3===e.length?e[3]:255,t):e:"string"==typeof e?(function(e,t){if(7===e.length){const n=parseInt(e.substring(1),16);t[0]=Math.floor(n/65536),t[1]=Math.floor(n/256%256),t[2]=n%256,t[3]=255}else if(9===e.length){const n=parseInt(e.substring(1),16);t[0]=Math.floor(n/16777216),t[1]=Math.floor(n/65536%256),t[2]=Math.floor(n/256%256),t[3]=n%256}}(e,t=null!=t?t:[]),t):he}var ye=n(4634),me=n(4177),be=n(458),ve=n(5801),we=n(3613),je=n(602),xe=n(8973),ke=n(2625);function Le(e){return null!==e&&"object"==typeof e&&"accessor"===e.type}function Oe(e){return Le(e)&&"scale"in e}var Se=n(3693),Pe=n(4717),Ce=n(6867),Me=n(3326),Te=n(2112),Ne=n(7693),Ee=n(8569),_e=n(1435);class Ae extends Se.Z{initializeState(){if(!function(e){return Ze.some((t=>e instanceof t))}(this))return;const e=this,t=e.getAttributeManager();t&&t.addInstanced({pickingColors:{type:A.default.UNSIGNED_BYTE,size:3,accessor:(t,{index:n,data:r,target:i})=>{var o,a,s;if(j(r)&&Array.isArray(r.indices))return e.encodePickingColor(r.indices.indexOf(r.indices[n]),i);const l=null===(a=null===(o=null==t?void 0:t.__source)||void 0===o?void 0:o.parent)||void 0===a?void 0:a.props.data;return j(l)&&Array.isArray(l.indices)?e.encodePickingColor(l.indices.indexOf(l.indices[t.__source.index]),i):e.encodePickingColor(null!==(s=null==t?void 0:t.__source.index)&&void 0!==s?s:n,i)},shaderAttributes:{pickingColors:{divisor:0},instancePickingColors:{divisor:1}}}})}}const Ze=[Pe.Z,Ce.Z,Me.Z,Te.Z,Ne.Z,Ee.Z,_e.Z];const Fe=v((function(e){const t=function(e){return Object.entries(e.geometry).filter((([,e])=>/MULTI/.test(e))).map((([e,t])=>({name:e,type:t})))}(e);return 0===t.length?e:t.reduce(x,e)})),De=v(ge),Re=v((function(e,t){const n=function({col:e,dataType:t},n){if("highlightColor"===n)switch(t){case"table":return function(e){return({index:t,layer:n})=>ge(n.props.data.frame[e][t])}(e);case"object":return function(e){return({object:t})=>ge(t[e])}(e);case"geojson":return function(e){return({object:t})=>ge(t.properties[e])}(e);default:throw TypeError(`${t} not supported`)}if(n.endsWith("Color"))switch(t){case"table":return function(e){return(t,{index:n,data:r,target:i})=>ge(r.frame[e][n],i)}(e);case"object":return function(e){return(t,{target:n})=>ge(t[e],n)}(e);case"geojson":return function(e){return(t,{target:n})=>ge(t.properties[e],n)}(e);default:throw TypeError(`${t} not supported`)}switch(t){case"table":return function(e){return(t,{index:n,data:r})=>r.frame[e][n]}(e);case"object":return function(e){return t=>t[e]}(e);case"geojson":return function(e){return t=>t.properties[e]}(e);default:throw TypeError(`${t} not supported`)}}(e,t);return{...e,getData:n}})),Ie=v((function(e,t){"palette"in e&&(e.range=e.palette.map((e=>ge(e))),e.unknown=ge(e.unknown));const n=function(e){switch(e.scale){case"linear":return(0,ye.Z)().domain(e.domain).range(e.range).unknown(e.unknown).clamp(!0);case"power":return(0,me.ZP)().exponent(e.exponent).domain(e.domain).range(e.range).unknown(e.unknown).clamp(!0);case"log":return(0,be.Z)().base(e.base).domain(e.domain).range(e.range).unknown(e.unknown).clamp(!0);case"symlog":return(0,ve.Z)().domain(e.domain).range(e.range).unknown(e.unknown).clamp(!0);case"identity":return(0,we.Z)().unknown(e.unknown);case"threshold":case"quantile":return(0,je.Z)().domain(e.domain).range(e.range).unknown(e.unknown);case"category":return(0,xe.Z)().domain(e.domain).range(e.range).unknown(e.unknown);case"quantize":return(0,ke.Z)().domain(e.domain).range(e.range).unknown(e.unknown);default:throw TypeError(`scale ${e.scale} not supported`)}}(e),r="highlightColor"===t?function({col:e,dataType:t},n){switch(t){case"table":return function(e,t){return({index:n,layer:r})=>t(r.props.data.frame[e][n])}(e,n);case"object":return function(e,t){return({object:n})=>t(n[e])}(e,n);case"geojson":return function(e,t){return({object:n})=>t(n.properties[e])}(e,n);default:throw TypeError(`${t} not supported`)}}(e,n):function({col:e,dataType:t},n){switch(t){case"table":return function(e,t){return(n,{index:r,data:i})=>t(i.frame[e][r])}(e,n);case"object":return function(e,t){return n=>t(n[e])}(e,n);case"geojson":return function(e,t){return n=>t(n.properties[e])}(e,n);default:throw TypeError(`${t} not supported`)}}(e,n);return{...e,name:t,getData:r,scaleData:n}}));class Ue{constructor({type:e,...t}){var n,r;Object.defineProperty(this,"type",{enumerable:!0,configurable:!0,writable:!0,value:void 0}),Object.defineProperty(this,"props",{enumerable:!0,configurable:!0,writable:!0,value:void 0}),Object.defineProperty(this,"scales",{enumerable:!0,configurable:!0,writable:!0,value:void 0});const i=Object.entries(t),o=function(e){const t=e.filter(He).map((([e,t])=>[e,De(t)])),n=e.find((([e])=>"colorRange"===e));n&&t.push([n[0],n[1].map((e=>De(e)))]);return t}(i),a=function(e){return e.filter((([,e])=>Le(e))).map((([e,t])=>[e,Oe(t)?Ie(t,e):Re(t,e)]))}(i);this.type=e;const s=Object.fromEntries([...i,...o,...a.map((([e,t])=>[e,t.getData])),...Ge(i),["visible",null===(n=t.visible)||void 0===n||n],["updateTriggers",We(a)],["parameters",(l=t.parameters,c=t.blendingMode,{...l,...F(c)})]]);var l,c;j(s.data)&&(s.data=Fe(s.data),s.extensions=[new Ae,...null!==(r=s.extensions)&&void 0!==r?r:[]]),"TileLayer"===e&&(s.renderSubLayers=e=>{const{bbox:{west:t,south:n,east:r,north:i},x:o,y:a,z:s}=e.tile;return new fe.Z({...e,data:[{z:s,x:o,y:a}],image:e.data,bounds:[t,n,r,i]})}),this.props=s,this.scales=a.filter((([,e])=>Oe(e))).map((([,e])=>e)),"TextLayer"===e&&"fonts"in document&&document.fonts.load(`16px ${t.fontFamily}`)}static create(e){return new Ue(e)}renderLayer(e){if("TripsLayer"===this.type&&void 0!==e){const t=this.props,{loopLength:n,animationSpeed:r}=t,i=n/r,o=e/1e3%i/i;t.currentTime=o*n}return new r[this.type]({...this.props})}renderLegend(){const e=this.scales.filter((e=>e.legend));return{id:this.props.id,name:this.props.name,scales:e}}renderSelector(){var e;return{id:this.props.id,groupName:this.props.groupName,name:this.props.name,visible:null===(e=this.props.visible)||void 0===e||e}}}function He([e,t]){return e.endsWith("Color")&&(Array.isArray(t)||"string"==typeof t)}function We(e){const t=e=>{const{getData:t,scaleData:n,palette:r,...i}=e;return i},n=e.map((([e,n])=>[e,t(n)]));return Object.fromEntries(n)}function Ge(e){return e.filter((([e])=>"getColorWeight"===e||"getElevationWeight"===e)).filter((([,e])=>null!==e&&"function"!=typeof e&&!Le(e))).map((([e,t])=>[e,()=>t]))}var Ve=n(6082),ze=n(912),Be=n(2372),$e=n(8426);const Je="U44LhpKlV8r1Vu1ZoZA3",qe="XF770nELUcE_0zxo_aOg",Ye="HYRhC2aw1PSMYGCz2bDb",Qe="YNou4FYlc3N3GhFp2BkO",Xe="f44NGqZZGn4de9S3oTHN",Ke="xqKP289MUJ06Hgb3CjoW",et="XctZC_fZAMvRMiHPlt9G",tt="ly9kEH8MpXynhBX6Fhcj",nt="iM2OiMQz6z_NtAQZZyPS",rt="_8r8348KPS_nzNLR_CV_",it="tzkFrkEU5cB_jY6zcuua",ot=Date.now();function at({className:e,tooltip:t,onClick:n,children:r}){return(0,i.jsx)("button",{className:e,type:"button",onClick:n,title:t,children:r})}function st({layers:e,onVisibilityChange:t}){const n=y(e,(e=>{var t;return null!==(t=e.groupName)&&void 0!==t?t:`${e.name}-${ot}`})),r=(n,r,i)=>{if(i){const i=!e.filter((e=>!n.includes(e))).some((e=>e.visible));return t(e.map((e=>({...e,visible:n.includes(e)?r:i}))))}t(n.map((e=>({...e,visible:r}))))},[o,s]=(0,a.useState)(!1),l=()=>s((e=>!e));return o?(0,i.jsxs)("div",{className:qe,children:[(0,i.jsx)("div",{className:Ye,children:(0,i.jsxs)(at,{className:Qe,onClick:l,tooltip:"Close",children:[(0,i.jsx)(Ve.Z,{className:it,fontSize:"small"}),(0,i.jsx)("span",{className:Xe,children:"Layers"})]})}),(0,i.jsx)("div",{className:Ke,children:Array.from(n.entries(),(([e,t,[{groupName:n}]=t])=>(0,i.jsx)(lt,{group:n,layers:t,onChange:r},e)))})]}):(0,i.jsx)(at,{className:Je,tooltip:"Layer selector",onClick:l,children:(0,i.jsx)(Ve.Z,{className:it,fontSize:"small"})})}function lt({group:e,layers:t,onChange:n}){const r=Array.from(y(t,(e=>e.name)),(([e,t])=>(0,i.jsx)(ct,{name:e,layers:t,onChange:n},e)));return e?(0,i.jsxs)(a.Fragment,{children:[(0,i.jsx)(ct,{name:e,layers:t,onChange:n}),(0,i.jsx)("div",{className:et,children:r})]}):(0,i.jsx)(a.Fragment,{children:r})}function ct({name:e,layers:t,onChange:n}){const r=function(e){let t=e[0].visible;for(const n of e)if(n.visible!==t)return null;return t}(t),o=null===r,s=(0,a.useRef)(null);(0,a.useEffect)((()=>{s.current&&(s.current.indeterminate=o)}),[o]);const l=(0,a.useRef)((()=>!1)),c=r?ze.Z:o?Be.Z:$e.Z,u=m(tt,r||o?nt:null);return(0,i.jsxs)("label",{className:u,children:[(0,i.jsx)("input",{ref:s,className:rt,type:"checkbox",onChange:()=>{l.current()?n(t,!0,!0):l.current=ut((()=>n(t,!r,!1)),200)},checked:null==r||r}),(0,i.jsx)(c,{fontSize:"small",className:it}),(0,i.jsx)("span",{className:Xe,children:e})]})}const ut=(e,t=200)=>{const n={current:0};let r=0;const i=o=>{if(r||(r=o),o-r>t)return n.current=0,void e();n.current=globalThis.requestAnimationFrame(i)};return n.current=globalThis.requestAnimationFrame(i),()=>0!==n.current&&(globalThis.cancelAnimationFrame(n.current),n.current=0,!0)},dt="lWOwchFb6W2NpcWR4ZQS",ft="mIJjIoOSsjLZMp591rN0",ht="OULly07OGkLPRiEDgp00",pt="oxctK5Tcknb3syUfT7xg",gt="KEbGPBIjLXnjAiUTu8eP",yt="MBBFrOSR5F_grZcyOCp0",mt="l_4PaMO7BWOn4DcLN5Oh",bt="aWzYqDozdq6Vl4QuIJ1y",vt="xaprV4ANDgRiE5ai1hUl",wt="f6SnauerJY75ZqNAuK56",jt=16;function xt({layers:e}){return 0===e.length?null:(0,i.jsx)("div",{className:dt,children:e.map((e=>(0,i.jsx)(kt,{...e},e.id)))})}function kt({name:e,scales:t}){return 0===t.length?null:(0,i.jsxs)("div",{className:ft,children:[(0,i.jsx)("div",{className:ht,title:e,children:e}),t.map((e=>(0,i.jsx)(Lt,{...e},e.name)))]})}function Lt(e){var t;const n=e.name.replace(/^get/,"").replace(/([A-Z])/g," $1").toLowerCase();const r="palette"in e;const o=function(e){return"linear"===e.scale||"power"===e.scale||"log"===e.scale||"symlog"===e.scale}(e),a=function(e){return"threshold"===e.scale||"quantile"===e.scale||"quantize"===e.scale}(e);return(0,i.jsxs)("div",{className:pt,children:[(0,i.jsx)("div",{className:gt,children:n}),(0,i.jsx)("span",{className:yt,children:"by "}),(0,i.jsx)("span",{className:mt,title:e.col,children:null!==(t=e.scaleBy)&&void 0!==t?t:e.col}),r&&o&&(0,i.jsx)(Ot,{...e}),r&&a&&(0,i.jsx)(St,{...e}),r&&"category"===e.scale&&(0,i.jsx)(Pt,{...e})]})}const Ot=({ticks:e,scaleData:t})=>{const n=e.map(((e,t)=>t)).slice(1,-1),r=jt*(e.length-1),o=r+11+1;return(0,i.jsxs)("svg",{className:bt,height:o,shapeRendering:"crispEdges",children:[(0,i.jsxs)("svg",{y:5,children:[(0,i.jsx)("image",{width:20,height:r,href:Mt(t),preserveAspectRatio:"none"}),n.map((e=>(0,i.jsx)("line",{className:wt,x2:20,y1:jt*e,y2:jt*e},e)))]}),(0,i.jsx)(Ct,{ticks:e,y:-2})]})},St=({ticks:e,range:t})=>{const n=t.map(pe),r=jt*(e.length-1)+11+1;return(0,i.jsxs)("svg",{className:bt,height:r,shapeRendering:"crispEdges",children:[(0,i.jsx)("svg",{y:5,children:n.map(((e,t)=>(0,i.jsx)("rect",{width:20,height:jt,y:t*jt,fill:e},t)))}),(0,i.jsx)(Ct,{ticks:e,y:-2})]})};function Pt({ticks:e,range:t,unknownTick:n,unknown:r}){const o=n?[...t,r]:t,a=n?[...e,n]:e,s=o.map(pe),l=jt*a.length;return(0,i.jsxs)("svg",{className:bt,height:l,children:[(0,i.jsx)("svg",{children:s.map(((e,t)=>(0,i.jsx)("rect",{width:20,height:14,y:1+t*jt,fill:e},t)))}),(0,i.jsx)(Ct,{ticks:a})]})}function Ct({ticks:e,x:t=28,y:n=0}){return(0,i.jsx)("svg",{x:t,y:n,children:e.map(((e,t)=>(0,i.jsx)("text",{className:vt,y:jt*t,dy:11,children:String(e)},t)))})}function Mt(e,t=200){const n=e.range().length,r=[...Array(n).keys()].map((e=>e/(n-1))),i=e.copy().range(r).invert,o=document.createElement("canvas"),a=o.getContext("2d");o.width=1,o.height=t;for(let n=0;n<t;n++)a.fillStyle=pe(e(i(n/t))),a.fillRect(0,n,1,1);return o.toDataURL()}var Tt=n(7046),Nt=n(6533),Et=n(9292),_t=n(9744),At=n(9758),Zt=n(7089),Ft=n(1610),Dt=n(904),Rt=n(5482),It=n(7226),Ut=n(5579),Ht=n(9702),Wt=n(2149),Gt=n(6761);const Vt="S_Jw5xlS4ysjLfEnG1_V",zt="ulA2RQmkQhSnak9JlXnZ",Bt="aIE33mXFqOBosVEFBrb8",$t="llmi5hyDHtcHqa2r__su",Jt="ilhkc5o5ZlSd4IaGytLF",qt=()=>{};function Yt({mode:e,geojson:t,selectedFeatureIndices:n,onSetMode:r=qt,onDownload:o=qt,onUpload:a=qt,onDeleteSelected:s=qt,canUndo:l,canRedo:c,onUndo:u=qt,onRedo:d=qt}){const f=(null==n?void 0:n.length)>0,h=(null==t?void 0:t.features.length)>0;return(0,i.jsxs)("div",{className:Vt,children:[(0,i.jsxs)("div",{className:zt,children:[(0,i.jsx)(Qt,{name:"View",icon:Dt.Z,iconStyle:{transform:"scale(0.9)"},active:"view"===e,onClick:()=>r("view")}),(0,i.jsx)(Qt,{name:"Select",icon:Rt.Z,active:"select"===e,disabled:!h,onClick:()=>r("select")})]}),(0,i.jsxs)("div",{className:zt,children:[(0,i.jsx)(Qt,{name:"Modify",icon:Et.Z,active:"modify"===e,disabled:!f,onClick:()=>r("modify")}),(0,i.jsx)(Qt,{name:"Transform",icon:It.Z,active:"transform"===e,disabled:!f,onClick:()=>r("transform")}),(0,i.jsx)(Qt,{name:"Point",icon:Ut.Z,active:"point"===e,onClick:()=>r("point")}),(0,i.jsx)(Qt,{name:"LineString",icon:_t.Z,active:"linestring"===e,onClick:()=>r("linestring")}),(0,i.jsx)(Qt,{name:"Polygon",icon:Nt.Z,active:"polygon"===e,onClick:()=>r("polygon")}),(0,i.jsx)(Qt,{name:"Lasso",icon:Tt.Z,active:"lasso"===e,onClick:()=>r("lasso")})]}),(0,i.jsxs)("div",{className:zt,children:[(0,i.jsx)(Qt,{name:"Download",icon:Ht.Z,disabled:!h,onClick:()=>o(t)}),(0,i.jsx)(Qt,{name:"Upload",icon:Wt.Z,disabled:!h,onClick:()=>a(t)})]}),(0,i.jsxs)("div",{className:zt,children:[(0,i.jsx)(Qt,{name:"Undo",icon:At.Z,disabled:!l,onClick:u}),(0,i.jsx)(Qt,{name:"Redo",icon:Zt.Z,disabled:!c,onClick:d})]}),(0,i.jsx)("div",{className:zt,children:(0,i.jsx)(Qt,{name:"Delete",icon:Gt.Z,disabled:!f,onClick:()=>s(n)})})]})}function Qt({name:e,onClick:t=qt,disabled:n=!1,active:r=!1,icon:o,iconStyle:a}){const s=m(Bt,r?$t:null);return(0,i.jsx)("button",{className:s,onClick:t,title:e,disabled:n,children:o&&(0,i.jsx)(Ft.Z,{component:o,className:Jt,fontSize:"small",style:a})})}const Xt="rdeck",Kt="XTuYKSlBcC933W4sKWtC",en="kQnelQ4hkAJEJHLO0NJI",tn="hQbOOdEZw0LO0llGKVqS",nn="cSol54mlVTgAnRzj_GUM";function rn({theme:e,deckgl:t,mapgl:n,layers:r,lazyLoad:o=!1,layerSelector:s=!1,onLayerVisibilityChange:l,editor:c}){var u;const d=null!==(u=null==r?void 0:r.map(Ue.create))&&void 0!==u?u:[],f=(0,a.useRef)(null),h=function(e,t){const[n,r]=(0,a.useState)(!1);return(0,a.useEffect)((()=>{if(t&&e.current){const t=new IntersectionObserver((e=>{r(e[0].isIntersecting)}),{threshold:0});return t.observe(e.current),()=>t.disconnect()}}),[t,e]),n}(f,o),p=!o||h;return(0,i.jsxs)("div",{ref:f,className:m(Xt,e),children:[(0,i.jsx)("div",{className:m(Kt,en),children:s&&(0,i.jsx)(st,{layers:d.filter((e=>e.props.visibilityToggle)).map((e=>e.renderSelector())).reverse(),onVisibilityChange:l})}),(0,i.jsx)("div",{className:m(Kt,tn),children:(0,i.jsx)(xt,{layers:d.filter((e=>e.props.visible)).map((e=>e.renderLegend())).reverse()})}),(0,i.jsx)("div",{className:m(Kt,nn),children:c&&(0,i.jsx)(Yt,{...c})}),p&&(0,i.jsx)(oe,{deckgl:t,mapgl:n,layers:d,editor:c})]})}var on=n(6935);function an(e){const t=e instanceof on.Z?e:new on.Z(e),n=h(t,"longitude","latitude","zoom","bearing","pitch","altitude");return{bounds:t.getBounds(),viewState:{...n,center:t.unprojectFlat(t.center)}}}function sn(e,t){const n=ln(e);for(const[r,i]of n)i.configurable&&(i.writable?cn(e,r,i,t):"function"==typeof i.set&&un(e,r,i,t));if(Object.getPrototypeOf({})===Object.getPrototypeOf(e))return e;const r=ln(Object.getPrototypeOf(e));for(const[n,i]of r)i.configurable&&"function"==typeof i.set&&un(e,n,i,t);return e}function ln(e){return Object.entries(Object.getOwnPropertyDescriptors(e))}function cn(e,t,{value:n},r){return Reflect.defineProperty(e,t,{get:()=>n,set(e){Object.is(e,n)||(n=e,null==r||r({[t]:e}))}})}function un(e,t,n,r){return Reflect.defineProperty(e,t,{...n,set(i){var o,a;const s=null===(o=n.get)||void 0===o?void 0:o.call(e);Object.is(i,s)||(null===(a=n.set)||void 0===a||a.call(e,i),null==r||r({[t]:i}))}})}const dn={longitude:0,latitude:0,zoom:0,pitch:0,bearing:0};class fn{constructor(e){Object.defineProperty(this,"useDevicePixels",{enumerable:!0,configurable:!0,writable:!0,value:void 0}),Object.defineProperty(this,"pickingRadius",{enumerable:!0,configurable:!0,writable:!0,value:void 0}),Object.defineProperty(this,"blendingMode",{enumerable:!0,configurable:!0,writable:!0,value:void 0}),Object.defineProperty(this,"effects",{enumerable:!0,configurable:!0,writable:!0,value:void 0}),Object.defineProperty(this,"controller",{enumerable:!0,configurable:!0,writable:!0,value:void 0}),Object.defineProperty(this,"initialViewState",{enumerable:!0,configurable:!0,writable:!0,value:dn}),Object.defineProperty(this,"initialBounds",{enumerable:!0,configurable:!0,writable:!0,value:void 0}),Object.defineProperty(this,"onViewStateChange",{enumerable:!0,configurable:!0,writable:!0,value:void 0}),Object.defineProperty(this,"onClick",{enumerable:!0,configurable:!0,writable:!0,value:void 0}),Object.assign(this,e)}}var hn,pn,gn,yn,mn=function(e,t,n,r){if("a"===n&&!r)throw new TypeError("Private accessor was defined without a getter");if("function"==typeof t?e!==t||!r:!t.has(e))throw new TypeError("Cannot read private member from an object whose class did not declare it");return"m"===n?r:"a"===n?r.call(e):r?r.value:t.get(e)},bn=function(e,t,n,r,i){if("m"===r)throw new TypeError("Private method is not writable");if("a"===r&&!i)throw new TypeError("Private accessor was defined without a setter");if("function"==typeof t?e!==t||!i:!t.has(e))throw new TypeError("Cannot write private member to an object whose class did not declare it");return"a"===r?i.call(e,n):i?i.value=n:t.set(e,n),n};const vn=Object.freeze({type:"FeatureCollection",features:[]});class wn extends class{constructor(e){Object.defineProperty(this,"mode",{enumerable:!0,configurable:!0,writable:!0,value:"view"}),Object.defineProperty(this,"geojson",{enumerable:!0,configurable:!0,writable:!0,value:vn}),Object.defineProperty(this,"selectedFeatureIndices",{enumerable:!0,configurable:!0,writable:!0,value:[]}),Object.defineProperty(this,"onSetMode",{enumerable:!0,configurable:!0,writable:!0,value:e=>this.setMode(e)}),Object.defineProperty(this,"onSelectFeatures",{enumerable:!0,configurable:!0,writable:!0,value:e=>this.selectFeatures(e)}),Object.defineProperty(this,"onSetGeoJson",{enumerable:!0,configurable:!0,writable:!0,value:e=>this.setGeoJson(e)}),Object.defineProperty(this,"onDeleteSelected",{enumerable:!0,configurable:!0,writable:!0,value:e=>this.deleteSelected(e)}),Object.defineProperty(this,"onUpload",{enumerable:!0,configurable:!0,writable:!0,value:e=>{}}),Object.defineProperty(this,"onDownload",{enumerable:!0,configurable:!0,writable:!0,value:e=>this.download(e)}),Object.defineProperty(this,"upload",{enumerable:!0,configurable:!0,writable:!0,value:void 0}),Object.assign(this,e)}setState(e={}){Object.assign(this,e)}setMode(e){var t,n;switch(e){case"modify":this.mode=(null===(t=this.selectedFeatureIndices)||void 0===t?void 0:t.length)?"modify":"view";break;case"select":this.mode=(null===(n=this.geojson)||void 0===n?void 0:n.features.length)?"select":"view";break;default:this.mode=e}}selectFeatures(e){this.selectedFeatureIndices=e}setGeoJson(e){this.geojson=e}deleteSelected(e){const t=this.geojson.features.filter(((t,n)=>!e.includes(n)));Object.assign(this,{mode:["modify","transform"].includes(this.mode)?"view":this.mode,selectedFeatureIndices:[],geojson:{...this.geojson,features:t}})}download(e){const t=new Blob([JSON.stringify(e)],{type:"application/geo+json"}),n=document.createElement("a");n.href=URL.createObjectURL(t),n.download="rdeck.geojson",n.click(),this.setMode("view")}}{constructor(e){super(e),hn.add(this),pn.set(this,-1),gn.set(this,[]),Object.defineProperty(this,"onUndo",{enumerable:!0,configurable:!0,writable:!0,value:()=>this.undo()}),Object.defineProperty(this,"onRedo",{enumerable:!0,configurable:!0,writable:!0,value:()=>this.redo()}),mn(this,hn,"m",yn).call(this)}get canUndo(){return mn(this,pn,"f")>0}get canRedo(){return mn(this,pn,"f")<mn(this,gn,"f").length-1}undo(){this.canUndo&&(bn(this,pn,mn(this,pn,"f")-1,"f"),Object.assign(this,mn(this,gn,"f")[mn(this,pn,"f")]))}redo(){this.canRedo&&(bn(this,pn,mn(this,pn,"f")+1,"f"),Object.assign(this,mn(this,gn,"f")[mn(this,pn,"f")]))}setState(e){super.setState(e),mn(this,gn,"f")[mn(this,pn,"f")]=jn(this)}setMode(e){super.setMode(e),mn(this,hn,"m",yn).call(this)}selectFeatures(e){super.selectFeatures(e),mn(this,hn,"m",yn).call(this)}setGeoJson(e){super.setGeoJson(e),mn(this,hn,"m",yn).call(this)}deleteSelected(e){super.deleteSelected(e),mn(this,hn,"m",yn).call(this)}}function jn({mode:e,geojson:t,selectedFeatureIndices:n}){return{mode:e,geojson:t,selectedFeatureIndices:n}}pn=new WeakMap,gn=new WeakMap,hn=new WeakSet,yn=function(e=this){const t=jn(e);(function(e,t){if(Object.is(e,t))return!0;if(null==e||null==t)return!1;const n=Object.keys(e);if(n.length!==Object.keys(t).length)return!1;for(const r of n)if(!Object.is(e[r],t[r])||t.hasOwnProperty(r))return!1;return!0})(t,mn(this,gn,"f")[mn(this,pn,"f")])||(mn(this,gn,"f").length=mn(this,pn,"f")+1,bn(this,pn,mn(this,gn,"f").push(t)-1,"f"))};class xn{constructor(e){Object.defineProperty(this,"mapboxAccessToken",{enumerable:!0,configurable:!0,writable:!0,value:void 0}),Object.defineProperty(this,"mapStyle",{enumerable:!0,configurable:!0,writable:!0,value:void 0}),Object.defineProperty(this,"reuseMaps",{enumerable:!0,configurable:!0,writable:!0,value:!0}),Object.assign(this,e)}}var kn,Ln,On,Sn,Pn=function(e,t,n,r){if("a"===n&&!r)throw new TypeError("Private accessor was defined without a getter");if("function"==typeof t?e!==t||!r:!t.has(e))throw new TypeError("Cannot read private member from an object whose class did not declare it");return"m"===n?r:"a"===n?r.call(e):r?r.value:t.get(e)},Cn=function(e,t,n,r,i){if("m"===r)throw new TypeError("Private method is not writable");if("a"===r&&!i)throw new TypeError("Private accessor was defined without a setter");if("function"==typeof t?e!==t||!i:!t.has(e))throw new TypeError("Cannot write private member to an object whose class did not declare it");return"a"===r?i.call(e,n):i?i.value=n:t.set(e,n),n};class Mn{constructor(e={},t){Object.defineProperty(this,"theme",{enumerable:!0,configurable:!0,writable:!0,value:"kepler"}),kn.set(this,new fn),Ln.set(this,new xn),Object.defineProperty(this,"layers",{enumerable:!0,configurable:!0,writable:!0,value:[]}),Object.defineProperty(this,"layerSelector",{enumerable:!0,configurable:!0,writable:!0,value:!1}),Object.defineProperty(this,"lazyLoad",{enumerable:!0,configurable:!0,writable:!0,value:!1}),On.set(this,null),Object.defineProperty(this,"onChange",{enumerable:!0,configurable:!0,writable:!0,value:void 0}),Sn.set(this,(()=>{var e;return null===(e=this.onChange)||void 0===e?void 0:e.call(this)})),this.setState(e),Reflect.defineProperty(this,"onChange",{configurable:!1,enumerable:!1,value:t,writable:!0}),this.setLayerVisibility=this.setLayerVisibility.bind(this),sn(this,Pn(this,Sn,"f"))}get deckgl(){return Pn(this,kn,"f")}set deckgl(e){Cn(this,kn,sn(new fn(e),Pn(this,Sn,"f")),"f")}get mapgl(){return Pn(this,Ln,"f")}set mapgl(e){Cn(this,Ln,sn(new xn(e),Pn(this,Sn,"f")),"f")}get editor(){return Pn(this,On,"f")}set editor(e){null==e?Cn(this,On,null,"f"):null==Pn(this,On,"f")?Cn(this,On,sn(new wn(e),Pn(this,Sn,"f")),"f"):Pn(this,On,"f").setState(e)}setState({deckgl:e,mapgl:t,editor:n,...r}={}){Object.assign(this,{...r,deckgl:{...this.deckgl,...e},mapgl:{...this.mapgl,...t}}),void 0!==n&&(this.editor=null!=n?{...this.editor,...n}:null)}upsertLayer(e){var t,n,r;const i=this.layers.find((t=>t.id===e.id));if(null==i)return void(this.layers=[...this.layers,e]);const o={...i,...e,visible:null!==(t=e.visible)&&void 0!==t?t:null==i?void 0:i.visible,data:null!==(r=null!==(n=e.data)&&void 0!==n?n:null==i?void 0:i.data)&&void 0!==r?r:null};this.layers=this.layers.map((e=>e===i?o:e))}setLayerVisibility(e){if(0===e.length)return;this.layers=this.layers.map((t=>{const n=e.find((e=>((e,t)=>{const n=e.name===t.name,r=e.groupName===t.groupName;return n&&r||null==e.name&&null!=e.groupName&&r})(e,t)&&e.visible!==t.visible));return n?{...t,visible:n.visible}:t}))}}kn=new WeakMap,Ln=new WeakMap,On=new WeakMap,Sn=new WeakMap;var Tn,Nn,En,_n,An,Zn,Fn=function(e,t,n,r,i){if("m"===r)throw new TypeError("Private method is not writable");if("a"===r&&!i)throw new TypeError("Private accessor was defined without a setter");if("function"==typeof t?e!==t||!i:!t.has(e))throw new TypeError("Cannot write private member to an object whose class did not declare it");return"a"===r?i.call(e,n):i?i.value=n:t.set(e,n),n},Dn=function(e,t,n,r){if("a"===n&&!r)throw new TypeError("Private accessor was defined without a getter");if("function"==typeof t?e!==t||!r:!t.has(e))throw new TypeError("Cannot read private member from an object whose class did not declare it");return"m"===n?r:"a"===n?r.call(e):r?r.value:t.get(e)};class Rn{constructor(e,t){Tn.set(this,void 0),Nn.set(this,void 0),En.set(this,void 0),_n.set(this,((e,t)=>{var n,r,i;if(null===(r=(n=Dn(this,En,"f").deckgl).onClick)||void 0===r||r.call(n,e,t),HTMLWidgets.shinyMode){const t={coordinate:e.coordinate,...an(e.viewport),layer:h(null===(i=e.layer)||void 0===i?void 0:i.props,"id","name","groupName"),object:P(e)};Shiny.setInputValue(`${this.element.id}_click`,t,{priority:"event"})}})),An.set(this,(e=>{var t,n;if(null===(n=(t=Dn(this,En,"f").deckgl).onViewStateChange)||void 0===n||n.call(t,e),HTMLWidgets.shinyMode){const t=an(e.viewState);Shiny.setInputValue(`${this.element.id}_viewstate`,t,{priority:"event"})}})),Zn.set(this,(e=>{HTMLWidgets.shinyMode&&Shiny.setInputValue(`${this.element.id}_editorupload`,{geojson:JSON.stringify(e)})})),Fn(this,Nn,e,"f"),Fn(this,Tn,(0,o.s)(e),"f"),Fn(this,En,new Mn(t,(()=>this.render())),"f"),HTMLWidgets.shinyMode&&(Shiny.addCustomMessageHandler(`${e.id}:layer`,(e=>{this.state.upsertLayer(e)})),Shiny.addCustomMessageHandler(`${e.id}:deck`,(e=>{this.state.setState(e)})))}get element(){return Dn(this,Nn,"f")}get state(){return Dn(this,En,"f")}render(){let{deckgl:e,mapgl:t,editor:n,...r}=Dn(this,En,"f");e={...e,onClick:Dn(this,_n,"f"),onViewStateChange:Dn(this,An,"f")},null!=n&&(n={...n,canUndo:n.canUndo,canRedo:n.canRedo,onUpload:e=>{Dn(this,Zn,"f").call(this,e),null==n||n.setMode("view")}}),null!=e.initialBounds&&delete e.initialViewState,Dn(this,Tn,"f").render((0,i.jsx)(a.StrictMode,{children:(0,i.jsx)(rn,{...{...r,deckgl:e,mapgl:t,editor:n,onLayerVisibilityChange:this.state.setLayerVisibility}})}))}setLayerVisibility(e){return Dn(this,En,"f").setLayerVisibility(e)}}Tn=new WeakMap,Nn=new WeakMap,En=new WeakMap,_n=new WeakMap,An=new WeakMap,Zn=new WeakMap;const In={name:"rdeck",type:"output",factory(e,t,n){let r=null;return{get instance(){return r},renderValue(t){r=new Rn(e,t),r.render()},resize(){}}}};function Un(e){const t=document.getElementById(e);return t&&Wn(t)}function Hn(){return[...document.querySelectorAll(".rdeck.html-widget")].map((e=>Wn(e))).filter((e=>e instanceof Rn))}function Wn(e){var t;return null===(t=null==e?void 0:e.htmlwidget_data_init_result)||void 0===t?void 0:t.instance}HTMLWidgets.widget(In);const Gn="0.4.0"},479:()=>{},9125:()=>{},9214:()=>{}},i={};function o(e){var t=i[e];if(void 0!==t)return t.exports;var n=i[e]={exports:{}};return r[e].call(n.exports,n,n.exports,o),n.exports}o.m=r,e=[],o.O=(t,n,r,i)=>{if(!n){var a=1/0;for(u=0;u<e.length;u++){for(var[n,r,i]=e[u],s=!0,l=0;l<n.length;l++)(!1&i||a>=i)&&Object.keys(o.O).every((e=>o.O[e](n[l])))?n.splice(l--,1):(s=!1,i<a&&(a=i));if(s){e.splice(u--,1);var c=r();void 0!==c&&(t=c)}}return t}i=i||0;for(var u=e.length;u>0&&e[u-1][2]>i;u--)e[u]=e[u-1];e[u]=[n,r,i]},o.n=e=>{var t=e&&e.__esModule?()=>e.default:()=>e;return o.d(t,{a:t}),t},n=Object.getPrototypeOf?e=>Object.getPrototypeOf(e):e=>e.__proto__,o.t=function(e,r){if(1&r&&(e=this(e)),8&r)return e;if("object"==typeof e&&e){if(4&r&&e.__esModule)return e;if(16&r&&"function"==typeof e.then)return e}var i=Object.create(null);o.r(i);var a={};t=t||[null,n({}),n([]),n(n)];for(var s=2&r&&e;"object"==typeof s&&!~t.indexOf(s);s=n(s))Object.getOwnPropertyNames(s).forEach((t=>a[t]=()=>e[t]));return a.default=()=>e,o.d(i,a),i},o.d=(e,t)=>{for(var n in t)o.o(t,n)&&!o.o(e,n)&&Object.defineProperty(e,n,{enumerable:!0,get:t[n]})},o.g=function(){if("object"==typeof globalThis)return globalThis;try{return this||new Function("return this")()}catch(e){if("object"==typeof window)return window}}(),o.o=(e,t)=>Object.prototype.hasOwnProperty.call(e,t),o.r=e=>{"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(e,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(e,"__esModule",{value:!0})},(()=>{var e={472:0};o.O.j=t=>0===e[t];var t=(t,n)=>{var r,i,[a,s,l]=n,c=0;if(a.some((t=>0!==e[t]))){for(r in s)o.o(s,r)&&(o.m[r]=s[r]);if(l)var u=l(o)}for(t&&t(n);c<a.length;c++)i=a[c],o.o(e,i)&&e[i]&&e[i][0](),e[i]=0;return o.O(u)},n=self.webpackChunkrdeck=self.webpackChunkrdeck||[];n.forEach(t.bind(null,0)),n.push=t.bind(null,n.push.bind(n))})();var a=o.O(void 0,[486,474,619,315,568,175,627,977,811,42,899,667,324,134,133,468,745,783,535,528,784,485,378,645,394,816,650,869,706,836,458,769,67,806,551,282,953,538,49,844,639,825,596],(()=>o(5416)));return a=o.O(a)})()));
//# sourceMappingURL=data:application/json;charset=utf-8;base64,