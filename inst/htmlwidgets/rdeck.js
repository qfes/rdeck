!function(e,t){"object"==typeof exports&&"object"==typeof module?module.exports=t():"function"==typeof define&&define.amd?define([],t):"object"==typeof exports?exports.rdeck=t():e.rdeck=t()}(self,(()=>(()=>{var e,t,n,r={4453:(e,t,n)=>{"use strict";n.r(t),n.d(t,{VERSION:()=>xn,Widget:()=>mn,binding:()=>bn,getWidgetById:()=>vn,getWidgets:()=>wn});var r={};n.r(r),n.d(r,{AGGREGATION_OPERATION:()=>te.KM,ArcLayer:()=>ee.ArcLayer,BitmapLayer:()=>ee.BitmapLayer,CPUGridLayer:()=>te.ab,ColumnLayer:()=>ee.ColumnLayer,ContourLayer:()=>te.YY,GPUGridLayer:()=>te.ML,GeoJsonLayer:()=>ee.GeoJsonLayer,GreatCircleLayer:()=>ne.GreatCircleLayer,GridCellLayer:()=>ee.GridCellLayer,GridLayer:()=>te.mU,H3ClusterLayer:()=>ne.H3ClusterLayer,H3HexagonLayer:()=>ne.H3HexagonLayer,HeatmapLayer:()=>te.zP,HexagonLayer:()=>te.dX,IconLayer:()=>ee.IconLayer,LineLayer:()=>ee.LineLayer,MVTLayer:()=>ne.MVTLayer,PathLayer:()=>ee.PathLayer,PointCloudLayer:()=>ee.PointCloudLayer,PolygonLayer:()=>ee.PolygonLayer,QuadkeyLayer:()=>ne.QuadkeyLayer,S2Layer:()=>ne.S2Layer,ScatterplotLayer:()=>ee.ScatterplotLayer,ScenegraphLayer:()=>re.ScenegraphLayer,ScreenGridLayer:()=>te.p3,SimpleMeshLayer:()=>re.SimpleMeshLayer,SolidPolygonLayer:()=>ee.SolidPolygonLayer,TerrainLayer:()=>ne.TerrainLayer,TextLayer:()=>ee.TextLayer,Tile3DLayer:()=>ne.Tile3DLayer,TileLayer:()=>ne.TileLayer,TripsLayer:()=>ne.TripsLayer,_AggregationLayer:()=>te.Di,_BinSorter:()=>te.l0,_CPUAggregator:()=>te.oA,_GPUGridAggregator:()=>te.Wc,_MultiIconLayer:()=>ee._MultiIconLayer,_TextBackgroundLayer:()=>ee._TextBackgroundLayer,_getURLFromTemplate:()=>ne._getURLFromTemplate});n(8559);var i=n(5893),a=n(745),o=n(7294),s=(n(6158),n(2687),n(4009)),l=n(6024),c=n(3295),u=n(17),d=n(8289),h=n(7682);function f(e,...t){if(null==e)return null;const n=t.map((t=>[t,e[t]]));return Object.fromEntries(n)}function p(e){return e.clientHeight>0&&e.clientHeight>0?e:e.parentElement?p(e.parentElement):null}function g(e){const t=p(e);if(e===t||null==t)return{width:e.clientWidth,height:e.clientHeight};const{width:n,height:r}=getComputedStyle(e),i=document.createElement("div");Object.assign(i.style,{width:n,height:r,display:"hidden"}),t.appendChild(i);const a={width:i.clientWidth,height:i.clientHeight};return t.removeChild(i),a}function y(e,t){const n=new Map;for(const r of e){const e=t(r);n.has(e)?n.get(e).push(r):n.set(e,[r])}return n}function m(...e){return e.filter((e=>null!=e)).join(" ")}class b{constructor(){Object.defineProperty(this,"_val",{enumerable:!0,configurable:!0,writable:!0,value:new Map}),Object.defineProperty(this,"_ref",{enumerable:!0,configurable:!0,writable:!0,value:new WeakMap})}getStore(e){return"object"==typeof(t=e)&&null!==t||"function"==typeof t?this._ref:this._val;var t}has(e){return this.getStore(e).has(e)}get(e){return this.getStore(e).get(e)}set(e,t){return this.getStore(e).set(e,t),this}}function v(e){const t=new b;return(...n)=>{const r=n[0],i=n.slice(0,-1).reduceRight(((e,t)=>{if(e.has(t))return e.get(t);const n=new b;return e.set(t,n),n}),t);if(i.has(r))return i.get(r);const a=e(...n);return i.set(r,a),a}}class w extends d.Z{setProps(e){const t=e.initialBounds;if(null!=t&&(n=t,r=this.props.initialBounds,!(n===r||null==n&&null==r||null!=n&&null!=r&&(null==n?void 0:n.every(((e,t)=>e===(null==r?void 0:r[t]))))))){const[n,r,i,a]=t,o=[[Math.max(n,-180),Math.max(r,-85.051129)],[Math.min(i,180),Math.min(a,85.051129)]];this._setCanvasSize(e);const{width:s,height:l}=this._getMapSize();e={...e,initialViewState:{...(0,h.Xg)({height:l,width:s,bounds:o}),bearing:0,pitch:0}}}var n,r;super.setProps(e)}_getMapSize(){const e=this.canvas;if(null==e)return{width:this.width,height:this.height};if(0===e.clientWidth&&0===e.clientHeight){const t=e.closest(".rdeck.html-widget");if(null!=t)return g(t)}return{width:e.clientWidth,height:e.clientHeight}}}function j(e){return null!==e&&"object"==typeof e&&"frame"in e}function x(e,{name:t,type:n}){var r,i,a,o;const s=e.frame,l=Object.fromEntries(Object.entries(s).map((([e])=>[e,[]]))),c=Object.keys(e.frame).filter((e=>e!==t)),u=s[t],d=function(e){switch(e){case"MULTIPOINT":return L;case"MULTILINESTRING":return k;case"MULTIPOLYGON":return C;default:throw TypeError(`${e} not supported`)}}(n),h=e=>{for(const t of c)l[t].push(s[t][e])},f=[];for(let n=0;n<e.length;n++){const s=u[n];if(d(s)){l[t].push(...s);for(let t=0;t<s.length;t++)h(n),f.push(null!==(i=null===(r=e.indices)||void 0===r?void 0:r[n])&&void 0!==i?i:n)}else l[t].push(s),h(n),f.push(null!==(o=null===(a=e.indices)||void 0===a?void 0:a[n])&&void 0!==o?o:n)}return{length:l[t].length,geometry:{...e.geometry,[t]:n.replace("MULTI","")},indices:f,frame:l}}function L(e){return Array.isArray(null==e?void 0:e[0])}function k(e){var t;return Array.isArray(null===(t=null==e?void 0:e[0])||void 0===t?void 0:t[0])}function C(e){var t,n;return Array.isArray(null===(n=null===(t=null==e?void 0:e[0])||void 0===t?void 0:t[0])||void 0===n?void 0:n[0])}Object.defineProperty(w,"defaultProps",{enumerable:!0,configurable:!0,writable:!0,value:{...d.Z.defaultProps,initialBounds:null}});const O=".feature_id";function S(e,t=null){if(!e.picked)return null;null==t&&(t=function({object:e,layer:t}){return!j(t.props.data)||t instanceof c.Z?function(e){return"Feature"===(null==e?void 0:e.type)&&"geometry"in e&&"type"in e.geometry}(e)?"geojson":"object":"table"}(e));const n=function(e){switch(e){case"table":return(e,{index:t,data:n})=>{const r=Object.keys(n.geometry),i={};for(const[e,a]of Object.entries(n.frame))r.includes(e)||(i[e]=a[t]);return i};case"object":return e=>({...e});case"geojson":return e=>({[O]:null==e?void 0:e.id,...null==e?void 0:e.properties});default:throw TypeError(`${e} not supported`)}}(t),{object:r,index:i}=e;return n(r,{index:i,data:e.layer.props.data})}const P="cyWLt4_G7nk5vT9hPr0o",M="Z9hHHet2RXmL0iMel3Zt",N="jp658yEHLlesSRvwBwDl",T="t9I8kJyjeEJEOArvMD7j",_="vovHpTur01BROrMLmEFz";function E({info:e}){if(!e.picked||null==e.layer.props.tooltip)return null;const{x:t,y:n}=e,{name:r,tooltip:a}=e.layer.props,o=S(e,a.dataType);delete o[O];const s=!0===a.cols?Object.keys(o):a.cols;return(0,i.jsxs)("div",{className:P,style:{transform:`translate(${t}px, ${n}px)`},children:[(0,i.jsx)("div",{className:M,children:r}),(0,i.jsx)("table",{className:N,children:(0,i.jsx)("tbody",{children:s.map((e=>{var t;return(0,i.jsxs)("tr",{children:[(0,i.jsx)("td",{className:T,children:e}),(0,i.jsx)("td",{className:_,children:String(null!==(t=o[e])&&void 0!==t?t:null)})]},e)}))})})]})}var A=n(9757);const Z=Object.freeze({additive:{[A.default.BLEND]:!0,blendFunc:[A.default.SRC_ALPHA,A.default.DST_ALPHA],blendEquation:A.default.FUNC_ADD},subtractive:{[A.default.BLEND]:!0,blendFunc:[A.default.ONE,A.default.ONE_MINUS_DST_COLOR,A.default.SRC_ALPHA,A.default.DST_ALPHA],blendEquation:[A.default.FUNC_SUBTRACT,A.default.FUNC_ADD]},normal:{[A.default.BLEND]:!0,blendFunc:[A.default.SRC_ALPHA,A.default.ONE_MINUS_SRC_ALPHA,A.default.ONE,A.default.ONE_MINUS_SRC_ALPHA],blendEquation:[A.default.FUNC_ADD,A.default.FUNC_ADD]}});function D(e="normal"){var t;return null!==(t=Z[e])&&void 0!==t?t:Z.normal}var F=n(4329),R=n(7359),I=n(1688);const H=[3,169,244],U=[116,117,129],W=[...H,255],z=[...H,38.25],B=[0,0,0,0];function G(e){if(null==e)return null;const{geojson:t,selectedFeatureIndices:n,setGeoJson:r,selectFeatures:i}=e,a=function(e){var t;return null!==(t=J[null!=e?e:"view"])&&void 0!==t?t:J.view}(e.mode),o=!Y.includes(a);return new I.nk({data:t,selectedFeatureIndexes:n,mode:a,modeConfig:{screenSpace:!0,viewport:{},enableSnapping:!0},onEdit:function({updatedData:e,editType:t,editContext:a}){this.data=e,V.has(t)&&(null==r||r(e)),"addFeature"===t&&(null==i||i([...n,...a.featureIndexes]))},onClick:function({index:e}){a===J.select&&(null==i||i(n.includes(e)?n.filter((t=>t!==e)):[...n,e]))},pickable:a!==J.view,getRadius:5,getLineWidth:1.5,getTentativeLineWidth:1.5,getFillColor:(e,t,n)=>n===J.view?B:t?z:[...U,38.25],getLineColor:(e,t,n)=>t?W:[...U,255],getTentativeLineColor:W,getEditHandlePointOutlineColor:W,getTentativeFillColor:z,getEditHandlePointColor:B,getDashArray:o?[4,2]:[0,0],extensions:[new F.Z({dash:!0})]})}const V=Object.freeze(new Set(["addPosition","removePosition","addFeature","finishMovePosition","scaled","rotated","translated","extruded","split"]));class $ extends R.CompositeMode{constructor(e=[new R.TranslateMode,new R.ModifyMode]){super(e)}handlePointerMove(e,t){const n=[],r={...t,onUpdateCursor:e=>n.unshift(e)};this._modes.forEach((t=>t.handlePointerMove(e,r))),t.onUpdateCursor(n.find((e=>null!=e)))}}class q extends R.ViewMode{handlePointerMove(e,t){var n;const r=0!==(null===(n=null==e?void 0:e.picks)||void 0===n?void 0:n.length);t.onUpdateCursor(r?"pointer":null)}}const J=Object.seal({view:R.ViewMode,select:q,modify:$,linestring:R.DrawLineStringMode,point:R.DrawPointMode,polygon:R.DrawPolygonMode,lasso:R.DrawPolygonByDraggingMode}),Y=[J.view,J.select];function K({deckgl:e,mapgl:t,layers:n,editor:r}){const a=(0,o.useRef)(null),[c,d]=Q();let{blendingMode:h,pickingRadius:f,controller:p,onClick:g,...y}=e;const m={...e.parameters,...h&&D(h)},[b,v]=(0,o.useState)(0),j=n.some((e=>"TripsLayer"===e.type));X(j,(e=>v(e)));const x=n.map((e=>null!=e.type?e.renderLayer(b):null)),L=G(r),k=null!=r&&!["view","select"].includes(r.mode);return k&&p&&(p={...p,doubleClickZoom:!1}),"select"===(null==r?void 0:r.mode)&&(f=Math.max(null!=f?f:0,5)),(0,i.jsxs)(o.Fragment,{children:[(0,i.jsx)(l.Z,{Deck:w,ref:a,...{...y,parameters:m,pickingRadius:f},layers:[...x,L],onHover:k?void 0:d,onClick:k?void 0:g,getCursor:null==L?void 0:L.getCursor.bind(L),children:(0,i.jsx)(s.Z,{id:"map",controller:p,repeat:!0,children:t.mapStyle&&(0,i.jsx)(u.D5,{...t})})}),c&&(0,i.jsx)(E,{info:c})]})}const Q=()=>{const[e,t]=(0,o.useState)(null);return[e,(0,o.useCallback)((e=>{if(!e.picked||!e.layer.props.tooltip||e.layer instanceof c.Z)return t(null);t(e)}),[])]},X=(e,t)=>{const n=(0,o.useRef)(0),r=(0,o.useRef)(Date.now()),i=()=>{t(Date.now()-r.current),n.current=window.requestAnimationFrame(i)};(0,o.useEffect)((()=>{if(e)return n.current=window.requestAnimationFrame(i),()=>window.cancelAnimationFrame(n.current)}),[e])};var ee=n(7786),te=n(9080),ne=n(803),re=n(1956),ie=n(5395);const ae=[0,0,0,255];function oe([e,t,n,r=255]){return`rgba(${e}, ${t}, ${n}, ${r/255})`}function se(e,t){return Array.isArray(e)?t||4!==e.length?((t=null!=t?t:[])[0]=e[0],t[1]=e[1],t[2]=e[2],t[3]=3===e.length?e[3]:255,t):e:"string"==typeof e?(function(e,t){if(7===e.length){const n=parseInt(e.substring(1),16);t[0]=Math.floor(n/65536),t[1]=Math.floor(n/256%256),t[2]=n%256,t[3]=255}else if(9===e.length){const n=parseInt(e.substring(1),16);t[0]=Math.floor(n/16777216),t[1]=Math.floor(n/65536%256),t[2]=Math.floor(n/256%256),t[3]=n%256}}(e,t=null!=t?t:[]),t):ae}var le=n(4634),ce=n(4177),ue=n(458),de=n(5801),he=n(3613),fe=n(602),pe=n(8973),ge=n(2625);function ye(e){return null!==e&&"object"==typeof e&&"accessor"===e.type}function me(e){return ye(e)&&"scale"in e}var be=n(3693),ve=n(4717),we=n(6867),je=n(3326),xe=n(2112),Le=n(7693),ke=n(8569),Ce=n(1435);class Oe extends be.Z{initializeState(){if(!function(e){return Se.some((t=>e instanceof t))}(this))return;const e=this,t=e.getAttributeManager();t&&t.addInstanced({pickingColors:{type:A.default.UNSIGNED_BYTE,size:3,accessor:(t,{index:n,data:r,target:i})=>{var a,o,s;if(j(r)&&Array.isArray(r.indices))return e.encodePickingColor(r.indices.indexOf(r.indices[n]),i);const l=null===(o=null===(a=null==t?void 0:t.__source)||void 0===a?void 0:a.parent)||void 0===o?void 0:o.props.data;return j(l)&&Array.isArray(l.indices)?e.encodePickingColor(l.indices.indexOf(l.indices[t.__source.index]),i):e.encodePickingColor(null!==(s=null==t?void 0:t.__source.index)&&void 0!==s?s:n,i)},shaderAttributes:{pickingColors:{divisor:0},instancePickingColors:{divisor:1}}}})}}const Se=[ve.Z,we.Z,je.Z,xe.Z,Le.Z,ke.Z,Ce.Z];const Pe=v((function(e){const t=function(e){return Object.entries(e.geometry).filter((([,e])=>/MULTI/.test(e))).map((([e,t])=>({name:e,type:t})))}(e);return 0===t.length?e:t.reduce(x,e)})),Me=v(se),Ne=v((function(e,t){const n=function({col:e,dataType:t},n){if("highlightColor"===n)switch(t){case"table":return function(e){return({index:t,layer:n})=>se(n.props.data.frame[e][t])}(e);case"object":return function(e){return({object:t})=>se(t[e])}(e);case"geojson":return function(e){return({object:t})=>se(t.properties[e])}(e);default:throw TypeError(`${t} not supported`)}if(n.endsWith("Color"))switch(t){case"table":return function(e){return(t,{index:n,data:r,target:i})=>se(r.frame[e][n],i)}(e);case"object":return function(e){return(t,{target:n})=>se(t[e],n)}(e);case"geojson":return function(e){return(t,{target:n})=>se(t.properties[e],n)}(e);default:throw TypeError(`${t} not supported`)}switch(t){case"table":return function(e){return(t,{index:n,data:r})=>r.frame[e][n]}(e);case"object":return function(e){return t=>t[e]}(e);case"geojson":return function(e){return t=>t.properties[e]}(e);default:throw TypeError(`${t} not supported`)}}(e,t);return{...e,getData:n}})),Te=v((function(e,t){"palette"in e&&(e.range=e.palette.map((e=>se(e))),e.unknown=se(e.unknown));const n=function(e){switch(e.scale){case"linear":return(0,le.Z)().domain(e.domain).range(e.range).unknown(e.unknown).clamp(!0);case"power":return(0,ce.ZP)().exponent(e.exponent).domain(e.domain).range(e.range).unknown(e.unknown).clamp(!0);case"log":return(0,ue.Z)().base(e.base).domain(e.domain).range(e.range).unknown(e.unknown).clamp(!0);case"symlog":return(0,de.Z)().domain(e.domain).range(e.range).unknown(e.unknown).clamp(!0);case"identity":return(0,he.Z)().unknown(e.unknown);case"threshold":case"quantile":return(0,fe.Z)().domain(e.domain).range(e.range).unknown(e.unknown);case"category":return(0,pe.Z)().domain(e.domain).range(e.range).unknown(e.unknown);case"quantize":return(0,ge.Z)().domain(e.domain).range(e.range).unknown(e.unknown);default:throw TypeError(`scale ${e.scale} not supported`)}}(e),r="highlightColor"===t?function({col:e,dataType:t},n){switch(t){case"table":return function(e,t){return({index:n,layer:r})=>t(r.props.data.frame[e][n])}(e,n);case"object":return function(e,t){return({object:n})=>t(n[e])}(e,n);case"geojson":return function(e,t){return({object:n})=>t(n.properties[e])}(e,n);default:throw TypeError(`${t} not supported`)}}(e,n):function({col:e,dataType:t},n){switch(t){case"table":return function(e,t){return(n,{index:r,data:i})=>t(i.frame[e][r])}(e,n);case"object":return function(e,t){return n=>t(n[e])}(e,n);case"geojson":return function(e,t){return n=>t(n.properties[e])}(e,n);default:throw TypeError(`${t} not supported`)}}(e,n);return{...e,name:t,getData:r,scaleData:n}}));class _e{constructor({type:e,...t}){var n,r;Object.defineProperty(this,"type",{enumerable:!0,configurable:!0,writable:!0,value:void 0}),Object.defineProperty(this,"props",{enumerable:!0,configurable:!0,writable:!0,value:void 0}),Object.defineProperty(this,"scales",{enumerable:!0,configurable:!0,writable:!0,value:void 0});const i=Object.entries(t),a=function(e){const t=e.filter(Ee).map((([e,t])=>[e,Me(t)])),n=e.find((([e])=>"colorRange"===e));n&&t.push([n[0],n[1].map((e=>Me(e)))]);return t}(i),o=function(e){return e.filter((([,e])=>ye(e))).map((([e,t])=>[e,me(t)?Te(t,e):Ne(t,e)]))}(i);this.type=e;const s=Object.fromEntries([...i,...a,...o.map((([e,t])=>[e,t.getData])),...Ze(i),["visible",null===(n=t.visible)||void 0===n||n],["updateTriggers",Ae(o)],["parameters",(l=t.parameters,c=t.blendingMode,{...l,...D(c)})]]);var l,c;j(s.data)&&(s.data=Pe(s.data),s.extensions=[new Oe,...null!==(r=s.extensions)&&void 0!==r?r:[]]),"TileLayer"===e&&(s.renderSubLayers=e=>{const{bbox:{west:t,south:n,east:r,north:i},x:a,y:o,z:s}=e.tile;return new ie.Z({...e,data:[{z:s,x:a,y:o}],image:e.data,bounds:[t,n,r,i]})}),this.props=s,this.scales=o.filter((([,e])=>me(e))).map((([,e])=>e)),"TextLayer"===e&&"fonts"in document&&document.fonts.load(`16px ${t.fontFamily}`)}static create(e){return new _e(e)}renderLayer(e){if("TripsLayer"===this.type&&void 0!==e){const t=this.props,{loopLength:n,animationSpeed:r}=t,i=n/r,a=e/1e3%i/i;t.currentTime=a*n}return new r[this.type]({...this.props})}renderLegend(){const e=this.scales.filter((e=>e.legend));return{id:this.props.id,name:this.props.name,scales:e}}renderSelector(){var e;return{id:this.props.id,groupName:this.props.groupName,name:this.props.name,visible:null===(e=this.props.visible)||void 0===e||e}}}function Ee([e,t]){return e.endsWith("Color")&&(Array.isArray(t)||"string"==typeof t)}function Ae(e){const t=e=>{const{getData:t,scaleData:n,palette:r,...i}=e;return i},n=e.map((([e,n])=>[e,t(n)]));return Object.fromEntries(n)}function Ze(e){return e.filter((([e])=>"getColorWeight"===e||"getElevationWeight"===e)).filter((([,e])=>null!==e&&"function"!=typeof e&&!ye(e))).map((([e,t])=>[e,()=>t]))}var De=n(6082),Fe=n(912),Re=n(2372),Ie=n(8426);const He="U44LhpKlV8r1Vu1ZoZA3",Ue="XF770nELUcE_0zxo_aOg",We="HYRhC2aw1PSMYGCz2bDb",ze="YNou4FYlc3N3GhFp2BkO",Be="f44NGqZZGn4de9S3oTHN",Ge="xqKP289MUJ06Hgb3CjoW",Ve="XctZC_fZAMvRMiHPlt9G",$e="ly9kEH8MpXynhBX6Fhcj",qe="iM2OiMQz6z_NtAQZZyPS",Je="_8r8348KPS_nzNLR_CV_",Ye="tzkFrkEU5cB_jY6zcuua",Ke=Date.now();function Qe({className:e,tooltip:t,onClick:n,children:r}){return(0,i.jsx)("button",{className:e,type:"button",onClick:n,title:t,children:r})}function Xe({layers:e,onVisibilityChange:t}){const n=y(e,(e=>{var t;return null!==(t=e.groupName)&&void 0!==t?t:`${e.name}-${Ke}`})),r=(n,r,i)=>{if(i){const i=!e.filter((e=>!n.includes(e))).some((e=>e.visible));return t(e.map((e=>({...e,visible:n.includes(e)?r:i}))))}t(n.map((e=>({...e,visible:r}))))},[a,s]=(0,o.useState)(!1),l=()=>s((e=>!e));return a?(0,i.jsxs)("div",{className:Ue,children:[(0,i.jsx)("div",{className:We,children:(0,i.jsxs)(Qe,{className:ze,onClick:l,tooltip:"Close",children:[(0,i.jsx)(De.Z,{className:Ye,fontSize:"small"}),(0,i.jsx)("span",{className:Be,children:"Layers"})]})}),(0,i.jsx)("div",{className:Ge,children:Array.from(n.entries(),(([e,t,[{groupName:n}]=t])=>(0,i.jsx)(et,{group:n,layers:t,onChange:r},e)))})]}):(0,i.jsx)(Qe,{className:He,tooltip:"Layer selector",onClick:l,children:(0,i.jsx)(De.Z,{className:Ye,fontSize:"small"})})}function et({group:e,layers:t,onChange:n}){const r=Array.from(y(t,(e=>e.name)),(([e,t])=>(0,i.jsx)(tt,{name:e,layers:t,onChange:n},e)));return e?(0,i.jsxs)(o.Fragment,{children:[(0,i.jsx)(tt,{name:e,layers:t,onChange:n}),(0,i.jsx)("div",{className:Ve,children:r})]}):(0,i.jsx)(o.Fragment,{children:r})}function tt({name:e,layers:t,onChange:n}){const r=function(e){let t=e[0].visible;for(const n of e)if(n.visible!==t)return null;return t}(t),a=null===r,s=(0,o.useRef)(null);(0,o.useEffect)((()=>{s.current&&(s.current.indeterminate=a)}),[a]);const l=(0,o.useRef)((()=>!1)),c=r?Fe.Z:a?Re.Z:Ie.Z,u=m($e,r||a?qe:null);return(0,i.jsxs)("label",{className:u,children:[(0,i.jsx)("input",{ref:s,className:Je,type:"checkbox",onChange:()=>{l.current()?n(t,!0,!0):l.current=nt((()=>n(t,!r,!1)),200)},checked:null==r||r}),(0,i.jsx)(c,{fontSize:"small",className:Ye}),(0,i.jsx)("span",{className:Be,children:e})]})}const nt=(e,t=200)=>{const n={current:0};let r=0;const i=a=>{if(r||(r=a),a-r>t)return n.current=0,void e();n.current=globalThis.requestAnimationFrame(i)};return n.current=globalThis.requestAnimationFrame(i),()=>0!==n.current&&(globalThis.cancelAnimationFrame(n.current),n.current=0,!0)},rt="lWOwchFb6W2NpcWR4ZQS",it="mIJjIoOSsjLZMp591rN0",at="OULly07OGkLPRiEDgp00",ot="oxctK5Tcknb3syUfT7xg",st="KEbGPBIjLXnjAiUTu8eP",lt="MBBFrOSR5F_grZcyOCp0",ct="l_4PaMO7BWOn4DcLN5Oh",ut="aWzYqDozdq6Vl4QuIJ1y",dt="xaprV4ANDgRiE5ai1hUl",ht="f6SnauerJY75ZqNAuK56",ft=16;function pt({layers:e}){return 0===e.length?null:(0,i.jsx)("div",{className:rt,children:e.map((e=>(0,i.jsx)(gt,{...e},e.id)))})}function gt({name:e,scales:t}){return 0===t.length?null:(0,i.jsxs)("div",{className:it,children:[(0,i.jsx)("div",{className:at,title:e,children:e}),t.map((e=>(0,i.jsx)(yt,{...e},e.name)))]})}function yt(e){var t;const n=e.name.replace(/^get/,"").replace(/([A-Z])/g," $1").toLowerCase();const r="palette"in e;const a=function(e){return"linear"===e.scale||"power"===e.scale||"log"===e.scale||"symlog"===e.scale}(e),o=function(e){return"threshold"===e.scale||"quantile"===e.scale||"quantize"===e.scale}(e);return(0,i.jsxs)("div",{className:ot,children:[(0,i.jsx)("div",{className:st,children:n}),(0,i.jsx)("span",{className:lt,children:"by "}),(0,i.jsx)("span",{className:ct,title:e.col,children:null!==(t=e.scaleBy)&&void 0!==t?t:e.col}),r&&a&&(0,i.jsx)(mt,{...e}),r&&o&&(0,i.jsx)(bt,{...e}),r&&"category"===e.scale&&(0,i.jsx)(vt,{...e})]})}const mt=({ticks:e,scaleData:t})=>{const n=e.map(((e,t)=>t)).slice(1,-1),r=ft*(e.length-1),a=r+11+1;return(0,i.jsxs)("svg",{className:ut,height:a,shapeRendering:"crispEdges",children:[(0,i.jsxs)("svg",{y:5,children:[(0,i.jsx)("image",{width:20,height:r,href:jt(t),preserveAspectRatio:"none"}),n.map((e=>(0,i.jsx)("line",{className:ht,x2:20,y1:ft*e,y2:ft*e},e)))]}),(0,i.jsx)(wt,{ticks:e,y:-2})]})},bt=({ticks:e,range:t})=>{const n=t.map(oe),r=ft*(e.length-1)+11+1;return(0,i.jsxs)("svg",{className:ut,height:r,shapeRendering:"crispEdges",children:[(0,i.jsx)("svg",{y:5,children:n.map(((e,t)=>(0,i.jsx)("rect",{width:20,height:ft,y:t*ft,fill:e},t)))}),(0,i.jsx)(wt,{ticks:e,y:-2})]})};function vt({ticks:e,range:t,unknownTick:n,unknown:r}){const a=n?[...t,r]:t,o=n?[...e,n]:e,s=a.map(oe),l=ft*o.length;return(0,i.jsxs)("svg",{className:ut,height:l,children:[(0,i.jsx)("svg",{children:s.map(((e,t)=>(0,i.jsx)("rect",{width:20,height:14,y:1+t*ft,fill:e},t)))}),(0,i.jsx)(wt,{ticks:o})]})}function wt({ticks:e,x:t=28,y:n=0}){return(0,i.jsx)("svg",{x:t,y:n,children:e.map(((e,t)=>(0,i.jsx)("text",{className:dt,y:ft*t,dy:11,children:String(e)},t)))})}function jt(e,t=200){const n=e.range().length,r=[...Array(n).keys()].map((e=>e/(n-1))),i=e.copy().range(r).invert,a=document.createElement("canvas"),o=a.getContext("2d");a.width=1,a.height=t;for(let n=0;n<t;n++)o.fillStyle=oe(e(i(n/t))),o.fillRect(0,n,1,1);return a.toDataURL()}var xt=n(7046),Lt=n(6533),kt=n(9292),Ct=n(9744),Ot=n(1610),St=n(904),Pt=n(5482),Mt=n(5579),Nt=n(9702),Tt=n(2149),_t=n(6761);const Et="to6Bow31fUl46doyw8b_",At="P9ZycVbYWDR1ibd3uTK6",Zt="rN4ew14mQNJFSkFZhUIE",Dt="hGaqLLC_23x1jwFn5zxy",Ft="Pqg0By6gxq7W97bkvlUB",Rt=()=>{};function It({mode:e="view",geojson:t,selectedFeatureIndices:n,setMode:r=Rt,download:a=Rt,upload:o=Rt,deleteSelected:s=Rt}){const l=0!==(null==n?void 0:n.length);return(0,i.jsxs)("div",{className:Et,children:[(0,i.jsxs)("div",{className:At,children:[(0,i.jsx)(Ht,{name:"Pan",icon:St.Z,iconStyle:{transform:"scale(0.9)"},active:"view"===e,onClick:()=>r("view")}),(0,i.jsx)(Ht,{name:"Select",icon:Pt.Z,active:"select"===e,onClick:()=>r("select")})]}),(0,i.jsxs)("div",{className:At,children:[(0,i.jsx)(Ht,{name:"Modify",icon:kt.Z,active:"modify"===e,disabled:!l,onClick:()=>r("modify")}),(0,i.jsx)(Ht,{name:"Point",icon:Mt.Z,active:"point"===e,onClick:()=>r("point")}),(0,i.jsx)(Ht,{name:"LineString",icon:Ct.Z,active:"linestring"===e,onClick:()=>r("linestring")}),(0,i.jsx)(Ht,{name:"Polygon",icon:Lt.Z,active:"polygon"===e,onClick:()=>r("polygon")}),(0,i.jsx)(Ht,{name:"Lasso",icon:xt.Z,active:"lasso"===e,onClick:()=>r("lasso")})]}),(0,i.jsxs)("div",{className:At,children:[(0,i.jsx)(Ht,{name:"Download",icon:Nt.Z,onClick:()=>a(t)}),(0,i.jsx)(Ht,{name:"Upload",icon:Tt.Z,onClick:()=>o(t)})]}),(0,i.jsx)("div",{className:At,children:(0,i.jsx)(Ht,{name:"Delete",icon:_t.Z,disabled:!l,onClick:()=>s(n)})})]})}function Ht({name:e,onClick:t=Rt,disabled:n=!1,active:r=!1,icon:a,iconStyle:o}){const s=m(Zt,r?Dt:null);return(0,i.jsx)("button",{className:s,onClick:t,title:e,disabled:n,children:a&&(0,i.jsx)(Ot.Z,{component:a,className:Ft,fontSize:"small",style:o})})}const Ut="rdeck",Wt="XTuYKSlBcC933W4sKWtC",zt="kQnelQ4hkAJEJHLO0NJI",Bt="hQbOOdEZw0LO0llGKVqS",Gt="cSol54mlVTgAnRzj_GUM";function Vt({theme:e,deckgl:t,mapgl:n,layers:r,lazyLoad:a=!1,layerSelector:s=!1,onLayerVisibilityChange:l,editor:c}){var u;const d=null!==(u=null==r?void 0:r.map(_e.create))&&void 0!==u?u:[],h=(0,o.useRef)(null),f=function(e,t){const[n,r]=(0,o.useState)(!1);return(0,o.useEffect)((()=>{if(t&&e.current){const t=new IntersectionObserver((e=>{r(e[0].isIntersecting)}),{threshold:0});return t.observe(e.current),()=>t.disconnect()}}),[t,e]),n}(h,a),p=!a||f;return(0,i.jsxs)("div",{ref:h,className:m(Ut,e),children:[(0,i.jsx)("div",{className:m(Wt,zt),children:s&&(0,i.jsx)(Xe,{layers:d.filter((e=>e.props.visibilityToggle)).map((e=>e.renderSelector())).reverse(),onVisibilityChange:l})}),(0,i.jsx)("div",{className:m(Wt,Bt),children:(0,i.jsx)(pt,{layers:d.filter((e=>e.props.visible)).map((e=>e.renderLegend())).reverse()})}),(0,i.jsx)("div",{className:m(Wt,Gt),children:c&&(0,i.jsx)(It,{...c})}),p&&(0,i.jsx)(K,{deckgl:t,mapgl:n,layers:d,editor:c})]})}var $t=n(6935);function qt(e){const t=e instanceof $t.Z?e:new $t.Z(e),n=f(t,"longitude","latitude","zoom","bearing","pitch","altitude");return{bounds:t.getBounds(),viewState:{...n,center:t.unprojectFlat(t.center)}}}function Jt(e,t){function n(e,n,{value:r}){return Reflect.defineProperty(e,n,{enumerable:!0,get:()=>r,set(e){Object.is(e,r)||(r=e,null==t||t({[n]:e}))}})}const r=Object.entries(Object.getOwnPropertyDescriptors(e));for(const[t,i]of r)i.configurable&&i.writable&&n(e,t,i);return e}var Yt,Kt,Qt,Xt,en=function(e,t,n,r){if("a"===n&&!r)throw new TypeError("Private accessor was defined without a getter");if("function"==typeof t?e!==t||!r:!t.has(e))throw new TypeError("Cannot read private member from an object whose class did not declare it");return"m"===n?r:"a"===n?r.call(e):r?r.value:t.get(e)},tn=function(e,t,n,r,i){if("m"===r)throw new TypeError("Private method is not writable");if("a"===r&&!i)throw new TypeError("Private accessor was defined without a setter");if("function"==typeof t?e!==t||!i:!t.has(e))throw new TypeError("Cannot write private member to an object whose class did not declare it");return"a"===r?i.call(e,n):i?i.value=n:t.set(e,n),n};const nn={longitude:0,latitude:0,zoom:0,pitch:0,bearing:0};class rn{constructor(e){Object.defineProperty(this,"useDevicePixels",{enumerable:!0,configurable:!0,writable:!0,value:void 0}),Object.defineProperty(this,"pickingRadius",{enumerable:!0,configurable:!0,writable:!0,value:void 0}),Object.defineProperty(this,"blendingMode",{enumerable:!0,configurable:!0,writable:!0,value:void 0}),Object.defineProperty(this,"effects",{enumerable:!0,configurable:!0,writable:!0,value:void 0}),Object.defineProperty(this,"controller",{enumerable:!0,configurable:!0,writable:!0,value:void 0}),Object.defineProperty(this,"initialViewState",{enumerable:!0,configurable:!0,writable:!0,value:nn}),Object.defineProperty(this,"initialBounds",{enumerable:!0,configurable:!0,writable:!0,value:void 0}),Object.defineProperty(this,"onViewStateChange",{enumerable:!0,configurable:!0,writable:!0,value:void 0}),Object.defineProperty(this,"onClick",{enumerable:!0,configurable:!0,writable:!0,value:void 0}),Object.assign(this,e)}}class an{constructor(e){Object.defineProperty(this,"mapboxAccessToken",{enumerable:!0,configurable:!0,writable:!0,value:void 0}),Object.defineProperty(this,"mapStyle",{enumerable:!0,configurable:!0,writable:!0,value:void 0}),Object.defineProperty(this,"reuseMaps",{enumerable:!0,configurable:!0,writable:!0,value:!0}),Object.assign(this,e)}}const on=Object.freeze({type:"FeatureCollection",features:[]});class sn{constructor(e){Object.defineProperty(this,"mode",{enumerable:!0,configurable:!0,writable:!0,value:"view"}),Object.defineProperty(this,"geojson",{enumerable:!0,configurable:!0,writable:!0,value:on}),Object.defineProperty(this,"selectedFeatureIndices",{enumerable:!0,configurable:!0,writable:!0,value:[]}),Object.defineProperty(this,"upload",{enumerable:!0,configurable:!0,writable:!0,value:void 0}),Object.assign(this,e),this.setMode=this.setMode.bind(this),this.selectFeatures=this.selectFeatures.bind(this),this.setGeoJson=this.setGeoJson.bind(this),this.deleteSelected=this.deleteSelected.bind(this),this.download=this.download.bind(this)}setMode(e){this.mode=e}selectFeatures(e){this.selectedFeatureIndices=e}setGeoJson(e){this.geojson=e}deleteSelected(e=[0]){const t=this.geojson.features.filter(((t,n)=>!e.includes(n)));Object.assign(this,{mode:"view",selectedFeatureIndices:[],geojson:{...this.geojson,features:t}})}download(e){const t=new Blob([JSON.stringify(e)],{type:"application/geo+json"}),n=document.createElement("a");n.href=URL.createObjectURL(t),n.download="rdeck.geojson",n.click()}}class ln{constructor({theme:e,deckgl:t,mapgl:n,layers:r,layerSelector:i,editor:a,lazyLoad:o}={},s){Object.defineProperty(this,"theme",{enumerable:!0,configurable:!0,writable:!0,value:"kepler"}),Yt.set(this,void 0),Kt.set(this,void 0),Object.defineProperty(this,"layers",{enumerable:!0,configurable:!0,writable:!0,value:[]}),Object.defineProperty(this,"layerSelector",{enumerable:!0,configurable:!0,writable:!0,value:!1}),Object.defineProperty(this,"lazyLoad",{enumerable:!0,configurable:!0,writable:!0,value:!1}),Qt.set(this,void 0),Object.defineProperty(this,"onChange",{enumerable:!0,configurable:!0,writable:!0,value:void 0}),Xt.set(this,(()=>{var e;return null===(e=this.onChange)||void 0===e?void 0:e.call(this)})),this.theme=null!=e?e:"kepler",this.layerSelector=null!=i&&i,this.lazyLoad=null!=o&&o,this.layers=null!=r?r:[],tn(this,Yt,Jt(new rn(t),en(this,Xt,"f")),"f"),tn(this,Kt,Jt(new an(n),en(this,Xt,"f")),"f"),tn(this,Qt,Jt(new sn(a),en(this,Xt,"f")),"f"),this.setLayerVisibility=this.setLayerVisibility.bind(this),Reflect.defineProperty(this,"onChange",{configurable:!1,enumerable:!1,writable:!0,value:s}),Jt(this,en(this,Xt,"f"))}get deckgl(){return en(this,Yt,"f")}get mapgl(){return en(this,Kt,"f")}get editor(){return en(this,Qt,"f")}upsertLayer(e){var t,n,r;const i=this.layers.find((t=>t.id===e.id));if(null==i)return void(this.layers=[...this.layers,e]);const a={...i,...e,visible:null!==(t=e.visible)&&void 0!==t?t:null==i?void 0:i.visible,data:null!==(r=null!==(n=e.data)&&void 0!==n?n:null==i?void 0:i.data)&&void 0!==r?r:null};this.layers=this.layers.map((e=>e===i?a:e))}setLayerVisibility(e){if(0===e.length)return;this.layers=this.layers.map((t=>{const n=e.find((e=>((e,t)=>{const n=e.name===t.name,r=e.groupName===t.groupName;return n&&r||null==e.name&&null!=e.groupName&&r})(e,t)&&e.visible!==t.visible));return n?{...t,visible:n.visible}:t}))}}Yt=new WeakMap,Kt=new WeakMap,Qt=new WeakMap,Xt=new WeakMap;var cn,un,dn,hn,fn,pn,gn=function(e,t,n,r,i){if("m"===r)throw new TypeError("Private method is not writable");if("a"===r&&!i)throw new TypeError("Private accessor was defined without a setter");if("function"==typeof t?e!==t||!i:!t.has(e))throw new TypeError("Cannot write private member to an object whose class did not declare it");return"a"===r?i.call(e,n):i?i.value=n:t.set(e,n),n},yn=function(e,t,n,r){if("a"===n&&!r)throw new TypeError("Private accessor was defined without a getter");if("function"==typeof t?e!==t||!r:!t.has(e))throw new TypeError("Cannot read private member from an object whose class did not declare it");return"m"===n?r:"a"===n?r.call(e):r?r.value:t.get(e)};class mn{constructor(e,t){cn.set(this,void 0),un.set(this,void 0),dn.set(this,void 0),hn.set(this,((e,t)=>{var n,r,i;if(null===(r=(n=yn(this,dn,"f").deckgl).onClick)||void 0===r||r.call(n,e,t),HTMLWidgets.shinyMode){const t={coordinate:e.coordinate,...qt(e.viewport),layer:f(null===(i=e.layer)||void 0===i?void 0:i.props,"id","name","groupName"),object:S(e)};Shiny.setInputValue(`${this.element.id}_click`,t,{priority:"event"})}})),fn.set(this,(e=>{var t,n;if(null===(n=(t=yn(this,dn,"f").deckgl).onViewStateChange)||void 0===n||n.call(t,e),HTMLWidgets.shinyMode){const t=qt(e.viewState);Shiny.setInputValue(`${this.element.id}_viewstate`,t,{priority:"event"})}})),pn.set(this,(e=>{HTMLWidgets.shinyMode&&Shiny.setInputValue(`${this.element.id}_editorupload`,{geojson:JSON.stringify(e)})})),gn(this,un,e,"f"),gn(this,cn,(0,a.s)(e),"f"),gn(this,dn,new ln(t,(()=>this.render())),"f"),HTMLWidgets.shinyMode&&(Shiny.addCustomMessageHandler(`${e.id}:layer`,(e=>{this.state.upsertLayer(e)})),Shiny.addCustomMessageHandler(`${e.id}:deck`,(e=>{Object.assign(this.state.deckgl,e)})))}get element(){return yn(this,un,"f")}get state(){return yn(this,dn,"f")}render(){const{theme:e,mapgl:t,layers:n,layerSelector:r,lazyLoad:a}=yn(this,dn,"f"),s={...yn(this,dn,"f").deckgl,onClick:yn(this,hn,"f"),onViewStateChange:yn(this,fn,"f")},l={...yn(this,dn,"f").editor,upload:yn(this,pn,"f")};null!=s.initialBounds&&delete s.initialViewState,yn(this,cn,"f").render((0,i.jsx)(o.StrictMode,{children:(0,i.jsx)(Vt,{theme:e,deckgl:s,mapgl:t,layers:n,layerSelector:r,onLayerVisibilityChange:this.state.setLayerVisibility,editor:l,lazyLoad:a})}))}setLayerVisibility(e){return yn(this,dn,"f").setLayerVisibility(e)}}cn=new WeakMap,un=new WeakMap,dn=new WeakMap,hn=new WeakMap,fn=new WeakMap,pn=new WeakMap;const bn={name:"rdeck",type:"output",factory(e,t,n){let r=null;return{get instance(){return r},renderValue(t){r=new mn(e,t),r.render()},resize(){}}}};function vn(e){const t=document.getElementById(e);return t&&jn(t)}function wn(){return[...document.querySelectorAll(".rdeck.html-widget")].map((e=>jn(e))).filter((e=>e instanceof mn))}function jn(e){var t;return null===(t=null==e?void 0:e.htmlwidget_data_init_result)||void 0===t?void 0:t.instance}HTMLWidgets.widget(bn);const xn="0.4.0"},479:()=>{},9125:()=>{},9214:()=>{},7579:()=>{}},i={};function a(e){var t=i[e];if(void 0!==t)return t.exports;var n=i[e]={exports:{}};return r[e].call(n.exports,n,n.exports,a),n.exports}a.m=r,e=[],a.O=(t,n,r,i)=>{if(!n){var o=1/0;for(u=0;u<e.length;u++){for(var[n,r,i]=e[u],s=!0,l=0;l<n.length;l++)(!1&i||o>=i)&&Object.keys(a.O).every((e=>a.O[e](n[l])))?n.splice(l--,1):(s=!1,i<o&&(o=i));if(s){e.splice(u--,1);var c=r();void 0!==c&&(t=c)}}return t}i=i||0;for(var u=e.length;u>0&&e[u-1][2]>i;u--)e[u]=e[u-1];e[u]=[n,r,i]},a.n=e=>{var t=e&&e.__esModule?()=>e.default:()=>e;return a.d(t,{a:t}),t},n=Object.getPrototypeOf?e=>Object.getPrototypeOf(e):e=>e.__proto__,a.t=function(e,r){if(1&r&&(e=this(e)),8&r)return e;if("object"==typeof e&&e){if(4&r&&e.__esModule)return e;if(16&r&&"function"==typeof e.then)return e}var i=Object.create(null);a.r(i);var o={};t=t||[null,n({}),n([]),n(n)];for(var s=2&r&&e;"object"==typeof s&&!~t.indexOf(s);s=n(s))Object.getOwnPropertyNames(s).forEach((t=>o[t]=()=>e[t]));return o.default=()=>e,a.d(i,o),i},a.d=(e,t)=>{for(var n in t)a.o(t,n)&&!a.o(e,n)&&Object.defineProperty(e,n,{enumerable:!0,get:t[n]})},a.g=function(){if("object"==typeof globalThis)return globalThis;try{return this||new Function("return this")()}catch(e){if("object"==typeof window)return window}}(),a.o=(e,t)=>Object.prototype.hasOwnProperty.call(e,t),a.r=e=>{"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(e,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(e,"__esModule",{value:!0})},(()=>{var e={472:0};a.O.j=t=>0===e[t];var t=(t,n)=>{var r,i,[o,s,l]=n,c=0;if(o.some((t=>0!==e[t]))){for(r in s)a.o(s,r)&&(a.m[r]=s[r]);if(l)var u=l(a)}for(t&&t(n);c<o.length;c++)i=o[c],a.o(e,i)&&e[i]&&e[i][0](),e[i]=0;return a.O(u)},n=self.webpackChunkrdeck=self.webpackChunkrdeck||[];n.forEach(t.bind(null,0)),n.push=t.bind(null,n.push.bind(n))})();var o=a.O(void 0,[486,474,619,315,568,175,627,977,811,42,899,667,324,134,133,294,468,745,535,528,783,784,485,378,645,394,816,650,869,706,836,458,769,67,806,551,282,953,538,49,264,844,912,639,825,596],(()=>a(4453)));return o=a.O(o)})()));
//# sourceMappingURL=data:application/json;charset=utf-8;base64,